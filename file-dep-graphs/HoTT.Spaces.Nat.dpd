N: 82 "IsSucc" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 104 "add" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 75 "add_O_n" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 73 "add_Sn_m" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 76 "add_n_O" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 74 "add_n_Sm" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 78 "ap011_add" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 72 "ap011_mul" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 77 "ap011_nat" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 87 "ap_S" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 86 "ap_nat" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 69 "code_nat" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 30 "decidable_ge" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 26 "decidable_gt" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 41 "decidable_leq" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 35 "decidable_lt" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 64 "decidable_paths_nat" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 96 "div" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 97 "divmod" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 103 "double" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 42 "equiv_leq_S_n" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 39 "equiv_leq_add" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 65 "equiv_path_nat" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 6 "factorial" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 94 "gcd" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 34 "ge" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 33 "ge_is_leq" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 29 "gt" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 28 "gt_is_leq" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 63 "hset_nat" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 68 "idcode_nat" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 81 "internal_paths_rec_nodep" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 66 "isequiv_path_nat" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 45 "ishprop_leq" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 88 "iter" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 44 "leq_0_n" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 3 "leq_1_Sn" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 46 "leq_S_inj" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 47 "leq_S_inj_gen" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 52 "leq_S_n" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 51 "leq_S_n'" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 40 "leq_add" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 5 "leq_antisym" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 2 "leq_dichot" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 59 "leq_ind" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 48 "leq_n_inj" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 49 "leq_n_inj_gen" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 53 "leq_n_pred" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 57 "leq_rec" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 58 "leq_rect" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 55 "leq_trans" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 89 "log2" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 90 "log2_iter" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 38 "lt" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 37 "lt_is_leq" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 100 "max" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 21 "max_0_n" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 23 "max_Sn_n" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 22 "max_comm" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 19 "max_l" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 20 "max_n_0" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 24 "max_n_n" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 18 "max_r" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 99 "min" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 17 "min_comm" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 16 "min_l" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 15 "min_r" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 95 "modulo" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 102 "mul" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 71 "mul_n_O" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 70 "mul_n_Sm" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 8 "nat_add_comm" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 10 "nat_add_n_O" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 9 "nat_add_n_Sm" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 25 "nat_double_ind" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 7 "nat_exp" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 108 "nat_ind" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 14 "nat_iter" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 12 "nat_iter_add" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 11 "nat_iter_invariant" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 13 "nat_iter_succ_r" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 106 "nat_rec" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 107 "nat_rect" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 80 "not_eq_O_S" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 83 "not_eq_S" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 79 "not_eq_n_Sn" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 43 "not_leq_Sn_0" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 50 "not_leq_Sn_n" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 1 "not_lt_n_0" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 4 "not_lt_n_n" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 67 "path_nat" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 84 "path_nat_S" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 98 "pow" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 105 "pred" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 85 "pred_Sn" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 32 "reflexive_ge" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 56 "reflexive_leq" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 91 "sqrt" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 92 "sqrt_iter" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 93 "square" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 101 "sub" [body=yes, kind=cnst, prop=no, path="Spaces.Nat", ];
N: 31 "transitive_ge" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 27 "transitive_gt" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 54 "transitive_leq" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 36 "transitive_lt" [body=yes, kind=cnst, prop=no, path="Nat", ];
N: 62 "leq" [kind=inductive, prop=no, path="Nat", ];
N: 61 "leq_n" [kind=construct, prop=no, path="Nat", ];
N: 60 "leq_S" [kind=construct, prop=no, path="Nat", ];
E: 1 38 [weight=1, ];
E: 1 43 [weight=1, ];
E: 2 3 [weight=1, ];
E: 2 29 [weight=16, ];
E: 2 38 [weight=4, ];
E: 2 44 [weight=1, ];
E: 2 51 [weight=2, ];
E: 2 56 [weight=1, ];
E: 2 62 [weight=19, ];
E: 3 44 [weight=1, ];
E: 3 51 [weight=1, ];
E: 3 62 [weight=1, ];
E: 4 38 [weight=1, ];
E: 4 50 [weight=1, ];
E: 5 50 [weight=1, ];
E: 5 52 [weight=1, ];
E: 5 55 [weight=1, ];
E: 5 62 [weight=20, ];
E: 5 81 [weight=2, ];
E: 6 102 [weight=1, ];
E: 7 102 [weight=1, ];
E: 8 9 [weight=1, ];
E: 8 10 [weight=1, ];
E: 8 104 [weight=15, ];
E: 9 104 [weight=12, ];
E: 10 104 [weight=6, ];
E: 11 14 [weight=6, ];
E: 12 14 [weight=23, ];
E: 12 104 [weight=6, ];
E: 13 14 [weight=14, ];
E: 15 16 [weight=1, ];
E: 15 17 [weight=1, ];
E: 15 62 [weight=2, ];
E: 15 99 [weight=3, ];
E: 16 52 [weight=1, ];
E: 16 62 [weight=10, ];
E: 16 81 [weight=2, ];
E: 16 87 [weight=1, ];
E: 16 99 [weight=10, ];
E: 17 86 [weight=1, ];
E: 17 99 [weight=20, ];
E: 18 19 [weight=1, ];
E: 18 22 [weight=1, ];
E: 18 62 [weight=2, ];
E: 18 100 [weight=3, ];
E: 19 20 [weight=1, ];
E: 19 52 [weight=1, ];
E: 19 62 [weight=10, ];
E: 19 81 [weight=2, ];
E: 19 87 [weight=1, ];
E: 19 100 [weight=10, ];
E: 20 21 [weight=1, ];
E: 20 22 [weight=1, ];
E: 20 100 [weight=3, ];
E: 21 100 [weight=1, ];
E: 22 86 [weight=1, ];
E: 22 100 [weight=20, ];
E: 23 86 [weight=1, ];
E: 23 100 [weight=6, ];
E: 24 86 [weight=1, ];
E: 24 100 [weight=6, ];
E: 26 29 [weight=1, ];
E: 26 30 [weight=1, ];
E: 27 29 [weight=3, ];
E: 27 36 [weight=1, ];
E: 28 29 [weight=1, ];
E: 28 62 [weight=2, ];
E: 29 38 [weight=1, ];
E: 30 34 [weight=1, ];
E: 30 41 [weight=1, ];
E: 31 34 [weight=3, ];
E: 31 55 [weight=1, ];
E: 32 34 [weight=1, ];
E: 32 61 [weight=1, ];
E: 33 34 [weight=1, ];
E: 33 62 [weight=2, ];
E: 34 62 [weight=1, ];
E: 35 38 [weight=1, ];
E: 35 41 [weight=1, ];
E: 36 38 [weight=5, ];
E: 36 55 [weight=1, ];
E: 36 60 [weight=1, ];
E: 36 62 [weight=2, ];
E: 37 38 [weight=1, ];
E: 37 62 [weight=2, ];
E: 38 62 [weight=1, ];
E: 39 40 [weight=1, ];
E: 39 45 [weight=1, ];
E: 39 58 [weight=1, ];
E: 39 62 [weight=6, ];
E: 39 63 [weight=1, ];
E: 39 74 [weight=2, ];
E: 39 76 [weight=2, ];
E: 39 81 [weight=1, ];
E: 39 84 [weight=2, ];
E: 39 87 [weight=1, ];
E: 39 104 [weight=50, ];
E: 40 60 [weight=1, ];
E: 40 61 [weight=1, ];
E: 40 62 [weight=3, ];
E: 40 104 [weight=4, ];
E: 41 42 [weight=1, ];
E: 41 43 [weight=1, ];
E: 41 44 [weight=1, ];
E: 41 60 [weight=1, ];
E: 41 61 [weight=1, ];
E: 41 62 [weight=15, ];
E: 42 45 [weight=2, ];
E: 42 51 [weight=1, ];
E: 42 52 [weight=1, ];
E: 42 62 [weight=5, ];
E: 43 44 [weight=1, ];
E: 43 50 [weight=1, ];
E: 43 55 [weight=1, ];
E: 43 62 [weight=4, ];
E: 44 60 [weight=1, ];
E: 44 61 [weight=1, ];
E: 44 62 [weight=3, ];
E: 45 46 [weight=1, ];
E: 45 48 [weight=1, ];
E: 45 58 [weight=1, ];
E: 45 62 [weight=12, ];
E: 46 47 [weight=1, ];
E: 46 60 [weight=1, ];
E: 46 62 [weight=5, ];
E: 47 48 [weight=1, ];
E: 47 50 [weight=1, ];
E: 47 58 [weight=1, ];
E: 47 60 [weight=18, ];
E: 47 61 [weight=2, ];
E: 47 62 [weight=57, ];
E: 47 63 [weight=1, ];
E: 47 84 [weight=1, ];
E: 48 49 [weight=1, ];
E: 48 61 [weight=1, ];
E: 48 62 [weight=3, ];
E: 49 50 [weight=1, ];
E: 49 58 [weight=1, ];
E: 49 60 [weight=2, ];
E: 49 61 [weight=10, ];
E: 49 62 [weight=24, ];
E: 49 63 [weight=1, ];
E: 50 52 [weight=1, ];
E: 50 62 [weight=10, ];
E: 50 81 [weight=2, ];
E: 51 57 [weight=1, ];
E: 51 60 [weight=1, ];
E: 51 61 [weight=1, ];
E: 51 62 [weight=6, ];
E: 52 53 [weight=1, ];
E: 52 62 [weight=2, ];
E: 53 57 [weight=1, ];
E: 53 60 [weight=1, ];
E: 53 61 [weight=1, ];
E: 53 62 [weight=15, ];
E: 53 105 [weight=20, ];
E: 54 55 [weight=1, ];
E: 54 62 [weight=1, ];
E: 55 57 [weight=1, ];
E: 55 60 [weight=1, ];
E: 55 62 [weight=8, ];
E: 56 61 [weight=1, ];
E: 56 62 [weight=1, ];
E: 57 62 [weight=6, ];
E: 58 60 [weight=2, ];
E: 58 61 [weight=2, ];
E: 58 62 [weight=8, ];
E: 59 60 [weight=2, ];
E: 59 61 [weight=2, ];
E: 59 62 [weight=8, ];
E: 63 64 [weight=1, ];
E: 64 66 [weight=1, ];
E: 64 67 [weight=1, ];
E: 64 69 [weight=2, ];
E: 65 66 [weight=1, ];
E: 65 67 [weight=1, ];
E: 65 69 [weight=2, ];
E: 66 67 [weight=14, ];
E: 66 68 [weight=13, ];
E: 66 69 [weight=16, ];
E: 67 69 [weight=9, ];
E: 68 69 [weight=3, ];
E: 70 74 [weight=1, ];
E: 70 86 [weight=1, ];
E: 70 102 [weight=34, ];
E: 70 104 [weight=49, ];
E: 71 102 [weight=5, ];
E: 72 102 [weight=3, ];
E: 73 104 [weight=3, ];
E: 74 86 [weight=1, ];
E: 74 104 [weight=12, ];
E: 75 104 [weight=1, ];
E: 76 86 [weight=1, ];
E: 76 104 [weight=6, ];
E: 78 104 [weight=3, ];
E: 79 80 [weight=1, ];
E: 79 83 [weight=1, ];
E: 80 81 [weight=1, ];
E: 83 84 [weight=1, ];
E: 84 105 [weight=1, ];
E: 85 105 [weight=2, ];
E: 88 106 [weight=1, ];
E: 89 90 [weight=1, ];
E: 89 105 [weight=1, ];
E: 91 92 [weight=1, ];
E: 93 102 [weight=1, ];
E: 94 95 [weight=1, ];
E: 95 97 [weight=1, ];
E: 95 101 [weight=1, ];
E: 96 97 [weight=1, ];
E: 98 102 [weight=1, ];
E: 102 104 [weight=1, ];
E: 103 104 [weight=1, ];
