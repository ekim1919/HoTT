N: 14 "Asymmetric" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 91 "Compose" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 22 "Empty_ind" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 21 "Empty_rec" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 20 "Empty_rect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 33 "Funext" [body=no, kind=cnst, prop=no, path="Overture", ];
N: 16 "Irreflexive" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 7 "IsPointed" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 36 "IsTrunc" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 37 "IsTrunc_internal" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 112 "PreOrder_Reflexive" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 111 "PreOrder_Transitive" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 120 "Reflexive" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 121 "Relation" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 118 "Symmetric" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 116 "Transitive" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 35 "Trunc_is_trunc" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 110 "Type1" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 108 "Type2" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 104 "Type2le" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 106 "Type3" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 102 "Type3le" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 10 "Unit_ind" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 9 "Unit_rec" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 8 "Unit_rect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 68 "ap" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 61 "ap10" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 48 "ap10_equiv" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 60 "ap11" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 59 "apD" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 62 "apD10" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 13 "asymmetry" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 45 "center" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 17 "complement" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 87 "composeD" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 71 "concat" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 100 "const" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 44 "contr" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 53 "eisadj" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 55 "eisretr" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 54 "eissect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 50 "equiv_fun" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 56 "equiv_inv" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 49 "equiv_isequiv" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 1 "hfiber" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 90 "iff_compose" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 89 "iff_inverse" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 88 "iff_reflexive" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 81 "internal_paths_rew" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 79 "internal_paths_rew_r" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 74 "inverse" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 15 "irreflexivity" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 32 "isequiv_apD10" [body=no, kind=cnst, prop=no, path="Overture", ];
N: 2 "ispointed_type" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 34 "istrunc_paths" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 26 "nat_ind" [body=yes, kind=cnst, prop=yes, path="Overture", ];
N: 25 "nat_rec" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 27 "nat_rect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 24 "nat_sind" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 19 "not" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 31 "path_forall" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 84 "paths_ind" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 76 "paths_ind'" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 75 "paths_ind_r" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 83 "paths_rec" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 82 "paths_rect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 72 "paths_rect_r" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 80 "paths_rew" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 78 "paths_rew_r" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 6 "point" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 3 "pointed_type" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 67 "pointwise_paths" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 66 "pointwise_paths_concat" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 97 "proj1" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 96 "proj2" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 77 "reflexive_paths" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 65 "reflexive_pointwise_paths" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 119 "reflexivity" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 94 "sig_ind" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 93 "sig_rec" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 95 "sig_rect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 18 "symmetric_neq" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 73 "symmetric_paths" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 63 "symmetric_pointwise_paths" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 117 "symmetry" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 70 "transitive_paths" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 64 "transitive_pointwise_paths" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 115 "transitivity" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 69 "transport" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 40 "trunc_index_ind" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 39 "trunc_index_rec" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 38 "trunc_index_rect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 92 "uncurry" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 109 "unfold_Type1" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 107 "unfold_Type2" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 103 "unfold_Type2le" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 105 "unfold_Type3" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 101 "unfold_Type3le" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 47 "Contr_internal" [kind=inductive, prop=no, path="Overture", ];
N: 23 "Empty" [kind=inductive, prop=no, path="Overture", ];
N: 52 "Equiv" [kind=inductive, prop=no, path="Overture", ];
N: 58 "IsEquiv" [kind=inductive, prop=no, path="Overture", ];
N: 114 "PreOrder" [kind=inductive, prop=no, path="Overture", ];
N: 12 "Unit" [kind=inductive, prop=no, path="Overture", ];
N: 30 "nat" [kind=inductive, prop=no, path="Overture", ];
N: 5 "pType" [kind=inductive, prop=no, path="Overture", ];
N: 86 "paths" [kind=inductive, prop=no, path="Overture", ];
N: 99 "sig" [kind=inductive, prop=no, path="Overture", ];
N: 43 "trunc_index" [kind=inductive, prop=no, path="Overture", ];
N: 46 "Build_Contr" [kind=construct, prop=no, path="Overture", ];
N: 51 "Build_Equiv" [kind=construct, prop=no, path="Overture", ];
N: 57 "Build_IsEquiv" [kind=construct, prop=no, path="Overture", ];
N: 113 "Build_PreOrder" [kind=construct, prop=no, path="Overture", ];
N: 11 "tt" [kind=construct, prop=no, path="Overture", ];
N: 29 "O" [kind=construct, prop=no, path="Overture", ];
N: 4 "Build_pType" [kind=construct, prop=no, path="Overture", ];
N: 85 "idpath" [kind=construct, prop=no, path="Overture", ];
N: 98 "exist" [kind=construct, prop=no, path="Overture", ];
N: 42 "minus_two" [kind=construct, prop=no, path="Overture", ];
N: 28 "S" [kind=construct, prop=no, path="Overture", ];
N: 41 "trunc_S" [kind=construct, prop=no, path="Overture", ];
E: 1 86 [weight=1, ];
E: 1 99 [weight=1, ];
E: 2 5 [weight=2, ];
E: 2 7 [weight=1, ];
E: 3 5 [weight=2, ];
E: 4 7 [weight=1, ];
E: 5 7 [weight=1, ];
E: 6 7 [weight=2, ];
E: 8 10 [weight=1, ];
E: 8 11 [weight=1, ];
E: 8 12 [weight=2, ];
E: 9 12 [weight=3, ];
E: 10 11 [weight=2, ];
E: 10 12 [weight=5, ];
E: 13 14 [weight=2, ];
E: 13 17 [weight=1, ];
E: 13 121 [weight=2, ];
E: 14 17 [weight=1, ];
E: 14 121 [weight=2, ];
E: 15 16 [weight=2, ];
E: 15 17 [weight=1, ];
E: 15 120 [weight=1, ];
E: 15 121 [weight=2, ];
E: 16 17 [weight=1, ];
E: 16 120 [weight=1, ];
E: 16 121 [weight=2, ];
E: 17 19 [weight=1, ];
E: 17 121 [weight=3, ];
E: 18 19 [weight=3, ];
E: 18 74 [weight=1, ];
E: 18 86 [weight=4, ];
E: 19 23 [weight=1, ];
E: 20 22 [weight=1, ];
E: 20 23 [weight=2, ];
E: 21 23 [weight=3, ];
E: 22 23 [weight=5, ];
E: 24 28 [weight=2, ];
E: 24 29 [weight=2, ];
E: 24 30 [weight=8, ];
E: 25 27 [weight=1, ];
E: 25 28 [weight=1, ];
E: 25 29 [weight=1, ];
E: 25 30 [weight=4, ];
E: 26 28 [weight=2, ];
E: 26 29 [weight=2, ];
E: 26 30 [weight=8, ];
E: 27 28 [weight=2, ];
E: 27 29 [weight=2, ];
E: 27 30 [weight=8, ];
E: 31 32 [weight=1, ];
E: 31 33 [weight=2, ];
E: 31 67 [weight=1, ];
E: 31 86 [weight=1, ];
E: 32 33 [weight=1, ];
E: 32 58 [weight=1, ];
E: 32 62 [weight=1, ];
E: 32 67 [weight=1, ];
E: 32 86 [weight=1, ];
E: 34 36 [weight=3, ];
E: 34 41 [weight=2, ];
E: 34 43 [weight=2, ];
E: 34 86 [weight=1, ];
E: 35 36 [weight=2, ];
E: 35 37 [weight=1, ];
E: 35 43 [weight=2, ];
E: 36 37 [weight=1, ];
E: 36 43 [weight=2, ];
E: 37 43 [weight=4, ];
E: 37 47 [weight=1, ];
E: 37 86 [weight=1, ];
E: 38 40 [weight=1, ];
E: 38 41 [weight=1, ];
E: 38 42 [weight=1, ];
E: 38 43 [weight=3, ];
E: 39 43 [weight=6, ];
E: 40 41 [weight=2, ];
E: 40 42 [weight=2, ];
E: 40 43 [weight=8, ];
E: 44 47 [weight=2, ];
E: 44 86 [weight=1, ];
E: 45 47 [weight=2, ];
E: 46 86 [weight=1, ];
E: 47 86 [weight=1, ];
E: 48 50 [weight=3, ];
E: 48 52 [weight=7, ];
E: 48 61 [weight=1, ];
E: 48 67 [weight=1, ];
E: 48 68 [weight=1, ];
E: 48 86 [weight=2, ];
E: 49 52 [weight=2, ];
E: 49 58 [weight=1, ];
E: 50 52 [weight=2, ];
E: 51 58 [weight=1, ];
E: 52 58 [weight=1, ];
E: 53 58 [weight=2, ];
E: 53 68 [weight=1, ];
E: 53 86 [weight=2, ];
E: 54 58 [weight=2, ];
E: 54 67 [weight=1, ];
E: 55 58 [weight=2, ];
E: 55 67 [weight=1, ];
E: 56 58 [weight=2, ];
E: 57 67 [weight=2, ];
E: 57 68 [weight=1, ];
E: 57 86 [weight=2, ];
E: 58 67 [weight=2, ];
E: 58 68 [weight=1, ];
E: 58 86 [weight=2, ];
E: 59 69 [weight=3, ];
E: 59 85 [weight=2, ];
E: 59 86 [weight=5, ];
E: 60 85 [weight=1, ];
E: 60 86 [weight=9, ];
E: 61 62 [weight=1, ];
E: 61 67 [weight=1, ];
E: 61 86 [weight=2, ];
E: 62 67 [weight=1, ];
E: 62 85 [weight=1, ];
E: 62 86 [weight=4, ];
E: 63 67 [weight=4, ];
E: 63 74 [weight=1, ];
E: 63 118 [weight=2, ];
E: 64 66 [weight=1, ];
E: 64 67 [weight=2, ];
E: 64 116 [weight=2, ];
E: 65 67 [weight=3, ];
E: 65 85 [weight=1, ];
E: 65 120 [weight=2, ];
E: 66 67 [weight=5, ];
E: 66 71 [weight=1, ];
E: 67 86 [weight=1, ];
E: 68 85 [weight=1, ];
E: 68 86 [weight=5, ];
E: 69 86 [weight=3, ];
E: 70 71 [weight=1, ];
E: 70 86 [weight=1, ];
E: 70 116 [weight=1, ];
E: 71 85 [weight=1, ];
E: 71 86 [weight=11, ];
E: 72 74 [weight=1, ];
E: 72 82 [weight=1, ];
E: 72 86 [weight=3, ];
E: 73 74 [weight=1, ];
E: 73 86 [weight=1, ];
E: 73 118 [weight=1, ];
E: 74 85 [weight=1, ];
E: 74 86 [weight=5, ];
E: 75 85 [weight=4, ];
E: 75 86 [weight=7, ];
E: 76 85 [weight=2, ];
E: 76 86 [weight=5, ];
E: 77 85 [weight=1, ];
E: 77 86 [weight=1, ];
E: 77 120 [weight=1, ];
E: 78 79 [weight=1, ];
E: 78 86 [weight=2, ];
E: 79 86 [weight=3, ];
E: 80 81 [weight=1, ];
E: 80 86 [weight=2, ];
E: 81 86 [weight=3, ];
E: 82 84 [weight=1, ];
E: 82 85 [weight=1, ];
E: 82 86 [weight=2, ];
E: 83 86 [weight=3, ];
E: 84 85 [weight=2, ];
E: 84 86 [weight=5, ];
E: 88 120 [weight=1, ];
E: 89 118 [weight=1, ];
E: 90 116 [weight=1, ];
E: 93 99 [weight=2, ];
E: 94 98 [weight=2, ];
E: 94 99 [weight=4, ];
E: 95 98 [weight=2, ];
E: 95 99 [weight=4, ];
E: 96 99 [weight=2, ];
E: 97 99 [weight=2, ];
E: 101 102 [weight=3, ];
E: 103 104 [weight=3, ];
E: 105 106 [weight=3, ];
E: 107 108 [weight=3, ];
E: 109 110 [weight=3, ];
E: 111 114 [weight=2, ];
E: 111 116 [weight=1, ];
E: 111 121 [weight=2, ];
E: 112 114 [weight=2, ];
E: 112 120 [weight=1, ];
E: 112 121 [weight=2, ];
E: 113 116 [weight=1, ];
E: 113 120 [weight=1, ];
E: 113 121 [weight=1, ];
E: 114 116 [weight=1, ];
E: 114 120 [weight=1, ];
E: 114 121 [weight=1, ];
E: 115 116 [weight=2, ];
E: 115 121 [weight=2, ];
E: 116 121 [weight=2, ];
E: 117 118 [weight=2, ];
E: 117 121 [weight=2, ];
E: 118 121 [weight=2, ];
E: 119 120 [weight=2, ];
E: 119 121 [weight=2, ];
E: 120 121 [weight=2, ];
