N: 24 "Indecomposable_ind" [body=yes, kind=cnst, prop=yes, path="Sum", ];
N: 23 "Indecomposable_rec" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 25 "Indecomposable_rect" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 22 "Indecomposable_sind" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 94 "decidable_hfiber_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 92 "decidable_hfiber_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 81 "decidable_is_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 80 "decidable_is_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 8 "decidable_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 7 "decidablepaths_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 32 "decompose_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 31 "decompose_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 99 "eisretr_path_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 98 "eissect_path_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 91 "equiv_decidable_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 90 "equiv_decidable_sum_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 89 "equiv_decidable_sum_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 30 "equiv_decompose" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 48 "equiv_functor_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 47 "equiv_functor_sum'" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 46 "equiv_functor_sum_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 45 "equiv_functor_sum_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 18 "equiv_indecomposable_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 96 "equiv_path_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 33 "equiv_sigma_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 38 "equiv_sum_assoc" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 12 "equiv_sum_distributive" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 13 "equiv_sum_ind" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 39 "equiv_sum_symm" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 40 "equiv_unfunctor_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 16 "equiv_unfunctor_sum_contr_ll" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 17 "equiv_unfunctor_sum_indecomposable_ll" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 43 "equiv_unfunctor_sum_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 41 "equiv_unfunctor_sum_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 106 "eta_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 66 "functor_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 63 "functor_sum_homotopic" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 65 "hfiber_functor_sum_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 64 "hfiber_functor_sum_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 53 "hfiber_unfunctor_sum_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 55 "hfiber_unfunctor_sum_l_subproof" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 54 "hfiber_unfunctor_sum_l_subproof0" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 50 "hfiber_unfunctor_sum_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 52 "hfiber_unfunctor_sum_r_subproof" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 51 "hfiber_unfunctor_sum_r_subproof0" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 19 "indecomposable_contr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 21 "indecompose" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 20 "indecompose0" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 103 "inl_ne_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 73 "inl_un_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 102 "inr_ne_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 72 "inr_un_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 85 "is_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 87 "is_inl_and" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 29 "is_inl_decompose_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 68 "is_inl_ind" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 77 "is_inl_not_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 69 "is_inl_or_is_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 84 "is_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 86 "is_inr_and" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 28 "is_inr_decompose_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 67 "is_inr_ind" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 76 "is_inr_not_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 49 "isequiv_functor_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 97 "isequiv_path_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 3 "isequiv_sig_of_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 14 "isequiv_sum_ind" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 2 "isequiv_sum_of_sig" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 44 "isequiv_unfunctor_sum_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 42 "isequiv_unfunctor_sum_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 6 "ishprop_decidable_hprop" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 95 "ishprop_hfiber_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 93 "ishprop_hfiber_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 83 "ishprop_is_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 82 "ishprop_is_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 9 "ishprop_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 10 "ishset_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 11 "istrunc_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 71 "not_is_inl_and_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 70 "not_is_inl_and_inr'" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 105 "path_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 101 "path_sum_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 100 "path_sum_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 104 "path_sum_inv" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 5 "sig_of_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 35 "sum_distrib_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 34 "sum_distrib_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 37 "sum_empty_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 36 "sum_empty_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 107 "sum_ind" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 15 "sum_ind_uncurried" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 4 "sum_of_sig" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 88 "transport_sum" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 1 "trunc_sum'" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 79 "un_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 75 "un_inl_inl" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 78 "un_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 74 "un_inr_inr" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 60 "unfunctor_sum_eta" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 62 "unfunctor_sum_l" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 59 "unfunctor_sum_l_beta" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 57 "unfunctor_sum_l_compose" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 61 "unfunctor_sum_r" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 58 "unfunctor_sum_r_beta" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 56 "unfunctor_sum_r_compose" [body=yes, kind=cnst, prop=no, path="Sum", ];
N: 27 "Indecomposable" [kind=inductive, prop=no, path="Sum", ];
N: 26 "Build_Indecomposable" [kind=construct, prop=no, path="Sum", ];
E: 1 2 [weight=1, ];
E: 1 4 [weight=1, ];
E: 2 3 [weight=1, ];
E: 2 4 [weight=1, ];
E: 2 5 [weight=1, ];
E: 3 4 [weight=9, ];
E: 3 5 [weight=10, ];
E: 6 9 [weight=1, ];
E: 7 97 [weight=4, ];
E: 10 11 [weight=1, ];
E: 11 96 [weight=1, ];
E: 12 13 [weight=1, ];
E: 13 14 [weight=1, ];
E: 13 15 [weight=1, ];
E: 14 15 [weight=12, ];
E: 15 107 [weight=1, ];
E: 16 17 [weight=1, ];
E: 16 19 [weight=1, ];
E: 16 47 [weight=1, ];
E: 17 18 [weight=3, ];
E: 17 27 [weight=2, ];
E: 17 30 [weight=2, ];
E: 17 31 [weight=110, ];
E: 17 32 [weight=131, ];
E: 17 38 [weight=4, ];
E: 17 39 [weight=1, ];
E: 17 40 [weight=1, ];
E: 17 47 [weight=6, ];
E: 17 69 [weight=1, ];
E: 17 84 [weight=5, ];
E: 17 85 [weight=5, ];
E: 18 27 [weight=2, ];
E: 18 36 [weight=1, ];
E: 18 37 [weight=1, ];
E: 18 40 [weight=2, ];
E: 18 84 [weight=4, ];
E: 18 85 [weight=4, ];
E: 19 26 [weight=1, ];
E: 19 27 [weight=1, ];
E: 19 69 [weight=1, ];
E: 19 84 [weight=7, ];
E: 19 85 [weight=7, ];
E: 20 27 [weight=2, ];
E: 21 27 [weight=2, ];
E: 21 84 [weight=1, ];
E: 21 85 [weight=1, ];
E: 22 26 [weight=2, ];
E: 22 27 [weight=4, ];
E: 22 84 [weight=2, ];
E: 22 85 [weight=2, ];
E: 23 25 [weight=1, ];
E: 23 26 [weight=1, ];
E: 23 27 [weight=3, ];
E: 23 84 [weight=1, ];
E: 23 85 [weight=1, ];
E: 24 26 [weight=2, ];
E: 24 27 [weight=4, ];
E: 24 84 [weight=2, ];
E: 24 85 [weight=2, ];
E: 25 26 [weight=2, ];
E: 25 27 [weight=4, ];
E: 25 84 [weight=2, ];
E: 25 85 [weight=2, ];
E: 26 84 [weight=1, ];
E: 26 85 [weight=1, ];
E: 27 84 [weight=1, ];
E: 27 85 [weight=1, ];
E: 28 30 [weight=1, ];
E: 28 31 [weight=3, ];
E: 28 32 [weight=1, ];
E: 28 84 [weight=1, ];
E: 29 30 [weight=1, ];
E: 29 31 [weight=1, ];
E: 29 32 [weight=3, ];
E: 29 85 [weight=1, ];
E: 30 31 [weight=1, ];
E: 30 32 [weight=1, ];
E: 30 69 [weight=9, ];
E: 30 70 [weight=2, ];
E: 30 82 [weight=1, ];
E: 30 83 [weight=1, ];
E: 30 84 [weight=204, ];
E: 30 85 [weight=204, ];
E: 30 107 [weight=25, ];
E: 31 84 [weight=1, ];
E: 32 85 [weight=1, ];
E: 40 41 [weight=1, ];
E: 40 43 [weight=1, ];
E: 40 84 [weight=2, ];
E: 40 85 [weight=2, ];
E: 41 42 [weight=1, ];
E: 41 61 [weight=1, ];
E: 41 84 [weight=2, ];
E: 41 85 [weight=2, ];
E: 42 56 [weight=2, ];
E: 42 58 [weight=2, ];
E: 42 61 [weight=17, ];
E: 42 67 [weight=8, ];
E: 42 84 [weight=40, ];
E: 42 85 [weight=17, ];
E: 42 100 [weight=2, ];
E: 43 44 [weight=1, ];
E: 43 62 [weight=1, ];
E: 43 84 [weight=2, ];
E: 43 85 [weight=2, ];
E: 44 57 [weight=2, ];
E: 44 59 [weight=2, ];
E: 44 62 [weight=17, ];
E: 44 68 [weight=8, ];
E: 44 84 [weight=17, ];
E: 44 85 [weight=40, ];
E: 44 101 [weight=2, ];
E: 45 47 [weight=1, ];
E: 46 47 [weight=1, ];
E: 47 48 [weight=1, ];
E: 48 49 [weight=1, ];
E: 48 66 [weight=1, ];
E: 49 66 [weight=19, ];
E: 50 51 [weight=1, ];
E: 50 52 [weight=30, ];
E: 50 61 [weight=122, ];
E: 50 72 [weight=30, ];
E: 50 78 [weight=2, ];
E: 50 84 [weight=2, ];
E: 50 85 [weight=24, ];
E: 50 97 [weight=2, ];
E: 50 100 [weight=17, ];
E: 50 105 [weight=1, ];
E: 51 85 [weight=4, ];
E: 52 61 [weight=2, ];
E: 52 84 [weight=2, ];
E: 52 85 [weight=4, ];
E: 53 54 [weight=1, ];
E: 53 55 [weight=30, ];
E: 53 62 [weight=122, ];
E: 53 73 [weight=30, ];
E: 53 79 [weight=2, ];
E: 53 84 [weight=24, ];
E: 53 85 [weight=2, ];
E: 53 97 [weight=2, ];
E: 53 101 [weight=17, ];
E: 53 105 [weight=1, ];
E: 54 84 [weight=4, ];
E: 55 62 [weight=2, ];
E: 55 84 [weight=4, ];
E: 55 85 [weight=2, ];
E: 56 58 [weight=3, ];
E: 56 61 [weight=18, ];
E: 56 67 [weight=7, ];
E: 56 84 [weight=11, ];
E: 56 100 [weight=1, ];
E: 57 59 [weight=3, ];
E: 57 62 [weight=18, ];
E: 57 68 [weight=7, ];
E: 57 85 [weight=11, ];
E: 57 101 [weight=1, ];
E: 58 61 [weight=3, ];
E: 58 72 [weight=1, ];
E: 58 84 [weight=2, ];
E: 59 62 [weight=3, ];
E: 59 73 [weight=1, ];
E: 59 85 [weight=2, ];
E: 60 61 [weight=6, ];
E: 60 62 [weight=6, ];
E: 60 66 [weight=5, ];
E: 60 72 [weight=1, ];
E: 60 73 [weight=1, ];
E: 60 84 [weight=2, ];
E: 60 85 [weight=2, ];
E: 61 78 [weight=1, ];
E: 61 84 [weight=2, ];
E: 62 79 [weight=1, ];
E: 62 85 [weight=2, ];
E: 63 66 [weight=6, ];
E: 64 66 [weight=54, ];
E: 64 97 [weight=2, ];
E: 64 100 [weight=9, ];
E: 64 103 [weight=10, ];
E: 64 105 [weight=2, ];
E: 65 66 [weight=54, ];
E: 65 97 [weight=2, ];
E: 65 101 [weight=9, ];
E: 65 102 [weight=10, ];
E: 65 105 [weight=2, ];
E: 67 84 [weight=4, ];
E: 68 85 [weight=4, ];
E: 69 84 [weight=3, ];
E: 69 85 [weight=3, ];
E: 70 71 [weight=1, ];
E: 70 84 [weight=1, ];
E: 70 85 [weight=1, ];
E: 71 86 [weight=4, ];
E: 71 87 [weight=4, ];
E: 72 78 [weight=4, ];
E: 72 84 [weight=5, ];
E: 73 79 [weight=4, ];
E: 73 85 [weight=5, ];
E: 74 78 [weight=2, ];
E: 74 84 [weight=2, ];
E: 75 79 [weight=2, ];
E: 75 85 [weight=2, ];
E: 76 85 [weight=2, ];
E: 77 84 [weight=2, ];
E: 78 84 [weight=4, ];
E: 79 85 [weight=4, ];
E: 80 84 [weight=3, ];
E: 81 85 [weight=3, ];
E: 82 84 [weight=3, ];
E: 83 85 [weight=3, ];
E: 84 86 [weight=1, ];
E: 85 87 [weight=1, ];
E: 89 91 [weight=2, ];
E: 90 91 [weight=2, ];
E: 92 96 [weight=1, ];
E: 92 102 [weight=3, ];
E: 93 96 [weight=1, ];
E: 93 102 [weight=3, ];
E: 94 96 [weight=1, ];
E: 94 103 [weight=3, ];
E: 95 96 [weight=1, ];
E: 95 103 [weight=3, ];
E: 96 97 [weight=1, ];
E: 96 105 [weight=1, ];
E: 97 98 [weight=8, ];
E: 97 99 [weight=10, ];
E: 97 104 [weight=17, ];
E: 97 105 [weight=52, ];
E: 98 104 [weight=11, ];
E: 98 105 [weight=11, ];
E: 99 104 [weight=5, ];
E: 99 105 [weight=5, ];
E: 100 104 [weight=1, ];
E: 101 104 [weight=1, ];
E: 102 104 [weight=1, ];
E: 103 104 [weight=1, ];
