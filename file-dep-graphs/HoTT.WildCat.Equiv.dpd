N: 57 "Build_CatEquiv" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 62 "CatEquiv" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 72 "CatEquiv'" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 60 "CatIsEquiv" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 71 "CatIsEquiv'" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 75 "HasEquivs_ind" [body=yes, kind=cnst, prop=yes, path="Equiv", ];
N: 74 "HasEquivs_rec" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 76 "HasEquivs_rect" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 73 "HasEquivs_sind" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 28 "IsUnivalent1Cat_ind" [body=yes, kind=cnst, prop=yes, path="Equiv", ];
N: 27 "IsUnivalent1Cat_rec" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 29 "IsUnivalent1Cat_rect" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 26 "IsUnivalent1Cat_sind" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 32 "cat_equiv_path" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 24 "cat_path_equiv" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 54 "cate_adjointify" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 68 "cate_buildequiv'" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 56 "cate_buildequiv_fun" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 67 "cate_buildequiv_fun'" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 61 "cate_fun" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 70 "cate_fun'" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 53 "cate_inv" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 66 "cate_inv'" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 58 "cate_isequiv" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 69 "cate_isequiv'" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 4 "cate_isinitial" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 51 "cate_isretr" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 64 "cate_isretr'" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 52 "cate_issect" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 65 "cate_issect'" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 3 "cate_isterminal" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 55 "catie_adjointify" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 63 "catie_adjointify'" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 50 "catie_id" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 59 "catisequiv" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 38 "compose_V_hh" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 46 "compose_cate" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 42 "compose_cate_assoc" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 45 "compose_cate_fun" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 44 "compose_cate_funinv" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 41 "compose_cate_idl" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 40 "compose_cate_idr" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 35 "compose_hV_h" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 37 "compose_h_Vh" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 36 "compose_hh_V" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 20 "core_ind" [body=yes, kind=cnst, prop=yes, path="Equiv", ];
N: 19 "core_rec" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 21 "core_rect" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 18 "core_sind" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 33 "emap" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 5 "equiv_postcompose_cat_equiv" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 6 "equiv_precompose_cat_equiv" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 49 "id_cate" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 43 "id_cate_fun" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 34 "iemap" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 15 "is01cat_core" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 13 "is01cat_core_hom" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 11 "is0functor_core_postcomp" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 10 "is0functor_core_precomp" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 8 "is0gpd_core" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 12 "is0gpd_core_hom" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 9 "is1cat_core" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 7 "is1gpd_core" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 14 "is2graph_core" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 25 "isequiv_cat_equiv_path" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 16 "isgraph_core" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 2 "isinitial_cate" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 1 "isterminal_cate" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 48 "reflexive_cate" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 47 "symmetric_cate" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 39 "transitive_cate" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 17 "uncore" [body=yes, kind=cnst, prop=no, path="Equiv", ];
N: 78 "HasEquivs" [kind=inductive, prop=no, path="Equiv", ];
N: 31 "IsUnivalent1Cat" [kind=inductive, prop=no, path="Equiv", ];
N: 23 "core" [kind=inductive, prop=no, path="Equiv", ];
N: 77 "Build_HasEquivs" [kind=construct, prop=no, path="Equiv", ];
N: 30 "Build_IsUnivalent1Cat" [kind=construct, prop=no, path="Equiv", ];
N: 22 "Build_core" [kind=construct, prop=no, path="Equiv", ];
E: 1 37 [weight=1, ];
E: 1 53 [weight=3, ];
E: 1 61 [weight=7, ];
E: 1 62 [weight=2, ];
E: 1 78 [weight=2, ];
E: 2 36 [weight=1, ];
E: 2 53 [weight=4, ];
E: 2 61 [weight=7, ];
E: 2 62 [weight=2, ];
E: 2 78 [weight=2, ];
E: 3 54 [weight=1, ];
E: 3 62 [weight=1, ];
E: 3 78 [weight=2, ];
E: 4 54 [weight=1, ];
E: 4 62 [weight=1, ];
E: 4 78 [weight=2, ];
E: 5 51 [weight=1, ];
E: 5 52 [weight=1, ];
E: 5 53 [weight=19, ];
E: 5 61 [weight=38, ];
E: 5 62 [weight=2, ];
E: 5 78 [weight=2, ];
E: 6 51 [weight=1, ];
E: 6 52 [weight=1, ];
E: 6 53 [weight=15, ];
E: 6 61 [weight=30, ];
E: 6 62 [weight=2, ];
E: 6 78 [weight=2, ];
E: 7 8 [weight=4, ];
E: 7 9 [weight=6, ];
E: 7 14 [weight=4, ];
E: 7 15 [weight=6, ];
E: 7 16 [weight=8, ];
E: 7 23 [weight=12, ];
E: 7 43 [weight=2, ];
E: 7 45 [weight=2, ];
E: 7 46 [weight=4, ];
E: 7 49 [weight=4, ];
E: 7 51 [weight=1, ];
E: 7 52 [weight=1, ];
E: 7 53 [weight=8, ];
E: 7 61 [weight=12, ];
E: 7 62 [weight=2, ];
E: 7 78 [weight=2, ];
E: 8 15 [weight=2, ];
E: 8 16 [weight=4, ];
E: 8 23 [weight=4, ];
E: 8 53 [weight=1, ];
E: 8 78 [weight=2, ];
E: 9 10 [weight=1, ];
E: 9 11 [weight=1, ];
E: 9 12 [weight=1, ];
E: 9 13 [weight=1, ];
E: 9 14 [weight=2, ];
E: 9 15 [weight=2, ];
E: 9 16 [weight=9, ];
E: 9 23 [weight=20, ];
E: 9 40 [weight=1, ];
E: 9 41 [weight=1, ];
E: 9 42 [weight=1, ];
E: 9 78 [weight=2, ];
E: 10 14 [weight=5, ];
E: 10 15 [weight=2, ];
E: 10 16 [weight=15, ];
E: 10 23 [weight=13, ];
E: 10 45 [weight=2, ];
E: 10 46 [weight=4, ];
E: 10 61 [weight=15, ];
E: 10 78 [weight=2, ];
E: 11 14 [weight=5, ];
E: 11 15 [weight=2, ];
E: 11 16 [weight=15, ];
E: 11 23 [weight=13, ];
E: 11 45 [weight=2, ];
E: 11 46 [weight=4, ];
E: 11 61 [weight=15, ];
E: 11 78 [weight=2, ];
E: 12 13 [weight=2, ];
E: 12 14 [weight=4, ];
E: 12 16 [weight=8, ];
E: 12 23 [weight=8, ];
E: 12 78 [weight=2, ];
E: 13 14 [weight=6, ];
E: 13 16 [weight=12, ];
E: 13 23 [weight=10, ];
E: 13 61 [weight=4, ];
E: 13 78 [weight=2, ];
E: 14 16 [weight=5, ];
E: 14 23 [weight=4, ];
E: 14 61 [weight=2, ];
E: 14 78 [weight=2, ];
E: 15 16 [weight=6, ];
E: 15 23 [weight=10, ];
E: 15 46 [weight=1, ];
E: 15 49 [weight=1, ];
E: 15 78 [weight=2, ];
E: 16 23 [weight=4, ];
E: 16 62 [weight=1, ];
E: 16 78 [weight=2, ];
E: 17 23 [weight=2, ];
E: 18 22 [weight=2, ];
E: 18 23 [weight=4, ];
E: 19 21 [weight=1, ];
E: 19 22 [weight=1, ];
E: 19 23 [weight=3, ];
E: 20 22 [weight=2, ];
E: 20 23 [weight=4, ];
E: 21 22 [weight=2, ];
E: 21 23 [weight=4, ];
E: 24 31 [weight=2, ];
E: 24 62 [weight=1, ];
E: 24 78 [weight=2, ];
E: 25 31 [weight=2, ];
E: 25 32 [weight=1, ];
E: 25 62 [weight=1, ];
E: 25 78 [weight=2, ];
E: 26 30 [weight=2, ];
E: 26 31 [weight=4, ];
E: 26 32 [weight=2, ];
E: 26 62 [weight=2, ];
E: 26 78 [weight=2, ];
E: 27 29 [weight=1, ];
E: 27 30 [weight=1, ];
E: 27 31 [weight=3, ];
E: 27 32 [weight=1, ];
E: 27 62 [weight=1, ];
E: 27 78 [weight=2, ];
E: 28 30 [weight=2, ];
E: 28 31 [weight=4, ];
E: 28 32 [weight=2, ];
E: 28 62 [weight=2, ];
E: 28 78 [weight=2, ];
E: 29 30 [weight=2, ];
E: 29 31 [weight=4, ];
E: 29 32 [weight=2, ];
E: 29 62 [weight=2, ];
E: 29 78 [weight=2, ];
E: 30 32 [weight=1, ];
E: 30 62 [weight=1, ];
E: 30 78 [weight=1, ];
E: 31 32 [weight=1, ];
E: 31 62 [weight=1, ];
E: 31 78 [weight=1, ];
E: 32 48 [weight=1, ];
E: 32 62 [weight=2, ];
E: 32 78 [weight=2, ];
E: 33 34 [weight=1, ];
E: 33 57 [weight=1, ];
E: 33 61 [weight=1, ];
E: 33 62 [weight=3, ];
E: 33 78 [weight=4, ];
E: 34 51 [weight=1, ];
E: 34 52 [weight=1, ];
E: 34 53 [weight=15, ];
E: 34 55 [weight=1, ];
E: 34 60 [weight=1, ];
E: 34 61 [weight=31, ];
E: 34 62 [weight=2, ];
E: 34 78 [weight=4, ];
E: 35 52 [weight=1, ];
E: 35 53 [weight=6, ];
E: 35 61 [weight=12, ];
E: 35 62 [weight=2, ];
E: 35 78 [weight=2, ];
E: 36 51 [weight=1, ];
E: 36 53 [weight=6, ];
E: 36 61 [weight=12, ];
E: 36 62 [weight=2, ];
E: 36 78 [weight=2, ];
E: 37 51 [weight=1, ];
E: 37 53 [weight=8, ];
E: 37 61 [weight=16, ];
E: 37 62 [weight=2, ];
E: 37 78 [weight=2, ];
E: 38 52 [weight=1, ];
E: 38 53 [weight=8, ];
E: 38 61 [weight=16, ];
E: 38 62 [weight=2, ];
E: 38 78 [weight=2, ];
E: 39 46 [weight=1, ];
E: 39 62 [weight=3, ];
E: 39 78 [weight=2, ];
E: 40 45 [weight=1, ];
E: 40 46 [weight=3, ];
E: 40 49 [weight=5, ];
E: 40 50 [weight=2, ];
E: 40 56 [weight=1, ];
E: 40 57 [weight=1, ];
E: 40 61 [weight=12, ];
E: 40 62 [weight=2, ];
E: 40 78 [weight=2, ];
E: 41 45 [weight=1, ];
E: 41 46 [weight=3, ];
E: 41 49 [weight=5, ];
E: 41 50 [weight=2, ];
E: 41 56 [weight=1, ];
E: 41 57 [weight=1, ];
E: 41 61 [weight=12, ];
E: 41 62 [weight=2, ];
E: 41 78 [weight=2, ];
E: 42 44 [weight=2, ];
E: 42 45 [weight=2, ];
E: 42 46 [weight=21, ];
E: 42 61 [weight=36, ];
E: 42 62 [weight=6, ];
E: 42 78 [weight=2, ];
E: 43 49 [weight=1, ];
E: 43 50 [weight=1, ];
E: 43 56 [weight=1, ];
E: 43 61 [weight=1, ];
E: 43 78 [weight=2, ];
E: 44 46 [weight=2, ];
E: 44 51 [weight=2, ];
E: 44 52 [weight=2, ];
E: 44 53 [weight=54, ];
E: 44 55 [weight=1, ];
E: 44 56 [weight=1, ];
E: 44 61 [weight=116, ];
E: 44 62 [weight=4, ];
E: 44 78 [weight=2, ];
E: 45 46 [weight=1, ];
E: 45 51 [weight=2, ];
E: 45 52 [weight=2, ];
E: 45 53 [weight=54, ];
E: 45 55 [weight=1, ];
E: 45 56 [weight=1, ];
E: 45 61 [weight=113, ];
E: 45 62 [weight=4, ];
E: 45 78 [weight=2, ];
E: 46 51 [weight=2, ];
E: 46 52 [weight=2, ];
E: 46 53 [weight=54, ];
E: 46 54 [weight=1, ];
E: 46 61 [weight=108, ];
E: 46 62 [weight=5, ];
E: 46 78 [weight=2, ];
E: 47 53 [weight=1, ];
E: 47 62 [weight=2, ];
E: 47 78 [weight=2, ];
E: 48 49 [weight=1, ];
E: 48 62 [weight=1, ];
E: 48 78 [weight=2, ];
E: 49 50 [weight=1, ];
E: 49 57 [weight=1, ];
E: 49 62 [weight=1, ];
E: 49 78 [weight=2, ];
E: 50 55 [weight=1, ];
E: 50 60 [weight=1, ];
E: 50 78 [weight=2, ];
E: 51 53 [weight=3, ];
E: 51 55 [weight=1, ];
E: 51 61 [weight=7, ];
E: 51 62 [weight=2, ];
E: 51 78 [weight=2, ];
E: 52 53 [weight=3, ];
E: 52 55 [weight=1, ];
E: 52 61 [weight=7, ];
E: 52 62 [weight=2, ];
E: 52 78 [weight=2, ];
E: 53 54 [weight=1, ];
E: 53 61 [weight=1, ];
E: 53 62 [weight=3, ];
E: 53 78 [weight=2, ];
E: 54 55 [weight=1, ];
E: 54 57 [weight=1, ];
E: 54 62 [weight=1, ];
E: 54 78 [weight=2, ];
E: 55 60 [weight=1, ];
E: 55 78 [weight=2, ];
E: 56 57 [weight=1, ];
E: 56 60 [weight=2, ];
E: 56 61 [weight=1, ];
E: 56 78 [weight=2, ];
E: 57 60 [weight=2, ];
E: 57 62 [weight=1, ];
E: 57 78 [weight=2, ];
E: 58 60 [weight=1, ];
E: 58 61 [weight=1, ];
E: 58 62 [weight=2, ];
E: 58 78 [weight=2, ];
E: 59 60 [weight=2, ];
E: 59 78 [weight=2, ];
E: 60 78 [weight=2, ];
E: 61 62 [weight=2, ];
E: 61 78 [weight=2, ];
E: 62 78 [weight=2, ];
E: 63 78 [weight=2, ];
E: 64 78 [weight=2, ];
E: 65 78 [weight=2, ];
E: 66 78 [weight=2, ];
E: 67 78 [weight=2, ];
E: 68 78 [weight=2, ];
E: 69 78 [weight=2, ];
E: 70 78 [weight=2, ];
E: 71 78 [weight=2, ];
E: 72 78 [weight=2, ];
E: 73 77 [weight=2, ];
E: 73 78 [weight=4, ];
E: 74 76 [weight=1, ];
E: 74 77 [weight=1, ];
E: 74 78 [weight=3, ];
E: 75 77 [weight=2, ];
E: 75 78 [weight=4, ];
E: 76 77 [weight=2, ];
E: 76 78 [weight=4, ];
