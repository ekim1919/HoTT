N: 7 "fun01_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 4 "hasequivs_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 2 "hasmorext_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 15 "is01cat_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 9 "is0functor_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 11 "is0gpd_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 13 "is1cat_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 12 "is1cat_strong_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 8 "is1functor_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 5 "is1nat_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 14 "is2graph_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 3 "isequivs_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 16 "isgraph_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 1 "natequiv_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 17 "op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 10 "op0gpd_fun" [body=yes, kind=cnst, prop=no, path="Opposite", ];
N: 6 "transformation_op" [body=yes, kind=cnst, prop=no, path="Opposite", ];
E: 1 4 [weight=3, ];
E: 1 5 [weight=1, ];
E: 1 9 [weight=4, ];
E: 1 13 [weight=3, ];
E: 1 14 [weight=3, ];
E: 1 15 [weight=3, ];
E: 1 16 [weight=5, ];
E: 1 17 [weight=9, ];
E: 2 13 [weight=2, ];
E: 2 14 [weight=2, ];
E: 2 15 [weight=2, ];
E: 2 16 [weight=4, ];
E: 2 17 [weight=4, ];
E: 3 4 [weight=1, ];
E: 3 13 [weight=1, ];
E: 3 14 [weight=1, ];
E: 3 15 [weight=1, ];
E: 3 16 [weight=1, ];
E: 3 17 [weight=1, ];
E: 4 13 [weight=22, ];
E: 4 14 [weight=14, ];
E: 4 15 [weight=18, ];
E: 4 16 [weight=75, ];
E: 4 17 [weight=77, ];
E: 5 6 [weight=3, ];
E: 5 9 [weight=10, ];
E: 5 13 [weight=5, ];
E: 5 14 [weight=5, ];
E: 5 15 [weight=5, ];
E: 5 16 [weight=11, ];
E: 5 17 [weight=12, ];
E: 6 16 [weight=4, ];
E: 6 17 [weight=16, ];
E: 7 9 [weight=1, ];
E: 7 16 [weight=4, ];
E: 7 17 [weight=4, ];
E: 8 9 [weight=14, ];
E: 8 13 [weight=20, ];
E: 8 14 [weight=12, ];
E: 8 15 [weight=12, ];
E: 8 16 [weight=28, ];
E: 8 17 [weight=16, ];
E: 9 16 [weight=6, ];
E: 9 17 [weight=8, ];
E: 10 16 [weight=4, ];
E: 10 17 [weight=9, ];
E: 11 15 [weight=2, ];
E: 11 16 [weight=6, ];
E: 11 17 [weight=4, ];
E: 12 13 [weight=4, ];
E: 12 14 [weight=2, ];
E: 12 15 [weight=18, ];
E: 12 16 [weight=20, ];
E: 12 17 [weight=20, ];
E: 13 14 [weight=53, ];
E: 13 15 [weight=22, ];
E: 13 16 [weight=122, ];
E: 13 17 [weight=61, ];
E: 14 16 [weight=4, ];
E: 14 17 [weight=4, ];
E: 15 16 [weight=6, ];
E: 15 17 [weight=6, ];
E: 16 17 [weight=4, ];
