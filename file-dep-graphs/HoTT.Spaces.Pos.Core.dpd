N: 57 "Pos_ind" [body=yes, kind=cnst, prop=yes, path="Core", ];
N: 29 "Pos_mask_ind" [body=yes, kind=cnst, prop=yes, path="Core", ];
N: 28 "Pos_mask_rec" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 30 "Pos_mask_rect" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 27 "Pos_mask_sind" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 56 "Pos_rec" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 58 "Pos_rect" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 55 "Pos_sind" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 40 "decpaths_pos" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 39 "ishset_pos" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 13 "nat_pos_size" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 38 "pos_add" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 37 "pos_add_carry" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 15 "pos_div2" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 14 "pos_div2_up" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 18 "pos_iter" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 11 "pos_iter_op" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 25 "pos_mask_double" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 24 "pos_mask_double_pred" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 23 "pos_mask_pred" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 22 "pos_mask_sub" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 21 "pos_mask_sub_carry" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 26 "pos_mask_succ_double" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 19 "pos_mul" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 6 "pos_of_decimal_int" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 10 "pos_of_nat" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 5 "pos_of_number_uint" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 9 "pos_of_succ_nat" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 7 "pos_of_uint" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 8 "pos_of_uint_acc" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 53 "pos_peano_ind" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 52 "pos_peano_ind_beta_1" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 51 "pos_peano_ind_beta_pos_succ" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 50 "pos_peano_rec" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 49 "pos_peano_rec_beta_pos_succ" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 17 "pos_pow" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 35 "pos_pred" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 36 "pos_pred_double" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 12 "pos_size" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 16 "pos_square" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 20 "pos_sub" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 54 "pos_succ" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 2 "pos_to_decimal_int" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 4 "pos_to_little_uint" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 1 "pos_to_number_uint" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 3 "pos_to_uint" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 48 "x0_inj" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 44 "x0_neq_x1" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 46 "x0_neq_xH" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 47 "x1_inj" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 41 "x1_neq_x0" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 45 "x1_neq_xH" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 43 "xH_neq_x0" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 42 "xH_neq_x1" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 62 "Pos" [kind=inductive, prop=no, path="Core", ];
N: 34 "Pos_mask" [kind=inductive, prop=no, path="Core", ];
N: 61 "xH" [kind=construct, prop=no, path="Core", ];
N: 33 "IsNul" [kind=construct, prop=no, path="Core", ];
N: 60 "x0" [kind=construct, prop=no, path="Core", ];
N: 32 "IsPos" [kind=construct, prop=no, path="Core", ];
N: 59 "x1" [kind=construct, prop=no, path="Core", ];
N: 31 "IsNeg" [kind=construct, prop=no, path="Core", ];
E: 1 3 [weight=1, ];
E: 1 62 [weight=2, ];
E: 2 3 [weight=1, ];
E: 2 62 [weight=2, ];
E: 3 4 [weight=1, ];
E: 3 62 [weight=2, ];
E: 4 62 [weight=4, ];
E: 5 6 [weight=1, ];
E: 5 62 [weight=3, ];
E: 6 7 [weight=1, ];
E: 6 62 [weight=3, ];
E: 7 8 [weight=9, ];
E: 7 59 [weight=6, ];
E: 7 60 [weight=10, ];
E: 7 61 [weight=9, ];
E: 7 62 [weight=13, ];
E: 8 19 [weight=10, ];
E: 8 38 [weight=9, ];
E: 8 59 [weight=16, ];
E: 8 60 [weight=30, ];
E: 8 61 [weight=19, ];
E: 8 62 [weight=6, ];
E: 9 54 [weight=1, ];
E: 9 61 [weight=1, ];
E: 9 62 [weight=3, ];
E: 10 54 [weight=1, ];
E: 10 61 [weight=2, ];
E: 10 62 [weight=4, ];
E: 11 62 [weight=4, ];
E: 12 54 [weight=2, ];
E: 12 61 [weight=1, ];
E: 12 62 [weight=7, ];
E: 13 62 [weight=4, ];
E: 14 54 [weight=1, ];
E: 14 61 [weight=1, ];
E: 14 62 [weight=5, ];
E: 15 61 [weight=1, ];
E: 15 62 [weight=5, ];
E: 16 38 [weight=1, ];
E: 16 59 [weight=1, ];
E: 16 60 [weight=3, ];
E: 16 61 [weight=1, ];
E: 16 62 [weight=7, ];
E: 17 18 [weight=1, ];
E: 17 19 [weight=1, ];
E: 17 61 [weight=1, ];
E: 17 62 [weight=5, ];
E: 18 53 [weight=1, ];
E: 18 62 [weight=3, ];
E: 19 38 [weight=1, ];
E: 19 60 [weight=2, ];
E: 19 62 [weight=10, ];
E: 20 22 [weight=1, ];
E: 20 34 [weight=1, ];
E: 20 61 [weight=2, ];
E: 20 62 [weight=6, ];
E: 21 24 [weight=1, ];
E: 21 25 [weight=4, ];
E: 21 26 [weight=4, ];
E: 21 31 [weight=3, ];
E: 21 32 [weight=3, ];
E: 21 33 [weight=1, ];
E: 21 34 [weight=10, ];
E: 21 36 [weight=2, ];
E: 21 60 [weight=1, ];
E: 21 62 [weight=17, ];
E: 22 24 [weight=1, ];
E: 22 25 [weight=4, ];
E: 22 26 [weight=4, ];
E: 22 31 [weight=3, ];
E: 22 32 [weight=3, ];
E: 22 33 [weight=1, ];
E: 22 34 [weight=10, ];
E: 22 36 [weight=2, ];
E: 22 60 [weight=1, ];
E: 22 62 [weight=17, ];
E: 23 31 [weight=2, ];
E: 23 32 [weight=2, ];
E: 23 33 [weight=1, ];
E: 23 34 [weight=6, ];
E: 23 35 [weight=2, ];
E: 23 62 [weight=1, ];
E: 24 32 [weight=2, ];
E: 24 33 [weight=1, ];
E: 24 34 [weight=2, ];
E: 24 36 [weight=1, ];
E: 24 60 [weight=3, ];
E: 24 62 [weight=3, ];
E: 25 31 [weight=1, ];
E: 25 32 [weight=1, ];
E: 25 33 [weight=1, ];
E: 25 34 [weight=5, ];
E: 25 60 [weight=1, ];
E: 26 31 [weight=1, ];
E: 26 32 [weight=2, ];
E: 26 34 [weight=5, ];
E: 26 59 [weight=1, ];
E: 26 61 [weight=1, ];
E: 27 31 [weight=2, ];
E: 27 32 [weight=2, ];
E: 27 33 [weight=2, ];
E: 27 34 [weight=5, ];
E: 27 62 [weight=2, ];
E: 28 30 [weight=1, ];
E: 28 31 [weight=1, ];
E: 28 32 [weight=1, ];
E: 28 33 [weight=1, ];
E: 28 34 [weight=3, ];
E: 28 62 [weight=1, ];
E: 29 31 [weight=2, ];
E: 29 32 [weight=2, ];
E: 29 33 [weight=2, ];
E: 29 34 [weight=5, ];
E: 29 62 [weight=2, ];
E: 30 31 [weight=2, ];
E: 30 32 [weight=2, ];
E: 30 33 [weight=2, ];
E: 30 34 [weight=5, ];
E: 30 62 [weight=2, ];
E: 31 62 [weight=1, ];
E: 32 62 [weight=1, ];
E: 33 62 [weight=1, ];
E: 34 62 [weight=1, ];
E: 35 36 [weight=1, ];
E: 35 60 [weight=1, ];
E: 35 61 [weight=1, ];
E: 35 62 [weight=5, ];
E: 36 59 [weight=2, ];
E: 36 60 [weight=1, ];
E: 36 61 [weight=1, ];
E: 36 62 [weight=7, ];
E: 37 54 [weight=6, ];
E: 37 59 [weight=9, ];
E: 37 60 [weight=9, ];
E: 37 61 [weight=2, ];
E: 37 62 [weight=29, ];
E: 38 54 [weight=6, ];
E: 38 59 [weight=9, ];
E: 38 60 [weight=9, ];
E: 38 61 [weight=2, ];
E: 38 62 [weight=29, ];
E: 39 40 [weight=1, ];
E: 39 62 [weight=3, ];
E: 40 41 [weight=1, ];
E: 40 42 [weight=1, ];
E: 40 43 [weight=1, ];
E: 40 44 [weight=1, ];
E: 40 45 [weight=1, ];
E: 40 46 [weight=1, ];
E: 40 47 [weight=1, ];
E: 40 48 [weight=1, ];
E: 40 58 [weight=4, ];
E: 40 59 [weight=26, ];
E: 40 60 [weight=26, ];
E: 40 61 [weight=16, ];
E: 40 62 [weight=78, ];
E: 41 44 [weight=1, ];
E: 41 59 [weight=6, ];
E: 41 60 [weight=6, ];
E: 41 62 [weight=12, ];
E: 42 45 [weight=1, ];
E: 42 59 [weight=6, ];
E: 42 61 [weight=6, ];
E: 42 62 [weight=10, ];
E: 43 46 [weight=1, ];
E: 43 60 [weight=6, ];
E: 43 61 [weight=6, ];
E: 43 62 [weight=10, ];
E: 44 59 [weight=3, ];
E: 44 60 [weight=3, ];
E: 44 62 [weight=11, ];
E: 45 59 [weight=3, ];
E: 45 61 [weight=3, ];
E: 45 62 [weight=9, ];
E: 46 60 [weight=3, ];
E: 46 61 [weight=3, ];
E: 46 62 [weight=9, ];
E: 47 59 [weight=6, ];
E: 47 62 [weight=13, ];
E: 48 60 [weight=6, ];
E: 48 62 [weight=13, ];
E: 49 50 [weight=2, ];
E: 49 51 [weight=1, ];
E: 49 54 [weight=1, ];
E: 49 62 [weight=5, ];
E: 50 53 [weight=1, ];
E: 50 62 [weight=3, ];
E: 51 53 [weight=10, ];
E: 51 54 [weight=19, ];
E: 51 58 [weight=1, ];
E: 51 60 [weight=7, ];
E: 51 61 [weight=12, ];
E: 51 62 [weight=23, ];
E: 52 53 [weight=2, ];
E: 52 54 [weight=2, ];
E: 52 61 [weight=6, ];
E: 52 62 [weight=4, ];
E: 53 54 [weight=4, ];
E: 53 60 [weight=6, ];
E: 53 61 [weight=4, ];
E: 53 62 [weight=14, ];
E: 54 59 [weight=1, ];
E: 54 60 [weight=2, ];
E: 54 61 [weight=1, ];
E: 54 62 [weight=7, ];
E: 55 59 [weight=2, ];
E: 55 60 [weight=2, ];
E: 55 61 [weight=2, ];
E: 55 62 [weight=10, ];
E: 56 58 [weight=1, ];
E: 56 59 [weight=1, ];
E: 56 60 [weight=1, ];
E: 56 61 [weight=1, ];
E: 56 62 [weight=5, ];
E: 57 59 [weight=2, ];
E: 57 60 [weight=2, ];
E: 57 61 [weight=2, ];
E: 57 62 [weight=10, ];
E: 58 59 [weight=2, ];
E: 58 60 [weight=2, ];
E: 58 61 [weight=2, ];
E: 58 62 [weight=10, ];
