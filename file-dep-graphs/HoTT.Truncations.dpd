N: 17 "BuildIsSurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 10 "O_eq_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 9 "O_leq_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 13 "O_leq_Tr_leq" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 7 "O_lex_leq_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 8 "O_strong_leq_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 40 "Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 35 "Trunc_functor" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 31 "Trunc_functor_compose" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 32 "Trunc_functor_equiv" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 30 "Trunc_functor_idmap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 33 "Trunc_functor_isequiv" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 1 "Trunc_ind" [body=yes, kind=cnst, prop=no, path="Core.Trunc", ];
N: 12 "Trunc_min" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 41 "Trunc_rec" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 11 "Trunc_swap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 42 "cancelR_issurjection" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 60 "conn_point_elim" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 61 "conn_point_incl" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 62 "conn_pointed_type" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 18 "contr_inhab_prop" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 28 "equiv_Trunc_prod_cmp" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 52 "equiv_component_image_unit" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 15 "equiv_merely_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 5 "equiv_path_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 37 "equiv_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 21 "hexists" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 19 "himage" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 20 "hor" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 16 "iff_merely_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 26 "inO_tr_istrunc" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 51 "indecomposable_0connected" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 53 "is0connected_component" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 54 "is0connected_merely_allpath" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 34 "is0functor_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 27 "is1functor_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 49 "isconn_wedge_incl" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 63 "isconnected_paths" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 59 "isconnected_pred" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 57 "isconnected_pred_add" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 50 "isconnected_trunc" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 56 "isconnmap_pred_add" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 29 "isequiv_Trunc_functor" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 14 "isequiv_surj_emb" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 38 "isequiv_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 43 "issurj_retr" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 64 "istrunc_extension_along_conn" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 25 "istrunc_inO_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 2 "istrunc_truncation" [body=no, kind=cnst, prop=no, path="Core.Trunc", ];
N: 23 "istruncmap_mapinO_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 24 "mapinO_tr_istruncmap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 22 "merely" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 58 "merely_isconnected" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 55 "merely_path_is0connected" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 6 "path_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 39 "trunc_iff_isequiv_truncation" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 36 "untrunc_istrunc" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 47 "wedge_incl_comp1" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 46 "wedge_incl_comp2" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 45 "wedge_incl_comp3" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 48 "wedge_incl_elim" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 44 "wedge_incl_elim_uncurried" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 4 "Trunc" [kind=inductive, prop=no, path="Core.Trunc", ];
N: 3 "tr" [kind=construct, prop=no, path="Core.Trunc", ];
E: 1 3 [weight=2, ];
E: 1 4 [weight=9, ];
E: 2 4 [weight=1, ];
E: 5 3 [weight=2, ];
E: 5 7 [weight=1, ];
E: 5 8 [weight=1, ];
E: 5 10 [weight=1, ];
E: 5 40 [weight=4, ];
E: 6 3 [weight=2, ];
E: 6 10 [weight=1, ];
E: 6 40 [weight=4, ];
E: 7 8 [weight=3, ];
E: 7 25 [weight=6, ];
E: 7 40 [weight=20, ];
E: 7 41 [weight=4, ];
E: 8 9 [weight=1, ];
E: 8 40 [weight=6, ];
E: 9 25 [weight=1, ];
E: 9 26 [weight=1, ];
E: 9 40 [weight=5, ];
E: 10 25 [weight=2, ];
E: 10 26 [weight=2, ];
E: 10 40 [weight=11, ];
E: 11 12 [weight=2, ];
E: 11 40 [weight=17, ];
E: 12 2 [weight=1, ];
E: 12 3 [weight=3, ];
E: 12 4 [weight=4, ];
E: 12 13 [weight=1, ];
E: 12 35 [weight=1, ];
E: 12 37 [weight=1, ];
E: 12 40 [weight=20, ];
E: 13 40 [weight=4, ];
E: 14 40 [weight=3, ];
E: 15 2 [weight=1, ];
E: 15 16 [weight=1, ];
E: 15 22 [weight=3, ];
E: 15 40 [weight=3, ];
E: 16 2 [weight=1, ];
E: 16 22 [weight=4, ];
E: 16 40 [weight=7, ];
E: 17 2 [weight=1, ];
E: 17 22 [weight=2, ];
E: 17 40 [weight=3, ];
E: 18 2 [weight=1, ];
E: 18 22 [weight=3, ];
E: 18 26 [weight=1, ];
E: 18 40 [weight=1, ];
E: 19 40 [weight=3, ];
E: 20 22 [weight=1, ];
E: 21 22 [weight=1, ];
E: 22 2 [weight=1, ];
E: 22 40 [weight=1, ];
E: 23 40 [weight=2, ];
E: 24 40 [weight=1, ];
E: 25 40 [weight=2, ];
E: 26 40 [weight=1, ];
E: 27 30 [weight=1, ];
E: 27 31 [weight=1, ];
E: 27 34 [weight=2, ];
E: 27 40 [weight=3, ];
E: 28 40 [weight=4, ];
E: 29 35 [weight=1, ];
E: 29 40 [weight=3, ];
E: 30 35 [weight=1, ];
E: 30 40 [weight=5, ];
E: 31 35 [weight=3, ];
E: 31 40 [weight=9, ];
E: 32 40 [weight=3, ];
E: 33 35 [weight=1, ];
E: 33 40 [weight=3, ];
E: 34 35 [weight=1, ];
E: 34 40 [weight=2, ];
E: 35 40 [weight=3, ];
E: 36 38 [weight=1, ];
E: 36 40 [weight=1, ];
E: 37 3 [weight=1, ];
E: 37 4 [weight=1, ];
E: 37 38 [weight=1, ];
E: 37 40 [weight=1, ];
E: 38 3 [weight=1, ];
E: 38 4 [weight=1, ];
E: 38 39 [weight=1, ];
E: 39 3 [weight=1, ];
E: 39 4 [weight=1, ];
E: 39 40 [weight=1, ];
E: 40 1 [weight=1, ];
E: 40 2 [weight=1, ];
E: 40 3 [weight=4, ];
E: 40 4 [weight=6, ];
E: 41 1 [weight=1, ];
E: 41 4 [weight=3, ];
E: 42 2 [weight=1, ];
E: 42 35 [weight=1, ];
E: 42 40 [weight=6, ];
E: 43 2 [weight=1, ];
E: 43 3 [weight=1, ];
E: 43 40 [weight=3, ];
E: 44 40 [weight=4, ];
E: 44 48 [weight=1, ];
E: 45 40 [weight=4, ];
E: 45 46 [weight=1, ];
E: 45 47 [weight=1, ];
E: 45 48 [weight=2, ];
E: 45 49 [weight=1, ];
E: 46 40 [weight=4, ];
E: 46 48 [weight=1, ];
E: 46 49 [weight=1, ];
E: 47 40 [weight=4, ];
E: 47 48 [weight=1, ];
E: 47 49 [weight=1, ];
E: 48 40 [weight=4, ];
E: 48 49 [weight=1, ];
E: 49 40 [weight=5, ];
E: 49 61 [weight=2, ];
E: 49 64 [weight=1, ];
E: 50 11 [weight=1, ];
E: 50 40 [weight=19, ];
E: 51 1 [weight=5, ];
E: 51 4 [weight=10, ];
E: 51 22 [weight=4, ];
E: 51 40 [weight=5, ];
E: 51 41 [weight=2, ];
E: 51 55 [weight=2, ];
E: 51 59 [weight=1, ];
E: 52 22 [weight=3, ];
E: 52 32 [weight=1, ];
E: 52 40 [weight=31, ];
E: 53 1 [weight=2, ];
E: 53 2 [weight=3, ];
E: 53 3 [weight=17, ];
E: 53 4 [weight=4, ];
E: 53 22 [weight=35, ];
E: 53 40 [weight=7, ];
E: 54 1 [weight=3, ];
E: 54 2 [weight=2, ];
E: 54 3 [weight=3, ];
E: 54 4 [weight=5, ];
E: 54 5 [weight=1, ];
E: 54 22 [weight=4, ];
E: 54 40 [weight=13, ];
E: 55 22 [weight=1, ];
E: 55 40 [weight=3, ];
E: 55 63 [weight=1, ];
E: 56 40 [weight=5, ];
E: 56 57 [weight=1, ];
E: 57 40 [weight=9, ];
E: 57 59 [weight=1, ];
E: 58 22 [weight=4, ];
E: 58 40 [weight=6, ];
E: 58 59 [weight=1, ];
E: 59 25 [weight=1, ];
E: 59 26 [weight=1, ];
E: 59 40 [weight=6, ];
E: 60 1 [weight=1, ];
E: 60 4 [weight=2, ];
E: 60 40 [weight=5, ];
E: 60 63 [weight=1, ];
E: 61 7 [weight=1, ];
E: 61 8 [weight=1, ];
E: 61 40 [weight=8, ];
E: 62 9 [weight=1, ];
E: 62 10 [weight=1, ];
E: 62 40 [weight=8, ];
E: 63 3 [weight=6, ];
E: 63 5 [weight=1, ];
E: 63 40 [weight=9, ];
E: 64 26 [weight=2, ];
E: 64 40 [weight=5, ];
