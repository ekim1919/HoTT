N: 9 "cancelL_equiv" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 10 "cancelL_isequiv" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 11 "cancelR_equiv" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 12 "cancelR_isequiv" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 6 "contr_basedhomotopy" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 5 "contr_basedhomotopy'" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 36 "contr_equiv" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 35 "contr_equiv'" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 47 "equiv_adjointify" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 22 "equiv_ap" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 21 "equiv_ap'" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 14 "equiv_ap_inv" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 13 "equiv_ap_inv'" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 58 "equiv_compose" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 57 "equiv_compose'" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 1 "equiv_composeR'" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 33 "equiv_contr_contr" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 53 "equiv_homotopic" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 62 "equiv_idmap" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 4 "equiv_ind" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 3 "equiv_ind_comp" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 20 "equiv_inj" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 18 "equiv_inverse" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 16 "equiv_inverse_compose" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 15 "equiv_inverse_homotopy" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 45 "equiv_involution" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 2 "equiv_path_ind" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 26 "equiv_postcompose" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 25 "equiv_postcompose'" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 31 "equiv_pr1" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 29 "equiv_precompose" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 28 "equiv_precompose'" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 50 "equiv_transport" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 56 "iff_equiv" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 49 "is_adjoint'" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 48 "isequiv_adjointify" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 23 "isequiv_ap" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 8 "isequiv_commsq" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 7 "isequiv_commsq'" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 60 "isequiv_compose" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 59 "isequiv_compose'" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 34 "isequiv_contr_contr" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 54 "isequiv_homotopic" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 52 "isequiv_homotopic'" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 63 "isequiv_idmap" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 19 "isequiv_inverse" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 46 "isequiv_involution" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 24 "isequiv_isequiv_precompose" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 27 "isequiv_postcompose" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 32 "isequiv_pr1" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 30 "isequiv_precompose" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 51 "isequiv_transport" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 42 "moveL_equiv_M" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 41 "moveL_equiv_M'" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 38 "moveL_equiv_V" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 37 "moveL_equiv_V'" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 44 "moveR_equiv_M" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 43 "moveR_equiv_M'" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 40 "moveR_equiv_V" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 39 "moveR_equiv_V'" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 61 "reflexive_equiv" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 17 "symmetric_equiv" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
N: 55 "transitive_equiv" [body=yes, kind=cnst, prop=no, path="Equivalences", ];
E: 1 57 [weight=1, ];
E: 2 4 [weight=1, ];
E: 3 4 [weight=2, ];
E: 5 35 [weight=1, ];
E: 5 47 [weight=1, ];
E: 6 35 [weight=1, ];
E: 6 47 [weight=1, ];
E: 7 10 [weight=1, ];
E: 7 54 [weight=1, ];
E: 7 60 [weight=1, ];
E: 8 12 [weight=1, ];
E: 8 54 [weight=1, ];
E: 8 60 [weight=1, ];
E: 9 10 [weight=1, ];
E: 10 19 [weight=1, ];
E: 10 54 [weight=1, ];
E: 10 60 [weight=1, ];
E: 11 12 [weight=1, ];
E: 12 19 [weight=1, ];
E: 12 54 [weight=1, ];
E: 12 60 [weight=1, ];
E: 13 18 [weight=4, ];
E: 13 21 [weight=1, ];
E: 14 18 [weight=1, ];
E: 14 19 [weight=1, ];
E: 14 22 [weight=1, ];
E: 16 18 [weight=6, ];
E: 16 57 [weight=5, ];
E: 17 18 [weight=1, ];
E: 18 19 [weight=1, ];
E: 19 20 [weight=1, ];
E: 19 23 [weight=1, ];
E: 20 23 [weight=1, ];
E: 21 22 [weight=1, ];
E: 22 23 [weight=1, ];
E: 23 48 [weight=1, ];
E: 24 48 [weight=1, ];
E: 25 27 [weight=1, ];
E: 26 27 [weight=1, ];
E: 27 48 [weight=1, ];
E: 28 30 [weight=1, ];
E: 29 30 [weight=1, ];
E: 30 48 [weight=1, ];
E: 31 32 [weight=1, ];
E: 33 47 [weight=1, ];
E: 35 36 [weight=1, ];
E: 36 44 [weight=1, ];
E: 37 38 [weight=1, ];
E: 39 40 [weight=1, ];
E: 41 42 [weight=1, ];
E: 43 44 [weight=1, ];
E: 45 47 [weight=1, ];
E: 46 48 [weight=1, ];
E: 47 48 [weight=1, ];
E: 48 49 [weight=1, ];
E: 50 51 [weight=1, ];
E: 52 54 [weight=1, ];
E: 53 54 [weight=1, ];
E: 55 58 [weight=1, ];
E: 57 58 [weight=1, ];
E: 58 60 [weight=1, ];
E: 59 60 [weight=1, ];
E: 61 62 [weight=1, ];
E: 62 63 [weight=1, ];
