digraph HoTT_Basics {
  graph [ratio=0.5]
  node [style=filled]
Equivalences_moveR_equiv_V [label="moveR_equiv_V", URL=<Equivalences.html#moveR_equiv_V>, fillcolor="#F070D1"] ;
Basics_Hexadecimal_Little_succ_double [label="succ_double", URL=<Basics.html#Hexadecimal.Little.succ_double>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_moveL_equiv_M_ [label="moveL_equiv_M'", URL=<Equivalences.html#moveL_equiv_M'>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_moveL_equiv_M [label="moveL_equiv_M", URL=<Equivalences.html#moveL_equiv_M>, fillcolor="#F070D1"] ;
Basics_Hexadecimal_Little_double [label="double", URL=<Basics.html#Hexadecimal.Little.double>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Hexadecimal_Little_succ [label="succ", URL=<Basics.html#Hexadecimal.Little.succ>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_moveR_equiv_M_ [label="moveR_equiv_M'", URL=<Equivalences.html#moveR_equiv_M'>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_Little_succ_double [label="succ_double", URL=<Basics.html#Decimal.Little.succ_double>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_moveR_equiv_M [label="moveR_equiv_M", URL=<Equivalences.html#moveR_equiv_M>, fillcolor="#F070D1"] ;
Equivalences_equiv_involution [label="equiv_involution", URL=<Equivalences.html#equiv_involution>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_Little_double [label="double", URL=<Basics.html#Decimal.Little.double>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_Little_succ [label="succ", URL=<Basics.html#Decimal.Little.succ>, fillcolor="#F070D1"] ;
Equivalences_isequiv_involution [label="isequiv_involution", URL=<Equivalences.html#isequiv_involution>, peripheries=3, fillcolor="#F070D1"] ;
UniverseLevel_lower__equiv [label="lower'_equiv", URL=<UniverseLevel.html#lower'_equiv>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_equiv_adjointify [label="equiv_adjointify", URL=<Equivalences.html#equiv_adjointify>, fillcolor="#F070D1"] ;
UniverseLevel_lower__isequiv [label="lower'_isequiv", URL=<UniverseLevel.html#lower'_isequiv>, fillcolor="#F070D1"] ;
Equivalences_isequiv_adjointify [label="isequiv_adjointify", URL=<Equivalences.html#isequiv_adjointify>, fillcolor="#F070D1"] ;
UniverseLevel_lift__isequiv [label="lift'_isequiv", URL=<UniverseLevel.html#lift'_isequiv>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_is_adjoint_ [label="is_adjoint'", URL=<Equivalences.html#is_adjoint'>, fillcolor="#F070D1"] ;
UniverseLevel_isequiv_lift_2 [label="isequiv_lift'2", URL=<UniverseLevel.html#isequiv_lift'2>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_equiv_transport [label="equiv_transport", URL=<Equivalences.html#equiv_transport>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_isequiv_transport [label="isequiv_transport", URL=<Equivalences.html#isequiv_transport>, fillcolor="#F070D1"] ;
UniverseLevel_isequiv_lift_ [label="isequiv_lift'", URL=<UniverseLevel.html#isequiv_lift'>, peripheries=3, fillcolor="#F070D1"] ;
UniverseLevel_lower_2 [label="lower'2", URL=<UniverseLevel.html#lower'2>, fillcolor="#F070D1"] ;
Equivalences_isequiv_homotopic_ [label="isequiv_homotopic'", URL=<Equivalences.html#isequiv_homotopic'>, peripheries=3, fillcolor="#F070D1"] ;
UniverseLevel_lift_2 [label="lift'2", URL=<UniverseLevel.html#lift'2>, fillcolor="#F070D1"] ;
Equivalences_equiv_homotopic [label="equiv_homotopic", URL=<Equivalences.html#equiv_homotopic>, peripheries=3, fillcolor="#F070D1"] ;
UniverseLevel_lower_ [label="lower'", URL=<UniverseLevel.html#lower'>, fillcolor="#F070D1"] ;
Equivalences_isequiv_homotopic [label="isequiv_homotopic", URL=<Equivalences.html#isequiv_homotopic>, fillcolor="#F070D1"] ;
Equivalences_transitive_equiv [label="transitive_equiv", URL=<Equivalences.html#transitive_equiv>, peripheries=3, fillcolor="#F070D1"] ;
UniverseLevel_lift_ [label="lift'", URL=<UniverseLevel.html#lift'>, fillcolor="#F070D1"] ;
Equivalences_iff_equiv [label="iff_equiv", URL=<Equivalences.html#iff_equiv>, peripheries=3, fillcolor="#F070D1"] ;
UniverseLevel_Lift_ [label="Lift'", URL=<UniverseLevel.html#Lift'>, fillcolor="#F070D1"] ;
UniverseLevel_lower_equiv [label="lower_equiv", URL=<UniverseLevel.html#lower_equiv>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_equiv_compose_ [label="equiv_compose'", URL=<Equivalences.html#equiv_compose'>, fillcolor="#F070D1"] ;
UniverseLevel_lower_isequiv [label="lower_isequiv", URL=<UniverseLevel.html#lower_isequiv>, fillcolor="#F070D1"] ;
Equivalences_equiv_compose [label="equiv_compose", URL=<Equivalences.html#equiv_compose>, fillcolor="#F070D1"] ;
UniverseLevel_lift_isequiv [label="lift_isequiv", URL=<UniverseLevel.html#lift_isequiv>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_isequiv_compose_ [label="isequiv_compose'", URL=<Equivalences.html#isequiv_compose'>, peripheries=3, fillcolor="#F070D1"] ;
UniverseLevel_isequiv_lift2 [label="isequiv_lift2", URL=<UniverseLevel.html#isequiv_lift2>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_isequiv_compose [label="isequiv_compose", URL=<Equivalences.html#isequiv_compose>, fillcolor="#F070D1"] ;
Equivalences_reflexive_equiv [label="reflexive_equiv", URL=<Equivalences.html#reflexive_equiv>, peripheries=3, fillcolor="#F070D1"] ;
UniverseLevel_isequiv_lift [label="isequiv_lift", URL=<UniverseLevel.html#isequiv_lift>, peripheries=3, fillcolor="#F070D1"] ;
UniverseLevel_lower2 [label="lower2", URL=<UniverseLevel.html#lower2>, fillcolor="#F070D1"] ;
Equivalences_equiv_idmap [label="equiv_idmap", URL=<Equivalences.html#equiv_idmap>, fillcolor="#F070D1"] ;
UniverseLevel_lift2 [label="lift2", URL=<UniverseLevel.html#lift2>, fillcolor="#F070D1"] ;
Equivalences_isequiv_idmap [label="isequiv_idmap", URL=<Equivalences.html#isequiv_idmap>, fillcolor="#F070D1"] ;
UniverseLevel_lower [label="lower", URL=<UniverseLevel.html#lower>, fillcolor="#F070D1"] ;
Basics_Decimal_int_of_int [label="int_of_int", URL=<Basics.html#Decimal.int_of_int>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_uint_of_uint [label="uint_of_uint", URL=<Basics.html#Decimal.uint_of_uint>, peripheries=3, fillcolor="#F070D1"] ;
UniverseLevel_lift [label="lift", URL=<UniverseLevel.html#lift>, fillcolor="#F070D1"] ;
Basics_Decimal_nztail_int [label="nztail_int", URL=<Basics.html#Decimal.nztail_int>, peripheries=3, fillcolor="#F070D1"] ;
UniverseLevel_Lift [label="Lift", URL=<UniverseLevel.html#Lift>, fillcolor="#F070D1"] ;
Basics_Decimal_nztail [label="nztail", URL=<Basics.html#Decimal.nztail>, fillcolor="#F070D1"] ;
Trunc_ishprop_istruncmap [label="ishprop_istruncmap", URL=<Trunc.html#ishprop_istruncmap>, peripheries=3, fillcolor="#F070D1"] ;
Trunc_ishprop_istrunc [label="ishprop_istrunc", URL=<Trunc.html#ishprop_istrunc>, fillcolor="#F070D1"] ;
Basics_Decimal_app_int [label="app_int", URL=<Basics.html#Decimal.app_int>, peripheries=3, fillcolor="#F070D1"] ;
Trunc_equiv_contr_hprop [label="equiv_contr_hprop", URL=<Trunc.html#equiv_contr_hprop>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_app [label="app", URL=<Basics.html#Decimal.app>, fillcolor="#F070D1"] ;
Basics_Decimal_rev [label="rev", URL=<Basics.html#Decimal.rev>, fillcolor="#F070D1"] ;
Trunc_iff_contr_hprop [label="iff_contr_hprop", URL=<Trunc.html#iff_contr_hprop>, fillcolor="#F070D1"] ;
Basics_Decimal_revapp [label="revapp", URL=<Basics.html#Decimal.revapp>, fillcolor="#F070D1"] ;
Trunc_equiv_iff_hprop [label="equiv_iff_hprop", URL=<Trunc.html#equiv_iff_hprop>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_opp [label="opp", URL=<Basics.html#Decimal.opp>, peripheries=3, fillcolor="#F070D1"] ;
Trunc_equiv_iff_hprop_uncurried [label="equiv_iff_hprop_uncurried", URL=<Trunc.html#equiv_iff_hprop_uncurried>, fillcolor="#F070D1"] ;
Basics_Decimal_norm [label="norm", URL=<Basics.html#Decimal.norm>, fillcolor="#F070D1"] ;
Trunc_isequiv_iff_hprop [label="isequiv_iff_hprop", URL=<Trunc.html#isequiv_iff_hprop>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_unorm [label="unorm", URL=<Basics.html#Decimal.unorm>, fillcolor="#F070D1"] ;
Trunc_hprop_allpath [label="hprop_allpath", URL=<Trunc.html#hprop_allpath>, fillcolor="#F070D1"] ;
Trunc_path_ishprop [label="path_ishprop", URL=<Trunc.html#path_ishprop>, fillcolor="#F070D1"] ;
Basics_Decimal_nzhead [label="nzhead", URL=<Basics.html#Decimal.nzhead>, fillcolor="#F070D1"] ;
Basics_Decimal_nb_digits [label="nb_digits", URL=<Basics.html#Decimal.nb_digits>, peripheries=3, fillcolor="#F070D1"] ;
Trunc_hprop_inhabited_contr [label="hprop_inhabited_contr", URL=<Trunc.html#hprop_inhabited_contr>, fillcolor="#F070D1"] ;
Decimal_decimal_sind [label="decimal_sind", URL=<Decimal.html#decimal_sind>, peripheries=3, fillcolor="#F070D1"] ;
Trunc_contr_inhabited_hprop [label="contr_inhabited_hprop", URL=<Trunc.html#contr_inhabited_hprop>, fillcolor="#F070D1"] ;
Trunc_default_TruncType [label="default_TruncType", URL=<Trunc.html#default_TruncType>, peripheries=3, fillcolor="#F070D1"] ;
Decimal_decimal_rec [label="decimal_rec", URL=<Decimal.html#decimal_rec>, peripheries=3, fillcolor="#F070D1"] ;
Trunc_trunctype_istrunc [label="trunctype_istrunc", URL=<Trunc.html#trunctype_istrunc>, peripheries=3, fillcolor="#F070D1"] ;
Decimal_decimal_ind [label="decimal_ind", URL=<Decimal.html#decimal_ind>, peripheries=3, fillcolor="#7FFFD4"] ;
Trunc_trunctype_type [label="trunctype_type", URL=<Trunc.html#trunctype_type>, peripheries=3, fillcolor="#F070D1"] ;
Decimal_decimal_rect [label="decimal_rect", URL=<Decimal.html#decimal_rect>, fillcolor="#F070D1"] ;
Basics_Decimal_DecimalExp [label="DecimalExp", URL=<Basics.html#Decimal.DecimalExp>, fillcolor="#7FAAFF"] ;
Trunc_TruncType_sind [label="TruncType_sind", URL=<Trunc.html#TruncType_sind>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_Decimal [label="Decimal", URL=<Basics.html#Decimal.Decimal>, fillcolor="#7FAAFF"] ;
Trunc_TruncType_rec [label="TruncType_rec", URL=<Trunc.html#TruncType_rec>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_decimal [label="decimal", URL=<Basics.html#Decimal.decimal>, fillcolor="#E2CDFA"] ;
Trunc_TruncType_ind [label="TruncType_ind", URL=<Trunc.html#TruncType_ind>, peripheries=3, fillcolor="#7FFFD4"] ;
Decimal_int_sind [label="int_sind", URL=<Decimal.html#int_sind>, peripheries=3, fillcolor="#F070D1"] ;
Trunc_TruncType_rect [label="TruncType_rect", URL=<Trunc.html#TruncType_rect>, fillcolor="#F070D1"] ;
Trunc_Build_TruncType [label="Build_TruncType", URL=<Trunc.html#Build_TruncType>, fillcolor="#7FAAFF"] ;
Decimal_int_rec [label="int_rec", URL=<Decimal.html#int_rec>, peripheries=3, fillcolor="#F070D1"] ;
Trunc_TruncType [label="TruncType", URL=<Trunc.html#TruncType>, fillcolor="#E2CDFA"] ;
Decimal_int_ind [label="int_ind", URL=<Decimal.html#int_ind>, peripheries=3, fillcolor="#7FFFD4"] ;
Trunc_istruncmap_fiber [label="istruncmap_fiber", URL=<Trunc.html#istruncmap_fiber>, peripheries=3, fillcolor="#F070D1"] ;
Decimal_int_rect [label="int_rect", URL=<Decimal.html#int_rect>, fillcolor="#F070D1"] ;
Basics_Decimal_Neg [label="Neg", URL=<Basics.html#Decimal.Neg>, fillcolor="#7FAAFF"] ;
Trunc_IsTruncMap [label="IsTruncMap", URL=<Trunc.html#IsTruncMap>, fillcolor="#F070D1"] ;
Basics_Decimal_Pos [label="Pos", URL=<Basics.html#Decimal.Pos>, fillcolor="#7FAAFF"] ;
Trunc_istrunc_equiv_istrunc [label="istrunc_equiv_istrunc", URL=<Trunc.html#istrunc_equiv_istrunc>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_int [label="int", URL=<Basics.html#Decimal.int>, fillcolor="#E2CDFA"] ;
Trunc_istrunc_isequiv_istrunc [label="istrunc_isequiv_istrunc", URL=<Trunc.html#istrunc_isequiv_istrunc>, fillcolor="#F070D1"] ;
Basics_Decimal_uint_sind [label="uint_sind", URL=<Basics.html#Decimal.uint_sind>, peripheries=3, fillcolor="#F070D1"] ;
Trunc_istrunc_hset [label="istrunc_hset", URL=<Trunc.html#istrunc_hset>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_uint_rec [label="uint_rec", URL=<Basics.html#Decimal.uint_rec>, peripheries=3, fillcolor="#F070D1"] ;
Trunc_istrunc_hprop [label="istrunc_hprop", URL=<Trunc.html#istrunc_hprop>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_uint_ind [label="uint_ind", URL=<Basics.html#Decimal.uint_ind>, peripheries=3, fillcolor="#7FFFD4"] ;
Trunc_istrunc_contr [label="istrunc_contr", URL=<Trunc.html#istrunc_contr>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_uint_rect [label="uint_rect", URL=<Basics.html#Decimal.uint_rect>, fillcolor="#F070D1"] ;
Trunc_istrunc_leq [label="istrunc_leq", URL=<Trunc.html#istrunc_leq>, fillcolor="#F070D1"] ;
Basics_Decimal_D9 [label="D9", URL=<Basics.html#Decimal.D9>, fillcolor="#7FAAFF"] ;
Trunc_istrunc_succ [label="istrunc_succ", URL=<Trunc.html#istrunc_succ>, fillcolor="#F070D1"] ;
Basics_Decimal_D8 [label="D8", URL=<Basics.html#Decimal.D8>, fillcolor="#7FAAFF"] ;
Trunc_contr_istrunc_minus_two [label="contr_istrunc_minus_two", URL=<Trunc.html#contr_istrunc_minus_two>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_D7 [label="D7", URL=<Basics.html#Decimal.D7>, fillcolor="#7FAAFF"] ;
Trunc_trunc_index_min_leq_right [label="trunc_index_min_leq_right", URL=<Trunc.html#trunc_index_min_leq_right>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_D6 [label="D6", URL=<Basics.html#Decimal.D6>, fillcolor="#7FAAFF"] ;
Trunc_trunc_index_min_leq_left [label="trunc_index_min_leq_left", URL=<Trunc.html#trunc_index_min_leq_left>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_D5 [label="D5", URL=<Basics.html#Decimal.D5>, fillcolor="#7FAAFF"] ;
Trunc_trunc_index_min_path [label="trunc_index_min_path", URL=<Trunc.html#trunc_index_min_path>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_D4 [label="D4", URL=<Basics.html#Decimal.D4>, fillcolor="#7FAAFF"] ;
Trunc_trunc_index_min_swap [label="trunc_index_min_swap", URL=<Trunc.html#trunc_index_min_swap>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_D3 [label="D3", URL=<Basics.html#Decimal.D3>, fillcolor="#7FAAFF"] ;
Trunc_trunc_index_min_minus_two [label="trunc_index_min_minus_two", URL=<Trunc.html#trunc_index_min_minus_two>, fillcolor="#F070D1"] ;
Basics_Decimal_D2 [label="D2", URL=<Basics.html#Decimal.D2>, fillcolor="#7FAAFF"] ;
Trunc_trunc_index_min [label="trunc_index_min", URL=<Trunc.html#trunc_index_min>, fillcolor="#F070D1"] ;
Basics_Decimal_D1 [label="D1", URL=<Basics.html#Decimal.D1>, fillcolor="#7FAAFF"] ;
Trunc_trunc_index_leq_transitive [label="trunc_index_leq_transitive", URL=<Trunc.html#trunc_index_leq_transitive>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_D0 [label="D0", URL=<Basics.html#Decimal.D0>, fillcolor="#7FAAFF"] ;
Trunc_trunc_index_leq_refl [label="trunc_index_leq_refl", URL=<Trunc.html#trunc_index_leq_refl>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_Nil [label="Nil", URL=<Basics.html#Decimal.Nil>, fillcolor="#7FAAFF"] ;
Trunc_trunc_index_leq_succ_ [label="trunc_index_leq_succ'", URL=<Trunc.html#trunc_index_leq_succ'>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Decimal_uint [label="uint", URL=<Basics.html#Decimal.uint>, fillcolor="#E2CDFA"] ;
Trunc_trunc_index_leq_minus_two [label="trunc_index_leq_minus_two", URL=<Trunc.html#trunc_index_leq_minus_two>, fillcolor="#F070D1"] ;
Trunc_trunc_index_pred [label="trunc_index_pred", URL=<Trunc.html#trunc_index_pred>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_ishprop_decpaths [label="ishprop_decpaths", URL=<Decidable.html#ishprop_decpaths>, peripheries=3, fillcolor="#F070D1"] ;
Trunc_trunc_index_leq_succ [label="trunc_index_leq_succ", URL=<Trunc.html#trunc_index_leq_succ>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_hset_decpaths [label="hset_decpaths", URL=<Decidable.html#hset_decpaths>, peripheries=3, fillcolor="#F070D1"] ;
Trunc_trunc_index_leq_minus_two_n [label="trunc_index_leq_minus_two_n", URL=<Trunc.html#trunc_index_leq_minus_two_n>, fillcolor="#F070D1"] ;
Decidable_pathcoll_hset [label="pathcoll_hset", URL=<Decidable.html#pathcoll_hset>, peripheries=3, fillcolor="#F070D1"] ;
Trunc_trunc_index_leq [label="trunc_index_leq", URL=<Trunc.html#trunc_index_leq>, fillcolor="#F070D1"] ;
Decidable_collapsible_hprop [label="collapsible_hprop", URL=<Decidable.html#collapsible_hprop>, fillcolor="#F070D1"] ;
Trunc_trunc_index_add_succ [label="trunc_index_add_succ", URL=<Trunc.html#trunc_index_add_succ>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_hset_pathcoll [label="hset_pathcoll", URL=<Decidable.html#hset_pathcoll>, fillcolor="#F070D1"] ;
Trunc_trunc_index_add_minus_two [label="trunc_index_add_minus_two", URL=<Trunc.html#trunc_index_add_minus_two>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_pathcoll_decpaths [label="pathcoll_decpaths", URL=<Decidable.html#pathcoll_decpaths>, fillcolor="#F070D1"] ;
Trunc_trunc_index_add [label="trunc_index_add", URL=<Trunc.html#trunc_index_add>, fillcolor="#F070D1"] ;
Decidable_collapsible_decidable [label="collapsible_decidable", URL=<Decidable.html#collapsible_decidable>, fillcolor="#F070D1"] ;
Trunc_trunc_index_to_num_int [label="trunc_index_to_num_int", URL=<Trunc.html#trunc_index_to_num_int>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_path_coll [label="path_coll", URL=<Decidable.html#path_coll>, fillcolor="#F070D1"] ;
Trunc_trunc_index_to_int [label="trunc_index_to_int", URL=<Trunc.html#trunc_index_to_int>, fillcolor="#F070D1"] ;
Decidable_PathCollapsible [label="PathCollapsible", URL=<Decidable.html#PathCollapsible>, fillcolor="#F070D1"] ;
Decidable_wconst_collapse [label="wconst_collapse", URL=<Decidable.html#wconst_collapse>, peripheries=3, fillcolor="#F070D1"] ;
Trunc_trunc_index_to_little_uint [label="trunc_index_to_little_uint", URL=<Trunc.html#trunc_index_to_little_uint>, fillcolor="#F070D1"] ;
Trunc_num_int_to_trunc_index [label="num_int_to_trunc_index", URL=<Trunc.html#num_int_to_trunc_index>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_collapse [label="collapse", URL=<Decidable.html#collapse>, fillcolor="#F070D1"] ;
Trunc_int_to_trunc_index [label="int_to_trunc_index", URL=<Trunc.html#int_to_trunc_index>, fillcolor="#F070D1"] ;
Decidable_Collapsible_sind [label="Collapsible_sind", URL=<Decidable.html#Collapsible_sind>, peripheries=3, fillcolor="#F070D1"] ;
Trunc_nat_to_trunc_index [label="nat_to_trunc_index", URL=<Trunc.html#nat_to_trunc_index>, fillcolor="#F070D1"] ;
Decidable_Collapsible_rec [label="Collapsible_rec", URL=<Decidable.html#Collapsible_rec>, peripheries=3, fillcolor="#F070D1"] ;
Trunc_trunc_index_inc_agree [label="trunc_index_inc_agree", URL=<Trunc.html#trunc_index_inc_agree>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_Collapsible_ind [label="Collapsible_ind", URL=<Decidable.html#Collapsible_ind>, peripheries=3, fillcolor="#7FFFD4"] ;
Trunc_trunc_index_inc__succ [label="trunc_index_inc'_succ", URL=<Trunc.html#trunc_index_inc'_succ>, fillcolor="#F070D1"] ;
Decidable_Collapsible_rect [label="Collapsible_rect", URL=<Decidable.html#Collapsible_rect>, fillcolor="#F070D1"] ;
Decidable_Build_Collapsible [label="Build_Collapsible", URL=<Decidable.html#Build_Collapsible>, fillcolor="#7FAAFF"] ;
Trunc_trunc_index_inc_ [label="trunc_index_inc'", URL=<Trunc.html#trunc_index_inc'>, fillcolor="#F070D1"] ;
Decidable_Collapsible [label="Collapsible", URL=<Decidable.html#Collapsible>, fillcolor="#E2CDFA"] ;
Trunc_trunc_index_inc [label="trunc_index_inc", URL=<Trunc.html#trunc_index_inc>, fillcolor="#F070D1"] ;
Decidable_wconst_through_hprop [label="wconst_through_hprop", URL=<Decidable.html#wconst_through_hprop>, peripheries=3, fillcolor="#F070D1"] ;
Tactics_issig_isequiv [label="issig_isequiv", URL=<Tactics.html#issig_isequiv>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_wconst [label="wconst", URL=<Decidable.html#wconst>, fillcolor="#F070D1"] ;
Tactics_issig_equiv [label="issig_equiv", URL=<Tactics.html#issig_equiv>, peripheries=3, fillcolor="#F070D1"] ;
Tactics_issig_contr [label="issig_contr", URL=<Tactics.html#issig_contr>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_WeaklyConstant [label="WeaklyConstant", URL=<Decidable.html#WeaklyConstant>, fillcolor="#F070D1"] ;
Tactics_is_global_axiom_funext [label="is_global_axiom_funext", URL=<Tactics.html#is_global_axiom_funext>, peripheries=3, fillcolor="#7FFFD4"] ;
Decidable_decidablepaths_equiv_ [label="decidablepaths_equiv'", URL=<Decidable.html#decidablepaths_equiv'>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_decidablepaths_equiv [label="decidablepaths_equiv", URL=<Decidable.html#decidablepaths_equiv>, fillcolor="#F070D1"] ;
Tactics_IsGlobalAxiom_sind [label="IsGlobalAxiom_sind", URL=<Tactics.html#IsGlobalAxiom_sind>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_decidable_equiv_ [label="decidable_equiv'", URL=<Decidable.html#decidable_equiv'>, peripheries=3, fillcolor="#F070D1"] ;
Tactics_IsGlobalAxiom_rec [label="IsGlobalAxiom_rec", URL=<Tactics.html#IsGlobalAxiom_rec>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_decidable_equiv [label="decidable_equiv", URL=<Decidable.html#decidable_equiv>, fillcolor="#F070D1"] ;
Tactics_IsGlobalAxiom_ind [label="IsGlobalAxiom_ind", URL=<Tactics.html#IsGlobalAxiom_ind>, peripheries=3, fillcolor="#7FFFD4"] ;
Decidable_decidable_empty [label="decidable_empty", URL=<Decidable.html#decidable_empty>, peripheries=3, fillcolor="#F070D1"] ;
Tactics_IsGlobalAxiom_rect [label="IsGlobalAxiom_rect", URL=<Tactics.html#IsGlobalAxiom_rect>, fillcolor="#F070D1"] ;
Tactics_Build_IsGlobalAxiom [label="Build_IsGlobalAxiom", URL=<Tactics.html#Build_IsGlobalAxiom>, fillcolor="#7FAAFF"] ;
Decidable_decidablepaths_hprop [label="decidablepaths_hprop", URL=<Decidable.html#decidablepaths_hprop>, peripheries=3, fillcolor="#F070D1"] ;
Tactics_IsGlobalAxiom [label="IsGlobalAxiom", URL=<Tactics.html#IsGlobalAxiom>, fillcolor="#E2CDFA"] ;
Decidable_decidable_contr [label="decidable_contr", URL=<Decidable.html#decidable_contr>, fillcolor="#F070D1"] ;
Tactics_obligation [label="obligation", URL=<Tactics.html#obligation>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_decide_rel [label="decide_rel", URL=<Decidable.html#decide_rel>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_stable_decidable [label="stable_decidable", URL=<Decidable.html#stable_decidable>, peripheries=3, fillcolor="#F070D1"] ;
Tactics_fix_proto [label="fix_proto", URL=<Tactics.html#fix_proto>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_stable [label="stable", URL=<Decidable.html#stable>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap_transport_pV_idmap [label="ap_transport_pV_idmap", URL=<PathGroupoids.html#ap_transport_pV_idmap>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap_transport_Vp_idmap [label="ap_transport_Vp_idmap", URL=<PathGroupoids.html#ap_transport_Vp_idmap>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_Stable [label="Stable", URL=<Decidable.html#Stable>, fillcolor="#F070D1"] ;
Decidable_dec_paths [label="dec_paths", URL=<Decidable.html#dec_paths>, fillcolor="#F070D1"] ;
PathGroupoids_apD02_pp [label="apD02_pp", URL=<PathGroupoids.html#apD02_pp>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_apD02_const [label="apD02_const", URL=<PathGroupoids.html#apD02_const>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_DecidablePaths [label="DecidablePaths", URL=<Decidable.html#DecidablePaths>, fillcolor="#F070D1"] ;
Decidable_dec [label="dec", URL=<Decidable.html#dec>, fillcolor="#F070D1"] ;
PathGroupoids_apD02 [label="apD02", URL=<PathGroupoids.html#apD02>, fillcolor="#F070D1"] ;
PathGroupoids_ap02_p2p [label="ap02_p2p", URL=<PathGroupoids.html#ap02_p2p>, peripheries=3, fillcolor="#F070D1"] ;
Decidable_Decidable [label="Decidable", URL=<Decidable.html#Decidable>, fillcolor="#F070D1"] ;
Basics_Datatypes_app [label="app", URL=<Basics.html#Datatypes.app>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap02_pp [label="ap02_pp", URL=<PathGroupoids.html#ap02_pp>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Datatypes_list_rect [label="list_rect", URL=<Basics.html#Datatypes.list_rect>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap02 [label="ap02", URL=<PathGroupoids.html#ap02>, fillcolor="#F070D1"] ;
Basics_Datatypes_cons [label="cons", URL=<Basics.html#Datatypes.cons>, fillcolor="#7FAAFF"] ;
PathGroupoids_eckmann_hilton [label="eckmann_hilton", URL=<PathGroupoids.html#eckmann_hilton>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Datatypes_nil [label="nil", URL=<Basics.html#Datatypes.nil>, fillcolor="#7FAAFF"] ;
PathGroupoids_triangulator [label="triangulator", URL=<PathGroupoids.html#triangulator>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Datatypes_list [label="list", URL=<Basics.html#Datatypes.list>, fillcolor="#E2CDFA"] ;
PathGroupoids_pentagon [label="pentagon", URL=<PathGroupoids.html#pentagon>, peripheries=3, fillcolor="#F070D1"] ;
Datatypes_iff [label="iff", URL=<Datatypes.html#iff>, fillcolor="#F070D1"] ;
PathGroupoids_concat_whisker [label="concat_whisker", URL=<PathGroupoids.html#concat_whisker>, fillcolor="#F070D1"] ;
Basics_Datatypes_prod_curry [label="prod_curry", URL=<Basics.html#Datatypes.prod_curry>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat_concat2 [label="concat_concat2", URL=<PathGroupoids.html#concat_concat2>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_whiskerR_VpR [label="whiskerR_VpR", URL=<PathGroupoids.html#whiskerR_VpR>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Datatypes_prod_rect [label="prod_rect", URL=<Basics.html#Datatypes.prod_rect>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_whiskerR_pVR [label="whiskerR_pVR", URL=<PathGroupoids.html#whiskerR_pVR>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Datatypes_snd [label="snd", URL=<Basics.html#Datatypes.snd>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_whiskerL_pVL [label="whiskerL_pVL", URL=<PathGroupoids.html#whiskerL_pVL>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Datatypes_fst [label="fst", URL=<Basics.html#Datatypes.fst>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Datatypes_pair [label="pair", URL=<Basics.html#Datatypes.pair>, fillcolor="#7FAAFF"] ;
PathGroupoids_whiskerL_VpL [label="whiskerL_VpL", URL=<PathGroupoids.html#whiskerL_VpL>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Datatypes_prod [label="prod", URL=<Basics.html#Datatypes.prod>, fillcolor="#E2CDFA"] ;
PathGroupoids_whiskerR_pp [label="whiskerR_pp", URL=<PathGroupoids.html#whiskerR_pp>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_whiskerL_pp [label="whiskerL_pp", URL=<PathGroupoids.html#whiskerL_pp>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Datatypes_sum_rect [label="sum_rect", URL=<Basics.html#Datatypes.sum_rect>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Datatypes_inr [label="inr", URL=<Basics.html#Datatypes.inr>, fillcolor="#7FAAFF"] ;
PathGroupoids_cancel2R [label="cancel2R", URL=<PathGroupoids.html#cancel2R>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Datatypes_inl [label="inl", URL=<Basics.html#Datatypes.inl>, fillcolor="#7FAAFF"] ;
PathGroupoids_cancel2L [label="cancel2L", URL=<PathGroupoids.html#cancel2L>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Datatypes_sum [label="sum", URL=<Basics.html#Datatypes.sum>, fillcolor="#E2CDFA"] ;
PathGroupoids_concat2_1p [label="concat2_1p", URL=<PathGroupoids.html#concat2_1p>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Datatypes_option_rect [label="option_rect", URL=<Basics.html#Datatypes.option_rect>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat2_p1 [label="concat2_p1", URL=<PathGroupoids.html#concat2_p1>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Datatypes_None [label="None", URL=<Basics.html#Datatypes.None>, fillcolor="#7FAAFF"] ;
PathGroupoids_whiskerL_1p_1 [label="whiskerL_1p_1", URL=<PathGroupoids.html#whiskerL_1p_1>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Datatypes_Some [label="Some", URL=<Basics.html#Datatypes.Some>, fillcolor="#7FAAFF"] ;
PathGroupoids_whiskerR_p1_1 [label="whiskerR_p1_1", URL=<PathGroupoids.html#whiskerR_p1_1>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Datatypes_option [label="option", URL=<Basics.html#Datatypes.option>, fillcolor="#E2CDFA"] ;
PathGroupoids_whiskerL_1p [label="whiskerL_1p", URL=<PathGroupoids.html#whiskerL_1p>, fillcolor="#F070D1"] ;
PathGroupoids_whiskerL_p1 [label="whiskerL_p1", URL=<PathGroupoids.html#whiskerL_p1>, peripheries=3, fillcolor="#F070D1"] ;
Contractible_contr_contr [label="contr_contr", URL=<Contractible.html#contr_contr>, fillcolor="#F070D1"] ;
PathGroupoids_whiskerR_1p [label="whiskerR_1p", URL=<PathGroupoids.html#whiskerR_1p>, peripheries=3, fillcolor="#F070D1"] ;
Contractible_contr_change_center [label="contr_change_center", URL=<Contractible.html#contr_change_center>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_whiskerR_p1 [label="whiskerR_p1", URL=<PathGroupoids.html#whiskerR_p1>, fillcolor="#F070D1"] ;
Contractible_contr_retract [label="contr_retract", URL=<Contractible.html#contr_retract>, peripheries=3, fillcolor="#F070D1"] ;
Contractible_contr_dom_equiv [label="contr_dom_equiv", URL=<Contractible.html#contr_dom_equiv>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_cancelR [label="cancelR", URL=<PathGroupoids.html#cancelR>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_cancelL [label="cancelL", URL=<PathGroupoids.html#cancelL>, peripheries=3, fillcolor="#F070D1"] ;
Contractible_ap_pr1_path_basedpaths_ [label="ap_pr1_path_basedpaths'", URL=<Contractible.html#ap_pr1_path_basedpaths'>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_whiskerR [label="whiskerR", URL=<PathGroupoids.html#whiskerR>, fillcolor="#F070D1"] ;
Contractible_ap_pr1_path_basedpaths [label="ap_pr1_path_basedpaths", URL=<Contractible.html#ap_pr1_path_basedpaths>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_whiskerL [label="whiskerL", URL=<PathGroupoids.html#whiskerL>, fillcolor="#F070D1"] ;
Contractible_ap_pr1_path_contr_basedpaths_ [label="ap_pr1_path_contr_basedpaths'", URL=<Contractible.html#ap_pr1_path_contr_basedpaths'>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat_Vp_inverse2 [label="concat_Vp_inverse2", URL=<PathGroupoids.html#concat_Vp_inverse2>, peripheries=3, fillcolor="#F070D1"] ;
Contractible_ap_pr1_path_contr_basedpaths [label="ap_pr1_path_contr_basedpaths", URL=<Contractible.html#ap_pr1_path_contr_basedpaths>, peripheries=3, fillcolor="#F070D1"] ;
Contractible_contr_basedpaths_ [label="contr_basedpaths'", URL=<Contractible.html#contr_basedpaths'>, fillcolor="#F070D1"] ;
PathGroupoids_concat_pV_inverse2 [label="concat_pV_inverse2", URL=<PathGroupoids.html#concat_pV_inverse2>, peripheries=3, fillcolor="#F070D1"] ;
Contractible_path_basedpaths_ [label="path_basedpaths'", URL=<Contractible.html#path_basedpaths'>, fillcolor="#F070D1"] ;
PathGroupoids_ap_pp_concat_Vp [label="ap_pp_concat_Vp", URL=<PathGroupoids.html#ap_pp_concat_Vp>, peripheries=3, fillcolor="#F070D1"] ;
Contractible_contr_basedpaths_etashort [label="contr_basedpaths_etashort", URL=<Contractible.html#contr_basedpaths_etashort>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap_pp_concat_pV [label="ap_pp_concat_pV", URL=<PathGroupoids.html#ap_pp_concat_pV>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_inverse2 [label="inverse2", URL=<PathGroupoids.html#inverse2>, fillcolor="#F070D1"] ;
Contractible_contr_basedpaths [label="contr_basedpaths", URL=<Contractible.html#contr_basedpaths>, fillcolor="#F070D1"] ;
Contractible_path_basedpaths [label="path_basedpaths", URL=<Contractible.html#path_basedpaths>, fillcolor="#F070D1"] ;
PathGroupoids_concat2_ap_ap [label="concat2_ap_ap", URL=<PathGroupoids.html#concat2_ap_ap>, peripheries=3, fillcolor="#F070D1"] ;
Contractible_contr_paths_contr [label="contr_paths_contr", URL=<Contractible.html#contr_paths_contr>, fillcolor="#F070D1"] ;
PathGroupoids_concat2 [label="concat2", URL=<PathGroupoids.html#concat2>, fillcolor="#F070D1"] ;
Contractible_path2_contr [label="path2_contr", URL=<Contractible.html#path2_contr>, fillcolor="#F070D1"] ;
PathGroupoids_apD_compose_ [label="apD_compose'", URL=<PathGroupoids.html#apD_compose'>, peripheries=3, fillcolor="#F070D1"] ;
Contractible_path_contr [label="path_contr", URL=<Contractible.html#path_contr>, fillcolor="#F070D1"] ;
PathGroupoids_apD_compose [label="apD_compose", URL=<PathGroupoids.html#apD_compose>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_apD_const [label="apD_const", URL=<PathGroupoids.html#apD_const>, fillcolor="#F070D1"] ;
PathGroupoids_transport_transport [label="transport_transport", URL=<PathGroupoids.html#transport_transport>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_transport_idmap_ap [label="transport_idmap_ap", URL=<PathGroupoids.html#transport_idmap_ap>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_transport_precompose [label="transport_precompose", URL=<PathGroupoids.html#transport_precompose>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_transport_apD_transportD [label="transport_apD_transportD", URL=<PathGroupoids.html#transport_apD_transportD>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_transportD_compose [label="transportD_compose", URL=<PathGroupoids.html#transportD_compose>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_transport_compose [label="transport_compose", URL=<PathGroupoids.html#transport_compose>, fillcolor="#F070D1"] ;
PathGroupoids_transport2_const [label="transport2_const", URL=<PathGroupoids.html#transport2_const>, fillcolor="#F070D1"] ;
PathGroupoids_transport_const [label="transport_const", URL=<PathGroupoids.html#transport_const>, fillcolor="#F070D1"] ;
PathGroupoids_apD_V [label="apD_V", URL=<PathGroupoids.html#apD_V>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_apD_pp [label="apD_pp", URL=<PathGroupoids.html#apD_pp>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_transport_pV_ap [label="transport_pV_ap", URL=<PathGroupoids.html#transport_pV_ap>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap_transport_pV [label="ap_transport_pV", URL=<PathGroupoids.html#ap_transport_pV>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap_transportD2 [label="ap_transportD2", URL=<PathGroupoids.html#ap_transportD2>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap_transportD [label="ap_transportD", URL=<PathGroupoids.html#ap_transportD>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap_transport [label="ap_transport", URL=<PathGroupoids.html#ap_transport>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat_AT [label="concat_AT", URL=<PathGroupoids.html#concat_AT>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_transport2_V [label="transport2_V", URL=<PathGroupoids.html#transport2_V>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_transport2_p2p [label="transport2_p2p", URL=<PathGroupoids.html#transport2_p2p>, fillcolor="#F070D1"] ;
PathGroupoids_transport2_is_ap10 [label="transport2_is_ap10", URL=<PathGroupoids.html#transport2_is_ap10>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_transport2 [label="transport2", URL=<PathGroupoids.html#transport2>, fillcolor="#F070D1"] ;
PathGroupoids_apD011 [label="apD011", URL=<PathGroupoids.html#apD011>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap01D1 [label="ap01D1", URL=<PathGroupoids.html#ap01D1>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap011D [label="ap011D", URL=<PathGroupoids.html#ap011D>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap011 [label="ap011", URL=<PathGroupoids.html#ap011>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_transportD2 [label="transportD2", URL=<PathGroupoids.html#transportD2>, fillcolor="#F070D1"] ;
PathGroupoids_transportD [label="transportD", URL=<PathGroupoids.html#transportD>, fillcolor="#F070D1"] ;
PathGroupoids_ap11_is_ap10_ap01 [label="ap11_is_ap10_ap01", URL=<PathGroupoids.html#ap11_is_ap10_ap01>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_paths_ind_r_transport [label="paths_ind_r_transport", URL=<PathGroupoids.html#paths_ind_r_transport>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_paths_ind_transport [label="paths_ind_transport", URL=<PathGroupoids.html#paths_ind_transport>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_paths_rect_transport [label="paths_rect_transport", URL=<PathGroupoids.html#paths_rect_transport>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveL_transport_V_1 [label="moveL_transport_V_1", URL=<PathGroupoids.html#moveL_transport_V_1>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap_transport_transport_pV [label="ap_transport_transport_pV", URL=<PathGroupoids.html#ap_transport_transport_pV>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_transport_VpV [label="transport_VpV", URL=<PathGroupoids.html#transport_VpV>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_transport_pVp [label="transport_pVp", URL=<PathGroupoids.html#transport_pVp>, fillcolor="#F070D1"] ;
PathGroupoids_transport_p_pp [label="transport_p_pp", URL=<PathGroupoids.html#transport_p_pp>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_transport_Vp [label="transport_Vp", URL=<PathGroupoids.html#transport_Vp>, fillcolor="#F070D1"] ;
PathGroupoids_transport_pV [label="transport_pV", URL=<PathGroupoids.html#transport_pV>, fillcolor="#F070D1"] ;
PathGroupoids_transport_pp [label="transport_pp", URL=<PathGroupoids.html#transport_pp>, fillcolor="#F070D1"] ;
PathGroupoids_transport_1 [label="transport_1", URL=<PathGroupoids.html#transport_1>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap10_ap_postcompose [label="ap10_ap_postcompose", URL=<PathGroupoids.html#ap10_ap_postcompose>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_apD10_ap_postcompose [label="apD10_ap_postcompose", URL=<PathGroupoids.html#apD10_ap_postcompose>, fillcolor="#F070D1"] ;
PathGroupoids_ap10_ap_precompose [label="ap10_ap_precompose", URL=<PathGroupoids.html#ap10_ap_precompose>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_apD10_ap_precompose [label="apD10_ap_precompose", URL=<PathGroupoids.html#apD10_ap_precompose>, fillcolor="#F070D1"] ;
PathGroupoids_ap10_V [label="ap10_V", URL=<PathGroupoids.html#ap10_V>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap10_pp [label="ap10_pp", URL=<PathGroupoids.html#ap10_pp>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap10_1 [label="ap10_1", URL=<PathGroupoids.html#ap10_1>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_apD10_V [label="apD10_V", URL=<PathGroupoids.html#apD10_V>, fillcolor="#F070D1"] ;
PathGroupoids_apD10_pp [label="apD10_pp", URL=<PathGroupoids.html#apD10_pp>, fillcolor="#F070D1"] ;
PathGroupoids_apD10_1 [label="apD10_1", URL=<PathGroupoids.html#apD10_1>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat_p1_1 [label="concat_p1_1", URL=<PathGroupoids.html#concat_p1_1>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat_1p_1 [label="concat_1p_1", URL=<PathGroupoids.html#concat_1p_1>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat_p_A1p [label="concat_p_A1p", URL=<PathGroupoids.html#concat_p_A1p>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat_pp_A1 [label="concat_pp_A1", URL=<PathGroupoids.html#concat_pp_A1>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat_A1_pp [label="concat_A1_pp", URL=<PathGroupoids.html#concat_A1_pp>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat_pA1_p [label="concat_pA1_p", URL=<PathGroupoids.html#concat_pA1_p>, fillcolor="#F070D1"] ;
PathGroupoids_concat_pp_A1p [label="concat_pp_A1p", URL=<PathGroupoids.html#concat_pp_A1p>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat_pA1_pp [label="concat_pA1_pp", URL=<PathGroupoids.html#concat_pA1_pp>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat_A_pp [label="concat_A_pp", URL=<PathGroupoids.html#concat_A_pp>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat_pA_p [label="concat_pA_p", URL=<PathGroupoids.html#concat_pA_p>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat_pA_pp [label="concat_pA_pp", URL=<PathGroupoids.html#concat_pA_pp>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat_pA1 [label="concat_pA1", URL=<PathGroupoids.html#concat_pA1>, fillcolor="#F070D1"] ;
PathGroupoids_ap_homotopic_id [label="ap_homotopic_id", URL=<PathGroupoids.html#ap_homotopic_id>, fillcolor="#F070D1"] ;
PathGroupoids_concat_A1p [label="concat_A1p", URL=<PathGroupoids.html#concat_A1p>, fillcolor="#F070D1"] ;
PathGroupoids_ap_homotopic [label="ap_homotopic", URL=<PathGroupoids.html#ap_homotopic>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat_Ap [label="concat_Ap", URL=<PathGroupoids.html#concat_Ap>, fillcolor="#F070D1"] ;
PathGroupoids_ap_const [label="ap_const", URL=<PathGroupoids.html#ap_const>, fillcolor="#F070D1"] ;
PathGroupoids_ap_compose_ [label="ap_compose'", URL=<PathGroupoids.html#ap_compose'>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap_compose [label="ap_compose", URL=<PathGroupoids.html#ap_compose>, fillcolor="#F070D1"] ;
PathGroupoids_ap_idmap [label="ap_idmap", URL=<PathGroupoids.html#ap_idmap>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap_V [label="ap_V", URL=<PathGroupoids.html#ap_V>, fillcolor="#F070D1"] ;
PathGroupoids_inverse_ap [label="inverse_ap", URL=<PathGroupoids.html#inverse_ap>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap_pp_p [label="ap_pp_p", URL=<PathGroupoids.html#ap_pp_p>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap_p_pp [label="ap_p_pp", URL=<PathGroupoids.html#ap_p_pp>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap_pp [label="ap_pp", URL=<PathGroupoids.html#ap_pp>, fillcolor="#F070D1"] ;
PathGroupoids_apD_1 [label="apD_1", URL=<PathGroupoids.html#apD_1>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_ap_1 [label="ap_1", URL=<PathGroupoids.html#ap_1>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveL_transport_p_V [label="moveL_transport_p_V", URL=<PathGroupoids.html#moveL_transport_p_V>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveL_transport_V_V [label="moveL_transport_V_V", URL=<PathGroupoids.html#moveL_transport_V_V>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveR_transport_V_V [label="moveR_transport_V_V", URL=<PathGroupoids.html#moveR_transport_V_V>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveR_transport_p_V [label="moveR_transport_p_V", URL=<PathGroupoids.html#moveR_transport_p_V>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveL_transport_p [label="moveL_transport_p", URL=<PathGroupoids.html#moveL_transport_p>, fillcolor="#F070D1"] ;
PathGroupoids_moveL_transport_V [label="moveL_transport_V", URL=<PathGroupoids.html#moveL_transport_V>, fillcolor="#F070D1"] ;
PathGroupoids_moveR_transport_V [label="moveR_transport_V", URL=<PathGroupoids.html#moveR_transport_V>, fillcolor="#F070D1"] ;
PathGroupoids_moveR_transport_p [label="moveR_transport_p", URL=<PathGroupoids.html#moveR_transport_p>, fillcolor="#F070D1"] ;
PathGroupoids_moveR_V1 [label="moveR_V1", URL=<PathGroupoids.html#moveR_V1>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveR_1V [label="moveR_1V", URL=<PathGroupoids.html#moveR_1V>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveR_1M [label="moveR_1M", URL=<PathGroupoids.html#moveR_1M>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveR_M1 [label="moveR_M1", URL=<PathGroupoids.html#moveR_M1>, fillcolor="#F070D1"] ;
PathGroupoids_moveL_V1 [label="moveL_V1", URL=<PathGroupoids.html#moveL_V1>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveL_1V [label="moveL_1V", URL=<PathGroupoids.html#moveL_1V>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveL_M1 [label="moveL_M1", URL=<PathGroupoids.html#moveL_M1>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveL_1M [label="moveL_1M", URL=<PathGroupoids.html#moveL_1M>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveL_pV [label="moveL_pV", URL=<PathGroupoids.html#moveL_pV>, fillcolor="#F070D1"] ;
PathGroupoids_moveL_Vp [label="moveL_Vp", URL=<PathGroupoids.html#moveL_Vp>, fillcolor="#F070D1"] ;
PathGroupoids_moveL_pM [label="moveL_pM", URL=<PathGroupoids.html#moveL_pM>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveL_Mp [label="moveL_Mp", URL=<PathGroupoids.html#moveL_Mp>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveR_pV [label="moveR_pV", URL=<PathGroupoids.html#moveR_pV>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveR_Vp [label="moveR_Vp", URL=<PathGroupoids.html#moveR_Vp>, fillcolor="#F070D1"] ;
PathGroupoids_moveR_pM [label="moveR_pM", URL=<PathGroupoids.html#moveR_pM>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_moveR_Mp [label="moveR_Mp", URL=<PathGroupoids.html#moveR_Mp>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_inv_V [label="inv_V", URL=<PathGroupoids.html#inv_V>, fillcolor="#F070D1"] ;
PathGroupoids_inv_VV [label="inv_VV", URL=<PathGroupoids.html#inv_VV>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_inv_pV [label="inv_pV", URL=<PathGroupoids.html#inv_pV>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_inv_Vp [label="inv_Vp", URL=<PathGroupoids.html#inv_Vp>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_inv_pp [label="inv_pp", URL=<PathGroupoids.html#inv_pp>, peripheries=3, fillcolor="#F070D1"] ;
PathGroupoids_concat_pV_p [label="concat_pV_p", URL=<PathGroupoids.html#concat_pV_p>, fillcolor="#F070D1"] ;
PathGroupoids_concat_pp_V [label="concat_pp_V", URL=<PathGroupoids.html#concat_pp_V>, fillcolor="#F070D1"] ;
PathGroupoids_concat_p_Vp [label="concat_p_Vp", URL=<PathGroupoids.html#concat_p_Vp>, fillcolor="#F070D1"] ;
PathGroupoids_concat_V_pp [label="concat_V_pp", URL=<PathGroupoids.html#concat_V_pp>, fillcolor="#F070D1"] ;
PathGroupoids_concat_Vp [label="concat_Vp", URL=<PathGroupoids.html#concat_Vp>, fillcolor="#F070D1"] ;
PathGroupoids_concat_pV [label="concat_pV", URL=<PathGroupoids.html#concat_pV>, fillcolor="#F070D1"] ;
PathGroupoids_concat_pp_p [label="concat_pp_p", URL=<PathGroupoids.html#concat_pp_p>, fillcolor="#F070D1"] ;
PathGroupoids_concat_p_pp [label="concat_p_pp", URL=<PathGroupoids.html#concat_p_pp>, fillcolor="#F070D1"] ;
PathGroupoids_concat_1p [label="concat_1p", URL=<PathGroupoids.html#concat_1p>, fillcolor="#F070D1"] ;
PathGroupoids_concat_p1 [label="concat_p1", URL=<PathGroupoids.html#concat_p1>, fillcolor="#F070D1"] ;
Overture_hfiber [label="hfiber", URL=<Overture.html#hfiber>, fillcolor="#F070D1"] ;
Overture_ispointed_type [label="ispointed_type", URL=<Overture.html#ispointed_type>, peripheries=3, fillcolor="#F070D1"] ;
Overture_pointed_type [label="pointed_type", URL=<Overture.html#pointed_type>, peripheries=3, fillcolor="#F070D1"] ;
Overture_Build_pType [label="Build_pType", URL=<Overture.html#Build_pType>, peripheries=3, fillcolor="#7FAAFF"] ;
Overture_pType [label="pType", URL=<Overture.html#pType>, fillcolor="#E2CDFA"] ;
Overture_point [label="point", URL=<Overture.html#point>, peripheries=3, fillcolor="#F070D1"] ;
Overture_IsPointed [label="IsPointed", URL=<Overture.html#IsPointed>, fillcolor="#F070D1"] ;
Overture_Unit_rect [label="Unit_rect", URL=<Overture.html#Unit_rect>, peripheries=3, fillcolor="#F070D1"] ;
Overture_Unit_rec [label="Unit_rec", URL=<Overture.html#Unit_rec>, peripheries=3, fillcolor="#F070D1"] ;
Overture_Unit_ind [label="Unit_ind", URL=<Overture.html#Unit_ind>, fillcolor="#F070D1"] ;
Overture_tt [label="tt", URL=<Overture.html#tt>, fillcolor="#7FAAFF"] ;
Overture_Unit [label="Unit", URL=<Overture.html#Unit>, fillcolor="#E2CDFA"] ;
Overture_asymmetry [label="asymmetry", URL=<Overture.html#asymmetry>, peripheries=3, fillcolor="#F070D1"] ;
Overture_Asymmetric [label="Asymmetric", URL=<Overture.html#Asymmetric>, fillcolor="#F070D1"] ;
Overture_irreflexivity [label="irreflexivity", URL=<Overture.html#irreflexivity>, peripheries=3, fillcolor="#F070D1"] ;
Overture_Irreflexive [label="Irreflexive", URL=<Overture.html#Irreflexive>, fillcolor="#F070D1"] ;
Overture_complement [label="complement", URL=<Overture.html#complement>, fillcolor="#F070D1"] ;
Overture_symmetric_neq [label="symmetric_neq", URL=<Overture.html#symmetric_neq>, peripheries=3, fillcolor="#F070D1"] ;
Overture_not [label="not", URL=<Overture.html#not>, fillcolor="#F070D1"] ;
Overture_Empty_rect [label="Empty_rect", URL=<Overture.html#Empty_rect>, fillcolor="#F070D1"] ;
Overture_Empty_rec [label="Empty_rec", URL=<Overture.html#Empty_rec>, fillcolor="#F070D1"] ;
Overture_Empty_ind [label="Empty_ind", URL=<Overture.html#Empty_ind>, fillcolor="#F070D1"] ;
Overture_Empty [label="Empty", URL=<Overture.html#Empty>, fillcolor="#E2CDFA"] ;
Overture_nat_sind [label="nat_sind", URL=<Overture.html#nat_sind>, peripheries=3, fillcolor="#F070D1"] ;
Overture_nat_rec [label="nat_rec", URL=<Overture.html#nat_rec>, peripheries=3, fillcolor="#F070D1"] ;
Overture_nat_ind [label="nat_ind", URL=<Overture.html#nat_ind>, peripheries=3, fillcolor="#7FFFD4"] ;
Overture_nat_rect [label="nat_rect", URL=<Overture.html#nat_rect>, fillcolor="#F070D1"] ;
Overture_S [label="S", URL=<Overture.html#S>, fillcolor="#7FAAFF"] ;
Overture_O [label="O", URL=<Overture.html#O>, fillcolor="#7FAAFF"] ;
Overture_nat [label="nat", URL=<Overture.html#nat>, fillcolor="#E2CDFA"] ;
Overture_path_forall [label="path_forall", URL=<Overture.html#path_forall>, fillcolor="#F070D1"] ;
Overture_isequiv_apD10 [label="isequiv_apD10", URL=<Overture.html#isequiv_apD10>, fillcolor="#FACDEF"] ;
Overture_Funext [label="Funext", URL=<Overture.html#Funext>, fillcolor="#FACDEF"] ;
Overture_istrunc_paths [label="istrunc_paths", URL=<Overture.html#istrunc_paths>, fillcolor="#F070D1"] ;
Overture_Trunc_is_trunc [label="Trunc_is_trunc", URL=<Overture.html#Trunc_is_trunc>, peripheries=3, fillcolor="#F070D1"] ;
Overture_IsTrunc [label="IsTrunc", URL=<Overture.html#IsTrunc>, fillcolor="#F070D1"] ;
Overture_IsTrunc_internal [label="IsTrunc_internal", URL=<Overture.html#IsTrunc_internal>, fillcolor="#F070D1"] ;
Overture_trunc_index_rect [label="trunc_index_rect", URL=<Overture.html#trunc_index_rect>, fillcolor="#F070D1"] ;
Overture_trunc_index_rec [label="trunc_index_rec", URL=<Overture.html#trunc_index_rec>, peripheries=3, fillcolor="#F070D1"] ;
Overture_trunc_index_ind [label="trunc_index_ind", URL=<Overture.html#trunc_index_ind>, fillcolor="#F070D1"] ;
Overture_trunc_S [label="trunc_S", URL=<Overture.html#trunc_S>, fillcolor="#7FAAFF"] ;
Overture_minus_two [label="minus_two", URL=<Overture.html#minus_two>, fillcolor="#7FAAFF"] ;
Overture_trunc_index [label="trunc_index", URL=<Overture.html#trunc_index>, fillcolor="#E2CDFA"] ;
Overture_contr [label="contr", URL=<Overture.html#contr>, fillcolor="#F070D1"] ;
Overture_center [label="center", URL=<Overture.html#center>, fillcolor="#F070D1"] ;
Overture_Build_Contr [label="Build_Contr", URL=<Overture.html#Build_Contr>, fillcolor="#7FAAFF"] ;
Overture_Contr_internal [label="Contr_internal", URL=<Overture.html#Contr_internal>, fillcolor="#E2CDFA"] ;
Overture_ap10_equiv [label="ap10_equiv", URL=<Overture.html#ap10_equiv>, peripheries=3, fillcolor="#F070D1"] ;
Overture_equiv_isequiv [label="equiv_isequiv", URL=<Overture.html#equiv_isequiv>, peripheries=3, fillcolor="#F070D1"] ;
Overture_equiv_fun [label="equiv_fun", URL=<Overture.html#equiv_fun>, fillcolor="#F070D1"] ;
Overture_Build_Equiv [label="Build_Equiv", URL=<Overture.html#Build_Equiv>, fillcolor="#7FAAFF"] ;
Overture_Equiv [label="Equiv", URL=<Overture.html#Equiv>, fillcolor="#E2CDFA"] ;
Overture_eisadj [label="eisadj", URL=<Overture.html#eisadj>, fillcolor="#F070D1"] ;
Overture_eissect [label="eissect", URL=<Overture.html#eissect>, fillcolor="#F070D1"] ;
Overture_eisretr [label="eisretr", URL=<Overture.html#eisretr>, fillcolor="#F070D1"] ;
Overture_equiv_inv [label="equiv_inv", URL=<Overture.html#equiv_inv>, fillcolor="#F070D1"] ;
Overture_Build_IsEquiv [label="Build_IsEquiv", URL=<Overture.html#Build_IsEquiv>, fillcolor="#7FAAFF"] ;
Overture_IsEquiv [label="IsEquiv", URL=<Overture.html#IsEquiv>, fillcolor="#E2CDFA"] ;
Overture_apD [label="apD", URL=<Overture.html#apD>, fillcolor="#F070D1"] ;
Overture_ap11 [label="ap11", URL=<Overture.html#ap11>, fillcolor="#F070D1"] ;
Overture_ap10 [label="ap10", URL=<Overture.html#ap10>, fillcolor="#F070D1"] ;
Overture_apD10 [label="apD10", URL=<Overture.html#apD10>, fillcolor="#F070D1"] ;
Overture_symmetric_pointwise_paths [label="symmetric_pointwise_paths", URL=<Overture.html#symmetric_pointwise_paths>, peripheries=3, fillcolor="#F070D1"] ;
Overture_transitive_pointwise_paths [label="transitive_pointwise_paths", URL=<Overture.html#transitive_pointwise_paths>, peripheries=3, fillcolor="#F070D1"] ;
Overture_reflexive_pointwise_paths [label="reflexive_pointwise_paths", URL=<Overture.html#reflexive_pointwise_paths>, peripheries=3, fillcolor="#F070D1"] ;
Overture_pointwise_paths_concat [label="pointwise_paths_concat", URL=<Overture.html#pointwise_paths_concat>, fillcolor="#F070D1"] ;
Overture_pointwise_paths [label="pointwise_paths", URL=<Overture.html#pointwise_paths>, fillcolor="#F070D1"] ;
Overture_ap [label="ap", URL=<Overture.html#ap>, fillcolor="#F070D1"] ;
Overture_transport [label="transport", URL=<Overture.html#transport>, fillcolor="#F070D1"] ;
Overture_transitive_paths [label="transitive_paths", URL=<Overture.html#transitive_paths>, peripheries=3, fillcolor="#F070D1"] ;
Overture_concat [label="concat", URL=<Overture.html#concat>, fillcolor="#F070D1"] ;
Overture_paths_rect_r [label="paths_rect_r", URL=<Overture.html#paths_rect_r>, peripheries=3, fillcolor="#F070D1"] ;
Overture_symmetric_paths [label="symmetric_paths", URL=<Overture.html#symmetric_paths>, peripheries=3, fillcolor="#F070D1"] ;
Overture_inverse [label="inverse", URL=<Overture.html#inverse>, fillcolor="#F070D1"] ;
Overture_paths_ind_r [label="paths_ind_r", URL=<Overture.html#paths_ind_r>, fillcolor="#F070D1"] ;
Overture_paths_ind_ [label="paths_ind'", URL=<Overture.html#paths_ind'>, peripheries=3, fillcolor="#F070D1"] ;
Overture_reflexive_paths [label="reflexive_paths", URL=<Overture.html#reflexive_paths>, peripheries=3, fillcolor="#F070D1"] ;
Overture_paths_rew_r [label="paths_rew_r", URL=<Overture.html#paths_rew_r>, peripheries=3, fillcolor="#F070D1"] ;
Overture_internal_paths_rew_r [label="internal_paths_rew_r", URL=<Overture.html#internal_paths_rew_r>, fillcolor="#F070D1"] ;
Overture_paths_rew [label="paths_rew", URL=<Overture.html#paths_rew>, peripheries=3, fillcolor="#F070D1"] ;
Overture_internal_paths_rew [label="internal_paths_rew", URL=<Overture.html#internal_paths_rew>, fillcolor="#F070D1"] ;
Overture_paths_rect [label="paths_rect", URL=<Overture.html#paths_rect>, fillcolor="#F070D1"] ;
Overture_paths_rec [label="paths_rec", URL=<Overture.html#paths_rec>, peripheries=3, fillcolor="#F070D1"] ;
Overture_paths_ind [label="paths_ind", URL=<Overture.html#paths_ind>, fillcolor="#F070D1"] ;
Overture_idpath [label="idpath", URL=<Overture.html#idpath>, fillcolor="#7FAAFF"] ;
Overture_paths [label="paths", URL=<Overture.html#paths>, fillcolor="#E2CDFA"] ;
Overture_composeD [label="composeD", URL=<Overture.html#composeD>, fillcolor="#F070D1"] ;
Overture_iff_reflexive [label="iff_reflexive", URL=<Overture.html#iff_reflexive>, peripheries=3, fillcolor="#F070D1"] ;
Overture_iff_inverse [label="iff_inverse", URL=<Overture.html#iff_inverse>, peripheries=3, fillcolor="#F070D1"] ;
Overture_iff_compose [label="iff_compose", URL=<Overture.html#iff_compose>, peripheries=3, fillcolor="#F070D1"] ;
Overture_Compose [label="Compose", URL=<Overture.html#Compose>, peripheries=3, fillcolor="#F070D1"] ;
Overture_uncurry [label="uncurry", URL=<Overture.html#uncurry>, peripheries=3, fillcolor="#F070D1"] ;
Overture_sig_rec [label="sig_rec", URL=<Overture.html#sig_rec>, peripheries=3, fillcolor="#F070D1"] ;
Overture_sig_ind [label="sig_ind", URL=<Overture.html#sig_ind>, peripheries=3, fillcolor="#F070D1"] ;
Overture_sig_rect [label="sig_rect", URL=<Overture.html#sig_rect>, peripheries=3, fillcolor="#F070D1"] ;
Overture_proj2 [label="proj2", URL=<Overture.html#proj2>, peripheries=3, fillcolor="#F070D1"] ;
Overture_proj1 [label="proj1", URL=<Overture.html#proj1>, fillcolor="#F070D1"] ;
Overture_exist [label="exist", URL=<Overture.html#exist>, fillcolor="#7FAAFF"] ;
Overture_sig [label="sig", URL=<Overture.html#sig>, fillcolor="#E2CDFA"] ;
Overture_const [label="const", URL=<Overture.html#const>, fillcolor="#F070D1"] ;
Overture_unfold_Type3le [label="unfold_Type3le", URL=<Overture.html#unfold_Type3le>, peripheries=3, fillcolor="#F070D1"] ;
Overture_Type3le [label="Type3le", URL=<Overture.html#Type3le>, fillcolor="#F070D1"] ;
Overture_unfold_Type2le [label="unfold_Type2le", URL=<Overture.html#unfold_Type2le>, peripheries=3, fillcolor="#F070D1"] ;
Overture_Type2le [label="Type2le", URL=<Overture.html#Type2le>, fillcolor="#F070D1"] ;
Overture_unfold_Type3 [label="unfold_Type3", URL=<Overture.html#unfold_Type3>, peripheries=3, fillcolor="#F070D1"] ;
Overture_Type3 [label="Type3", URL=<Overture.html#Type3>, fillcolor="#F070D1"] ;
Overture_unfold_Type2 [label="unfold_Type2", URL=<Overture.html#unfold_Type2>, peripheries=3, fillcolor="#F070D1"] ;
Overture_Type2 [label="Type2", URL=<Overture.html#Type2>, fillcolor="#F070D1"] ;
Overture_unfold_Type1 [label="unfold_Type1", URL=<Overture.html#unfold_Type1>, peripheries=3, fillcolor="#F070D1"] ;
Overture_Type1 [label="Type1", URL=<Overture.html#Type1>, fillcolor="#F070D1"] ;
Overture_PreOrder_Transitive [label="PreOrder_Transitive", URL=<Overture.html#PreOrder_Transitive>, peripheries=3, fillcolor="#F070D1"] ;
Overture_PreOrder_Reflexive [label="PreOrder_Reflexive", URL=<Overture.html#PreOrder_Reflexive>, peripheries=3, fillcolor="#F070D1"] ;
Overture_Build_PreOrder [label="Build_PreOrder", URL=<Overture.html#Build_PreOrder>, peripheries=3, fillcolor="#7FAAFF"] ;
Overture_PreOrder [label="PreOrder", URL=<Overture.html#PreOrder>, fillcolor="#E2CDFA"] ;
Overture_transitivity [label="transitivity", URL=<Overture.html#transitivity>, peripheries=3, fillcolor="#F070D1"] ;
Overture_Transitive [label="Transitive", URL=<Overture.html#Transitive>, fillcolor="#F070D1"] ;
Overture_symmetry [label="symmetry", URL=<Overture.html#symmetry>, peripheries=3, fillcolor="#F070D1"] ;
Overture_Symmetric [label="Symmetric", URL=<Overture.html#Symmetric>, fillcolor="#F070D1"] ;
Overture_reflexivity [label="reflexivity", URL=<Overture.html#reflexivity>, peripheries=3, fillcolor="#F070D1"] ;
Overture_Reflexive [label="Reflexive", URL=<Overture.html#Reflexive>, fillcolor="#F070D1"] ;
Overture_Relation [label="Relation", URL=<Overture.html#Relation>, fillcolor="#F070D1"] ;
Numeral_int_of_int [label="int_of_int", URL=<Numeral.html#int_of_int>, peripheries=3, fillcolor="#F070D1"] ;
Numeral_uint_of_uint [label="uint_of_uint", URL=<Numeral.html#uint_of_uint>, peripheries=3, fillcolor="#F070D1"] ;
Numeral_numeral_sind [label="numeral_sind", URL=<Numeral.html#numeral_sind>, peripheries=3, fillcolor="#F070D1"] ;
Numeral_numeral_rec [label="numeral_rec", URL=<Numeral.html#numeral_rec>, peripheries=3, fillcolor="#F070D1"] ;
Numeral_numeral_ind [label="numeral_ind", URL=<Numeral.html#numeral_ind>, peripheries=3, fillcolor="#7FFFD4"] ;
Numeral_numeral_rect [label="numeral_rect", URL=<Numeral.html#numeral_rect>, fillcolor="#F070D1"] ;
Numeral_Hex [label="Hex", URL=<Numeral.html#Hex>, fillcolor="#7FAAFF"] ;
Numeral_Dec [label="Dec", URL=<Numeral.html#Dec>, fillcolor="#7FAAFF"] ;
Numeral_numeral [label="numeral", URL=<Numeral.html#numeral>, fillcolor="#E2CDFA"] ;
Numeral_int_sind [label="int_sind", URL=<Numeral.html#int_sind>, peripheries=3, fillcolor="#F070D1"] ;
Numeral_int_rec [label="int_rec", URL=<Numeral.html#int_rec>, peripheries=3, fillcolor="#F070D1"] ;
Numeral_int_ind [label="int_ind", URL=<Numeral.html#int_ind>, peripheries=3, fillcolor="#7FFFD4"] ;
Numeral_int_rect [label="int_rect", URL=<Numeral.html#int_rect>, fillcolor="#F070D1"] ;
Numeral_IntHex [label="IntHex", URL=<Numeral.html#IntHex>, fillcolor="#7FAAFF"] ;
Numeral_IntDec [label="IntDec", URL=<Numeral.html#IntDec>, fillcolor="#7FAAFF"] ;
Numeral_int [label="int", URL=<Numeral.html#int>, fillcolor="#E2CDFA"] ;
Numeral_uint_sind [label="uint_sind", URL=<Numeral.html#uint_sind>, peripheries=3, fillcolor="#F070D1"] ;
Numeral_uint_rec [label="uint_rec", URL=<Numeral.html#uint_rec>, peripheries=3, fillcolor="#F070D1"] ;
Numeral_uint_ind [label="uint_ind", URL=<Numeral.html#uint_ind>, peripheries=3, fillcolor="#7FFFD4"] ;
Numeral_uint_rect [label="uint_rect", URL=<Numeral.html#uint_rect>, fillcolor="#F070D1"] ;
Numeral_UIntHex [label="UIntHex", URL=<Numeral.html#UIntHex>, fillcolor="#7FAAFF"] ;
Numeral_UIntDec [label="UIntDec", URL=<Numeral.html#UIntDec>, fillcolor="#7FAAFF"] ;
Numeral_uint [label="uint", URL=<Numeral.html#uint>, fillcolor="#E2CDFA"] ;
Basics_Nat_to_num_int [label="to_num_int", URL=<Basics.html#Nat.to_num_int>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Nat_to_int [label="to_int", URL=<Basics.html#Nat.to_int>, fillcolor="#F070D1"] ;
Basics_Nat_of_num_int [label="of_num_int", URL=<Basics.html#Nat.of_num_int>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Nat_of_hex_int [label="of_hex_int", URL=<Basics.html#Nat.of_hex_int>, fillcolor="#F070D1"] ;
Basics_Nat_of_int [label="of_int", URL=<Basics.html#Nat.of_int>, fillcolor="#F070D1"] ;
Basics_Nat_to_num_uint [label="to_num_uint", URL=<Basics.html#Nat.to_num_uint>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Nat_to_uint [label="to_uint", URL=<Basics.html#Nat.to_uint>, fillcolor="#F070D1"] ;
Basics_Nat_to_little_uint [label="to_little_uint", URL=<Basics.html#Nat.to_little_uint>, fillcolor="#F070D1"] ;
Basics_Nat_of_num_uint [label="of_num_uint", URL=<Basics.html#Nat.of_num_uint>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Nat_of_hex_uint [label="of_hex_uint", URL=<Basics.html#Nat.of_hex_uint>, fillcolor="#F070D1"] ;
Basics_Nat_of_hex_uint_acc [label="of_hex_uint_acc", URL=<Basics.html#Nat.of_hex_uint_acc>, fillcolor="#F070D1"] ;
Basics_Nat_of_uint [label="of_uint", URL=<Basics.html#Nat.of_uint>, fillcolor="#F070D1"] ;
Basics_Nat_of_uint_acc [label="of_uint_acc", URL=<Basics.html#Nat.of_uint_acc>, fillcolor="#F070D1"] ;
Basics_Nat_tail_mul [label="tail_mul", URL=<Basics.html#Nat.tail_mul>, fillcolor="#F070D1"] ;
Basics_Nat_tail_addmul [label="tail_addmul", URL=<Basics.html#Nat.tail_addmul>, fillcolor="#F070D1"] ;
Basics_Nat_tail_add [label="tail_add", URL=<Basics.html#Nat.tail_add>, fillcolor="#F070D1"] ;
Basics_Logic_not [label="not", URL=<Basics.html#Logic.not>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Logic_False_sind [label="False_sind", URL=<Basics.html#Logic.False_sind>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Logic_False_rec [label="False_rec", URL=<Basics.html#Logic.False_rec>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Logic_False_ind [label="False_ind", URL=<Basics.html#Logic.False_ind>, peripheries=3, fillcolor="#7FFFD4"] ;
Basics_Logic_False_rect [label="False_rect", URL=<Basics.html#Logic.False_rect>, fillcolor="#F070D1"] ;
Basics_Logic_False [label="False", URL=<Basics.html#Logic.False>, fillcolor="#E2CDFA"] ;
Basics_Logic_True_sind [label="True_sind", URL=<Basics.html#Logic.True_sind>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Logic_True_rec [label="True_rec", URL=<Basics.html#Logic.True_rec>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Logic_True_ind [label="True_ind", URL=<Basics.html#Logic.True_ind>, peripheries=3, fillcolor="#7FFFD4"] ;
Basics_Logic_True_rect [label="True_rect", URL=<Basics.html#Logic.True_rect>, fillcolor="#F070D1"] ;
Basics_Logic_I [label="I", URL=<Basics.html#Logic.I>, fillcolor="#7FAAFF"] ;
Basics_Logic_True [label="True", URL=<Basics.html#Logic.True>, fillcolor="#E2CDFA"] ;
Basics_Hexadecimal_nztail_int [label="nztail_int", URL=<Basics.html#Hexadecimal.nztail_int>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Hexadecimal_nztail [label="nztail", URL=<Basics.html#Hexadecimal.nztail>, fillcolor="#F070D1"] ;
Basics_Hexadecimal_app_int [label="app_int", URL=<Basics.html#Hexadecimal.app_int>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Hexadecimal_app [label="app", URL=<Basics.html#Hexadecimal.app>, fillcolor="#F070D1"] ;
Basics_Hexadecimal_rev [label="rev", URL=<Basics.html#Hexadecimal.rev>, fillcolor="#F070D1"] ;
Basics_Hexadecimal_revapp [label="revapp", URL=<Basics.html#Hexadecimal.revapp>, fillcolor="#F070D1"] ;
Basics_Hexadecimal_opp [label="opp", URL=<Basics.html#Hexadecimal.opp>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Hexadecimal_norm [label="norm", URL=<Basics.html#Hexadecimal.norm>, fillcolor="#F070D1"] ;
Basics_Hexadecimal_unorm [label="unorm", URL=<Basics.html#Hexadecimal.unorm>, fillcolor="#F070D1"] ;
Basics_Hexadecimal_nzhead [label="nzhead", URL=<Basics.html#Hexadecimal.nzhead>, fillcolor="#F070D1"] ;
Basics_Hexadecimal_nb_digits [label="nb_digits", URL=<Basics.html#Hexadecimal.nb_digits>, peripheries=3, fillcolor="#F070D1"] ;
Hexadecimal_hexadecimal_sind [label="hexadecimal_sind", URL=<Hexadecimal.html#hexadecimal_sind>, peripheries=3, fillcolor="#F070D1"] ;
Hexadecimal_hexadecimal_rec [label="hexadecimal_rec", URL=<Hexadecimal.html#hexadecimal_rec>, peripheries=3, fillcolor="#F070D1"] ;
Hexadecimal_hexadecimal_ind [label="hexadecimal_ind", URL=<Hexadecimal.html#hexadecimal_ind>, peripheries=3, fillcolor="#7FFFD4"] ;
Hexadecimal_hexadecimal_rect [label="hexadecimal_rect", URL=<Hexadecimal.html#hexadecimal_rect>, fillcolor="#F070D1"] ;
Basics_Hexadecimal_HexadecimalExp [label="HexadecimalExp", URL=<Basics.html#Hexadecimal.HexadecimalExp>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_Hexadecimal [label="Hexadecimal", URL=<Basics.html#Hexadecimal.Hexadecimal>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_hexadecimal [label="hexadecimal", URL=<Basics.html#Hexadecimal.hexadecimal>, fillcolor="#E2CDFA"] ;
Hexadecimal_int_sind [label="int_sind", URL=<Hexadecimal.html#int_sind>, peripheries=3, fillcolor="#F070D1"] ;
Hexadecimal_int_rec [label="int_rec", URL=<Hexadecimal.html#int_rec>, peripheries=3, fillcolor="#F070D1"] ;
Hexadecimal_int_ind [label="int_ind", URL=<Hexadecimal.html#int_ind>, peripheries=3, fillcolor="#7FFFD4"] ;
Hexadecimal_int_rect [label="int_rect", URL=<Hexadecimal.html#int_rect>, fillcolor="#F070D1"] ;
Basics_Hexadecimal_Neg [label="Neg", URL=<Basics.html#Hexadecimal.Neg>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_Pos [label="Pos", URL=<Basics.html#Hexadecimal.Pos>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_int [label="int", URL=<Basics.html#Hexadecimal.int>, fillcolor="#E2CDFA"] ;
Basics_Hexadecimal_uint_sind [label="uint_sind", URL=<Basics.html#Hexadecimal.uint_sind>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Hexadecimal_uint_rec [label="uint_rec", URL=<Basics.html#Hexadecimal.uint_rec>, peripheries=3, fillcolor="#F070D1"] ;
Basics_Hexadecimal_uint_ind [label="uint_ind", URL=<Basics.html#Hexadecimal.uint_ind>, peripheries=3, fillcolor="#7FFFD4"] ;
Basics_Hexadecimal_uint_rect [label="uint_rect", URL=<Basics.html#Hexadecimal.uint_rect>, fillcolor="#F070D1"] ;
Basics_Hexadecimal_Df [label="Df", URL=<Basics.html#Hexadecimal.Df>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_De [label="De", URL=<Basics.html#Hexadecimal.De>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_Dd [label="Dd", URL=<Basics.html#Hexadecimal.Dd>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_Dc [label="Dc", URL=<Basics.html#Hexadecimal.Dc>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_Db [label="Db", URL=<Basics.html#Hexadecimal.Db>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_Da [label="Da", URL=<Basics.html#Hexadecimal.Da>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_D9 [label="D9", URL=<Basics.html#Hexadecimal.D9>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_D8 [label="D8", URL=<Basics.html#Hexadecimal.D8>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_D7 [label="D7", URL=<Basics.html#Hexadecimal.D7>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_D6 [label="D6", URL=<Basics.html#Hexadecimal.D6>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_D5 [label="D5", URL=<Basics.html#Hexadecimal.D5>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_D4 [label="D4", URL=<Basics.html#Hexadecimal.D4>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_D3 [label="D3", URL=<Basics.html#Hexadecimal.D3>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_D2 [label="D2", URL=<Basics.html#Hexadecimal.D2>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_D1 [label="D1", URL=<Basics.html#Hexadecimal.D1>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_D0 [label="D0", URL=<Basics.html#Hexadecimal.D0>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_Nil [label="Nil", URL=<Basics.html#Hexadecimal.Nil>, fillcolor="#7FAAFF"] ;
Basics_Hexadecimal_uint [label="uint", URL=<Basics.html#Hexadecimal.uint>, fillcolor="#E2CDFA"] ;
Equivalences_equiv_composeR_ [label="equiv_composeR'", URL=<Equivalences.html#equiv_composeR'>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_equiv_path_ind [label="equiv_path_ind", URL=<Equivalences.html#equiv_path_ind>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_equiv_ind_comp [label="equiv_ind_comp", URL=<Equivalences.html#equiv_ind_comp>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_equiv_ind [label="equiv_ind", URL=<Equivalences.html#equiv_ind>, fillcolor="#F070D1"] ;
Equivalences_contr_basedhomotopy_ [label="contr_basedhomotopy'", URL=<Equivalences.html#contr_basedhomotopy'>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_contr_basedhomotopy [label="contr_basedhomotopy", URL=<Equivalences.html#contr_basedhomotopy>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_isequiv_commsq_ [label="isequiv_commsq'", URL=<Equivalences.html#isequiv_commsq'>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_isequiv_commsq [label="isequiv_commsq", URL=<Equivalences.html#isequiv_commsq>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_cancelL_equiv [label="cancelL_equiv", URL=<Equivalences.html#cancelL_equiv>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_cancelL_isequiv [label="cancelL_isequiv", URL=<Equivalences.html#cancelL_isequiv>, fillcolor="#F070D1"] ;
Equivalences_cancelR_equiv [label="cancelR_equiv", URL=<Equivalences.html#cancelR_equiv>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_cancelR_isequiv [label="cancelR_isequiv", URL=<Equivalences.html#cancelR_isequiv>, fillcolor="#F070D1"] ;
Equivalences_equiv_ap_inv_ [label="equiv_ap_inv'", URL=<Equivalences.html#equiv_ap_inv'>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_equiv_ap_inv [label="equiv_ap_inv", URL=<Equivalences.html#equiv_ap_inv>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_equiv_inverse_homotopy [label="equiv_inverse_homotopy", URL=<Equivalences.html#equiv_inverse_homotopy>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_equiv_inverse_compose [label="equiv_inverse_compose", URL=<Equivalences.html#equiv_inverse_compose>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_symmetric_equiv [label="symmetric_equiv", URL=<Equivalences.html#symmetric_equiv>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_equiv_inverse [label="equiv_inverse", URL=<Equivalences.html#equiv_inverse>, fillcolor="#F070D1"] ;
Equivalences_isequiv_inverse [label="isequiv_inverse", URL=<Equivalences.html#isequiv_inverse>, fillcolor="#F070D1"] ;
Equivalences_equiv_inj [label="equiv_inj", URL=<Equivalences.html#equiv_inj>, fillcolor="#F070D1"] ;
Equivalences_equiv_ap_ [label="equiv_ap'", URL=<Equivalences.html#equiv_ap'>, fillcolor="#F070D1"] ;
Equivalences_equiv_ap [label="equiv_ap", URL=<Equivalences.html#equiv_ap>, fillcolor="#F070D1"] ;
Equivalences_isequiv_ap [label="isequiv_ap", URL=<Equivalences.html#isequiv_ap>, fillcolor="#F070D1"] ;
Equivalences_isequiv_isequiv_precompose [label="isequiv_isequiv_precompose", URL=<Equivalences.html#isequiv_isequiv_precompose>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_equiv_postcompose_ [label="equiv_postcompose'", URL=<Equivalences.html#equiv_postcompose'>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_equiv_postcompose [label="equiv_postcompose", URL=<Equivalences.html#equiv_postcompose>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_isequiv_postcompose [label="isequiv_postcompose", URL=<Equivalences.html#isequiv_postcompose>, fillcolor="#F070D1"] ;
Equivalences_equiv_precompose_ [label="equiv_precompose'", URL=<Equivalences.html#equiv_precompose'>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_equiv_precompose [label="equiv_precompose", URL=<Equivalences.html#equiv_precompose>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_isequiv_precompose [label="isequiv_precompose", URL=<Equivalences.html#isequiv_precompose>, fillcolor="#F070D1"] ;
Equivalences_equiv_pr1 [label="equiv_pr1", URL=<Equivalences.html#equiv_pr1>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_isequiv_pr1 [label="isequiv_pr1", URL=<Equivalences.html#isequiv_pr1>, fillcolor="#F070D1"] ;
Equivalences_equiv_contr_contr [label="equiv_contr_contr", URL=<Equivalences.html#equiv_contr_contr>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_isequiv_contr_contr [label="isequiv_contr_contr", URL=<Equivalences.html#isequiv_contr_contr>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_contr_equiv_ [label="contr_equiv'", URL=<Equivalences.html#contr_equiv'>, fillcolor="#F070D1"] ;
Equivalences_contr_equiv [label="contr_equiv", URL=<Equivalences.html#contr_equiv>, fillcolor="#F070D1"] ;
Equivalences_moveL_equiv_V_ [label="moveL_equiv_V'", URL=<Equivalences.html#moveL_equiv_V'>, peripheries=3, fillcolor="#F070D1"] ;
Equivalences_moveL_equiv_V [label="moveL_equiv_V", URL=<Equivalences.html#moveL_equiv_V>, fillcolor="#F070D1"] ;
Equivalences_moveR_equiv_V_ [label="moveR_equiv_V'", URL=<Equivalences.html#moveR_equiv_V'>, peripheries=3, fillcolor="#F070D1"] ;
  Equivalences_moveR_equiv_V -> Overture_IsEquiv [] ;
  Equivalences_moveR_equiv_V -> Overture_concat [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_Df [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_De [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_Dd [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_Dc [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_Db [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_Da [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_D9 [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_D8 [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_D7 [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_D6 [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_D5 [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_D4 [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_D3 [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_D2 [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_D1 [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_D0 [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_Nil [] ;
  Basics_Hexadecimal_Little_succ_double -> Basics_Hexadecimal_uint [] ;
  Equivalences_moveL_equiv_M_ -> Overture_Equiv [] ;
  Equivalences_moveL_equiv_M_ -> Equivalences_moveL_equiv_M [] ;
  Equivalences_moveL_equiv_M -> Overture_IsEquiv [] ;
  Equivalences_moveL_equiv_M -> Overture_concat [] ;
  Equivalences_moveL_equiv_M -> Overture_inverse [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_Df [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_De [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_Dd [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_Dc [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_Db [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_Da [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_D9 [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_D8 [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_D7 [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_D6 [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_D5 [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_D4 [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_D3 [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_D2 [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_D1 [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_D0 [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_Nil [] ;
  Basics_Hexadecimal_Little_double -> Basics_Hexadecimal_uint [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_Df [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_De [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_Dd [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_Dc [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_Db [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_Da [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_D9 [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_D8 [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_D7 [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_D6 [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_D5 [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_D4 [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_D3 [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_D2 [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_D1 [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_D0 [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_Nil [] ;
  Basics_Hexadecimal_Little_succ -> Basics_Hexadecimal_uint [] ;
  Equivalences_moveR_equiv_M_ -> Overture_Equiv [] ;
  Equivalences_moveR_equiv_M_ -> Equivalences_moveR_equiv_M [] ;
  Basics_Decimal_Little_succ_double -> Basics_Decimal_D9 [] ;
  Basics_Decimal_Little_succ_double -> Basics_Decimal_D8 [] ;
  Basics_Decimal_Little_succ_double -> Basics_Decimal_D7 [] ;
  Basics_Decimal_Little_succ_double -> Basics_Decimal_D6 [] ;
  Basics_Decimal_Little_succ_double -> Basics_Decimal_D5 [] ;
  Basics_Decimal_Little_succ_double -> Basics_Decimal_D4 [] ;
  Basics_Decimal_Little_succ_double -> Basics_Decimal_D3 [] ;
  Basics_Decimal_Little_succ_double -> Basics_Decimal_D2 [] ;
  Basics_Decimal_Little_succ_double -> Basics_Decimal_D1 [] ;
  Basics_Decimal_Little_succ_double -> Basics_Decimal_D0 [] ;
  Basics_Decimal_Little_succ_double -> Basics_Decimal_Nil [] ;
  Basics_Decimal_Little_succ_double -> Basics_Decimal_uint [] ;
  Equivalences_moveR_equiv_M -> Overture_IsEquiv [] ;
  Equivalences_moveR_equiv_M -> Overture_concat [] ;
  Equivalences_equiv_involution -> Equivalences_equiv_adjointify [] ;
  Basics_Decimal_Little_double -> Basics_Decimal_D9 [] ;
  Basics_Decimal_Little_double -> Basics_Decimal_D8 [] ;
  Basics_Decimal_Little_double -> Basics_Decimal_D7 [] ;
  Basics_Decimal_Little_double -> Basics_Decimal_D6 [] ;
  Basics_Decimal_Little_double -> Basics_Decimal_D5 [] ;
  Basics_Decimal_Little_double -> Basics_Decimal_D4 [] ;
  Basics_Decimal_Little_double -> Basics_Decimal_D3 [] ;
  Basics_Decimal_Little_double -> Basics_Decimal_D2 [] ;
  Basics_Decimal_Little_double -> Basics_Decimal_D1 [] ;
  Basics_Decimal_Little_double -> Basics_Decimal_D0 [] ;
  Basics_Decimal_Little_double -> Basics_Decimal_Nil [] ;
  Basics_Decimal_Little_double -> Basics_Decimal_uint [] ;
  Basics_Decimal_Little_succ -> Basics_Decimal_D9 [] ;
  Basics_Decimal_Little_succ -> Basics_Decimal_D8 [] ;
  Basics_Decimal_Little_succ -> Basics_Decimal_D7 [] ;
  Basics_Decimal_Little_succ -> Basics_Decimal_D6 [] ;
  Basics_Decimal_Little_succ -> Basics_Decimal_D5 [] ;
  Basics_Decimal_Little_succ -> Basics_Decimal_D4 [] ;
  Basics_Decimal_Little_succ -> Basics_Decimal_D3 [] ;
  Basics_Decimal_Little_succ -> Basics_Decimal_D2 [] ;
  Basics_Decimal_Little_succ -> Basics_Decimal_D1 [] ;
  Basics_Decimal_Little_succ -> Basics_Decimal_D0 [] ;
  Basics_Decimal_Little_succ -> Basics_Decimal_Nil [] ;
  Basics_Decimal_Little_succ -> Basics_Decimal_uint [] ;
  Equivalences_isequiv_involution -> Equivalences_isequiv_adjointify [] ;
  UniverseLevel_lower__equiv -> UniverseLevel_lower__isequiv [] ;
  UniverseLevel_lower__equiv -> Overture_Build_Equiv [] ;
  UniverseLevel_lower__equiv -> Overture_Equiv [] ;
  Equivalences_equiv_adjointify -> Overture_Build_Equiv [] ;
  Equivalences_equiv_adjointify -> Overture_Equiv [] ;
  Equivalences_equiv_adjointify -> Equivalences_isequiv_adjointify [] ;
  UniverseLevel_lower__isequiv -> UniverseLevel_lower_2 [] ;
  UniverseLevel_lower__isequiv -> UniverseLevel_lift_ [] ;
  UniverseLevel_lower__isequiv -> PathGroupoids_ap_compose [] ;
  UniverseLevel_lower__isequiv -> Overture_Build_IsEquiv [] ;
  UniverseLevel_lower__isequiv -> Overture_IsEquiv [] ;
  UniverseLevel_lower__isequiv -> Overture_concat [] ;
  UniverseLevel_lower__isequiv -> Overture_inverse [] ;
  Equivalences_isequiv_adjointify -> Overture_Build_IsEquiv [] ;
  Equivalences_isequiv_adjointify -> Overture_IsEquiv [] ;
  Equivalences_isequiv_adjointify -> Equivalences_is_adjoint_ [] ;
  UniverseLevel_lift__isequiv -> UniverseLevel_lift_2 [] ;
  UniverseLevel_lift__isequiv -> UniverseLevel_lift_ [] ;
  UniverseLevel_lift__isequiv -> PathGroupoids_ap_compose [] ;
  UniverseLevel_lift__isequiv -> Overture_Build_IsEquiv [] ;
  UniverseLevel_lift__isequiv -> Overture_IsEquiv [] ;
  UniverseLevel_lift__isequiv -> Overture_concat [] ;
  UniverseLevel_lift__isequiv -> Overture_inverse [] ;
  Equivalences_is_adjoint_ -> PathGroupoids_concat_pA1 [] ;
  Equivalences_is_adjoint_ -> PathGroupoids_ap_compose [] ;
  Equivalences_is_adjoint_ -> PathGroupoids_ap_V [] ;
  Equivalences_is_adjoint_ -> PathGroupoids_ap_pp [] ;
  Equivalences_is_adjoint_ -> PathGroupoids_moveR_M1 [] ;
  Equivalences_is_adjoint_ -> PathGroupoids_moveL_Vp [] ;
  Equivalences_is_adjoint_ -> PathGroupoids_concat_pV [] ;
  Equivalences_is_adjoint_ -> PathGroupoids_concat_pp_p [] ;
  Equivalences_is_adjoint_ -> PathGroupoids_concat_p_pp [] ;
  Equivalences_is_adjoint_ -> Overture_pointwise_paths [] ;
  Equivalences_is_adjoint_ -> Overture_internal_paths_rew_r [] ;
  Equivalences_is_adjoint_ -> Overture_internal_paths_rew [] ;
  UniverseLevel_isequiv_lift_2 -> UniverseLevel_lower_2 [] ;
  UniverseLevel_isequiv_lift_2 -> UniverseLevel_lift_2 [] ;
  UniverseLevel_isequiv_lift_2 -> Overture_Build_IsEquiv [] ;
  UniverseLevel_isequiv_lift_2 -> Overture_IsEquiv [] ;
  Equivalences_equiv_transport -> Overture_Build_Equiv [] ;
  Equivalences_equiv_transport -> Overture_Equiv [] ;
  Equivalences_equiv_transport -> Equivalences_isequiv_transport [] ;
  Equivalences_isequiv_transport -> PathGroupoids_transport_pVp [] ;
  Equivalences_isequiv_transport -> Overture_Build_IsEquiv [] ;
  Equivalences_isequiv_transport -> Overture_IsEquiv [] ;
  UniverseLevel_isequiv_lift_ -> UniverseLevel_lower_ [] ;
  UniverseLevel_isequiv_lift_ -> UniverseLevel_lift_ [] ;
  UniverseLevel_isequiv_lift_ -> Overture_Build_IsEquiv [] ;
  UniverseLevel_isequiv_lift_ -> Overture_IsEquiv [] ;
  UniverseLevel_lower_2 -> UniverseLevel_lower_ [] ;
  Equivalences_isequiv_homotopic_ -> Overture_Equiv [] ;
  Equivalences_isequiv_homotopic_ -> Equivalences_isequiv_homotopic [] ;
  UniverseLevel_lift_2 -> UniverseLevel_lower_ [] ;
  Equivalences_equiv_homotopic -> Overture_Build_Equiv [] ;
  Equivalences_equiv_homotopic -> Overture_Equiv [] ;
  Equivalences_equiv_homotopic -> Equivalences_isequiv_homotopic [] ;
  UniverseLevel_lower_ -> UniverseLevel_Lift_ [] ;
  Equivalences_isequiv_homotopic -> PathGroupoids_whiskerR [] ;
  Equivalences_isequiv_homotopic -> PathGroupoids_concat_A1p [] ;
  Equivalences_isequiv_homotopic -> PathGroupoids_concat_Ap [] ;
  Equivalences_isequiv_homotopic -> PathGroupoids_ap_compose [] ;
  Equivalences_isequiv_homotopic -> PathGroupoids_ap_V [] ;
  Equivalences_isequiv_homotopic -> PathGroupoids_ap_pp [] ;
  Equivalences_isequiv_homotopic -> PathGroupoids_moveL_Vp [] ;
  Equivalences_isequiv_homotopic -> PathGroupoids_moveR_Vp [] ;
  Equivalences_isequiv_homotopic -> PathGroupoids_concat_pp_p [] ;
  Equivalences_isequiv_homotopic -> PathGroupoids_concat_p_pp [] ;
  Equivalences_isequiv_homotopic -> Overture_eisadj [] ;
  Equivalences_isequiv_homotopic -> Overture_Build_IsEquiv [] ;
  Equivalences_isequiv_homotopic -> Overture_internal_paths_rew_r [] ;
  Equivalences_isequiv_homotopic -> Overture_internal_paths_rew [] ;
  Equivalences_transitive_equiv -> Overture_Transitive [] ;
  Equivalences_transitive_equiv -> Equivalences_equiv_compose [] ;
  UniverseLevel_lift_ -> UniverseLevel_Lift_ [] ;
  Equivalences_iff_equiv -> Overture_Equiv [] ;
  Equivalences_iff_equiv -> Datatypes_iff [] ;
  Equivalences_iff_equiv -> Basics_Datatypes_pair [] ;
  UniverseLevel_lower_equiv -> UniverseLevel_lower_isequiv [] ;
  UniverseLevel_lower_equiv -> Overture_Build_Equiv [] ;
  UniverseLevel_lower_equiv -> Overture_Equiv [] ;
  Equivalences_equiv_compose_ -> Equivalences_equiv_compose [] ;
  UniverseLevel_lower_isequiv -> UniverseLevel_lower2 [] ;
  UniverseLevel_lower_isequiv -> UniverseLevel_lift [] ;
  UniverseLevel_lower_isequiv -> PathGroupoids_ap_compose [] ;
  UniverseLevel_lower_isequiv -> Overture_Build_IsEquiv [] ;
  UniverseLevel_lower_isequiv -> Overture_IsEquiv [] ;
  UniverseLevel_lower_isequiv -> Overture_concat [] ;
  UniverseLevel_lower_isequiv -> Overture_inverse [] ;
  Equivalences_equiv_compose -> Overture_Build_Equiv [] ;
  Equivalences_equiv_compose -> Overture_Equiv [] ;
  Equivalences_equiv_compose -> Equivalences_isequiv_compose [] ;
  UniverseLevel_lift_isequiv -> UniverseLevel_lift2 [] ;
  UniverseLevel_lift_isequiv -> UniverseLevel_lift [] ;
  UniverseLevel_lift_isequiv -> PathGroupoids_ap_compose [] ;
  UniverseLevel_lift_isequiv -> Overture_Build_IsEquiv [] ;
  UniverseLevel_lift_isequiv -> Overture_IsEquiv [] ;
  UniverseLevel_lift_isequiv -> Overture_concat [] ;
  UniverseLevel_lift_isequiv -> Overture_inverse [] ;
  Equivalences_isequiv_compose_ -> Equivalences_isequiv_compose [] ;
  UniverseLevel_isequiv_lift2 -> UniverseLevel_lower2 [] ;
  UniverseLevel_isequiv_lift2 -> UniverseLevel_lift2 [] ;
  UniverseLevel_isequiv_lift2 -> Overture_Build_IsEquiv [] ;
  UniverseLevel_isequiv_lift2 -> Overture_IsEquiv [] ;
  Equivalences_isequiv_compose -> PathGroupoids_ap02 [] ;
  Equivalences_isequiv_compose -> PathGroupoids_whiskerL [] ;
  Equivalences_isequiv_compose -> PathGroupoids_concat_A1p [] ;
  Equivalences_isequiv_compose -> PathGroupoids_ap_compose [] ;
  Equivalences_isequiv_compose -> PathGroupoids_ap_pp [] ;
  Equivalences_isequiv_compose -> Overture_Build_IsEquiv [] ;
  Equivalences_isequiv_compose -> Overture_IsEquiv [] ;
  Equivalences_reflexive_equiv -> Overture_Reflexive [] ;
  Equivalences_reflexive_equiv -> Equivalences_equiv_idmap [] ;
  UniverseLevel_isequiv_lift -> UniverseLevel_lower [] ;
  UniverseLevel_isequiv_lift -> UniverseLevel_lift [] ;
  UniverseLevel_isequiv_lift -> Overture_Build_IsEquiv [] ;
  UniverseLevel_isequiv_lift -> Overture_IsEquiv [] ;
  UniverseLevel_lower2 -> UniverseLevel_lower [] ;
  Equivalences_equiv_idmap -> Overture_Build_Equiv [] ;
  Equivalences_equiv_idmap -> Overture_Equiv [] ;
  Equivalences_equiv_idmap -> Equivalences_isequiv_idmap [] ;
  UniverseLevel_lift2 -> UniverseLevel_lower [] ;
  Equivalences_isequiv_idmap -> Overture_Build_IsEquiv [] ;
  Equivalences_isequiv_idmap -> Overture_IsEquiv [] ;
  UniverseLevel_lower -> UniverseLevel_Lift [] ;
  Basics_Decimal_int_of_int -> Basics_Decimal_int [] ;
  Basics_Decimal_uint_of_uint -> Basics_Decimal_uint [] ;
  UniverseLevel_lift -> UniverseLevel_Lift [] ;
  Basics_Decimal_nztail_int -> Basics_Decimal_nztail [] ;
  Basics_Decimal_nztail_int -> Basics_Decimal_Neg [] ;
  Basics_Decimal_nztail_int -> Basics_Decimal_Pos [] ;
  Basics_Decimal_nztail_int -> Basics_Decimal_int [] ;
  Basics_Decimal_nztail -> Overture_S [] ;
  Basics_Decimal_nztail -> Overture_O [] ;
  Basics_Decimal_nztail -> Overture_nat [] ;
  Basics_Decimal_nztail -> Basics_Decimal_rev [] ;
  Basics_Decimal_nztail -> Basics_Datatypes_pair [] ;
  Basics_Decimal_nztail -> Basics_Datatypes_prod [] ;
  Trunc_ishprop_istruncmap -> Trunc_ishprop_istrunc [] ;
  Trunc_ishprop_istruncmap -> Trunc_hprop_allpath [] ;
  Trunc_ishprop_istruncmap -> Trunc_path_ishprop [] ;
  Trunc_ishprop_istruncmap -> Trunc_IsTruncMap [] ;
  Trunc_ishprop_istrunc -> Trunc_hprop_inhabited_contr [] ;
  Trunc_ishprop_istrunc -> Contractible_contr_contr [] ;
  Basics_Decimal_app_int -> Basics_Decimal_app [] ;
  Basics_Decimal_app_int -> Basics_Decimal_Neg [] ;
  Basics_Decimal_app_int -> Basics_Decimal_Pos [] ;
  Basics_Decimal_app_int -> Basics_Decimal_int [] ;
  Trunc_equiv_contr_hprop -> Trunc_iff_contr_hprop [] ;
  Trunc_equiv_contr_hprop -> Trunc_equiv_iff_hprop_uncurried [] ;
  Trunc_equiv_contr_hprop -> Trunc_hprop_inhabited_contr [] ;
  Trunc_equiv_contr_hprop -> Contractible_contr_contr [] ;
  Basics_Decimal_app -> Basics_Decimal_rev [] ;
  Basics_Decimal_rev -> Basics_Decimal_revapp [] ;
  Basics_Decimal_rev -> Basics_Decimal_Nil [] ;
  Trunc_iff_contr_hprop -> Trunc_contr_inhabited_hprop [] ;
  Trunc_iff_contr_hprop -> Datatypes_iff [] ;
  Trunc_iff_contr_hprop -> Basics_Datatypes_pair [] ;
  Basics_Decimal_revapp -> Basics_Decimal_D9 [] ;
  Basics_Decimal_revapp -> Basics_Decimal_D8 [] ;
  Basics_Decimal_revapp -> Basics_Decimal_D7 [] ;
  Basics_Decimal_revapp -> Basics_Decimal_D6 [] ;
  Basics_Decimal_revapp -> Basics_Decimal_D5 [] ;
  Basics_Decimal_revapp -> Basics_Decimal_D4 [] ;
  Basics_Decimal_revapp -> Basics_Decimal_D3 [] ;
  Basics_Decimal_revapp -> Basics_Decimal_D2 [] ;
  Basics_Decimal_revapp -> Basics_Decimal_D1 [] ;
  Basics_Decimal_revapp -> Basics_Decimal_D0 [] ;
  Basics_Decimal_revapp -> Basics_Decimal_uint [] ;
  Trunc_equiv_iff_hprop -> Trunc_equiv_iff_hprop_uncurried [] ;
  Trunc_equiv_iff_hprop -> Basics_Datatypes_pair [] ;
  Basics_Decimal_opp -> Basics_Decimal_Neg [] ;
  Basics_Decimal_opp -> Basics_Decimal_Pos [] ;
  Basics_Decimal_opp -> Basics_Decimal_int [] ;
  Trunc_equiv_iff_hprop_uncurried -> Trunc_path_ishprop [] ;
  Trunc_equiv_iff_hprop_uncurried -> Equivalences_equiv_adjointify [] ;
  Trunc_equiv_iff_hprop_uncurried -> Datatypes_iff [] ;
  Basics_Decimal_norm -> Basics_Decimal_unorm [] ;
  Basics_Decimal_norm -> Basics_Decimal_Neg [] ;
  Basics_Decimal_norm -> Basics_Decimal_Pos [] ;
  Basics_Decimal_norm -> Basics_Decimal_int [] ;
  Trunc_isequiv_iff_hprop -> Trunc_path_ishprop [] ;
  Trunc_isequiv_iff_hprop -> Equivalences_isequiv_adjointify [] ;
  Basics_Decimal_unorm -> Basics_Decimal_nzhead [] ;
  Basics_Decimal_unorm -> Basics_Decimal_D9 [] ;
  Basics_Decimal_unorm -> Basics_Decimal_D8 [] ;
  Basics_Decimal_unorm -> Basics_Decimal_D7 [] ;
  Basics_Decimal_unorm -> Basics_Decimal_D6 [] ;
  Basics_Decimal_unorm -> Basics_Decimal_D5 [] ;
  Basics_Decimal_unorm -> Basics_Decimal_D4 [] ;
  Basics_Decimal_unorm -> Basics_Decimal_D3 [] ;
  Basics_Decimal_unorm -> Basics_Decimal_D2 [] ;
  Basics_Decimal_unorm -> Basics_Decimal_D1 [] ;
  Basics_Decimal_unorm -> Basics_Decimal_D0 [] ;
  Basics_Decimal_unorm -> Basics_Decimal_Nil [] ;
  Trunc_hprop_allpath -> Overture_trunc_S [] ;
  Trunc_hprop_allpath -> Contractible_contr_paths_contr [] ;
  Trunc_path_ishprop -> Overture_IsTrunc [] ;
  Trunc_path_ishprop -> Overture_trunc_S [] ;
  Trunc_path_ishprop -> Overture_minus_two [] ;
  Basics_Decimal_nzhead -> Basics_Decimal_uint [] ;
  Basics_Decimal_nb_digits -> Overture_S [] ;
  Basics_Decimal_nb_digits -> Overture_O [] ;
  Basics_Decimal_nb_digits -> Overture_nat [] ;
  Basics_Decimal_nb_digits -> Basics_Decimal_uint [] ;
  Trunc_hprop_inhabited_contr -> Overture_trunc_S [] ;
  Trunc_hprop_inhabited_contr -> Contractible_contr_paths_contr [] ;
  Decimal_decimal_sind -> Basics_Decimal_DecimalExp [] ;
  Decimal_decimal_sind -> Basics_Decimal_Decimal [] ;
  Decimal_decimal_sind -> Basics_Decimal_decimal [] ;
  Trunc_contr_inhabited_hprop -> Overture_IsTrunc [] ;
  Trunc_contr_inhabited_hprop -> Overture_trunc_S [] ;
  Trunc_contr_inhabited_hprop -> Overture_minus_two [] ;
  Trunc_contr_inhabited_hprop -> Overture_center [] ;
  Trunc_contr_inhabited_hprop -> Overture_Build_Contr [] ;
  Trunc_default_TruncType -> Trunc_Build_TruncType [] ;
  Trunc_default_TruncType -> Trunc_TruncType [] ;
  Decimal_decimal_rec -> Decimal_decimal_rect [] ;
  Trunc_trunctype_istrunc -> Trunc_TruncType [] ;
  Decimal_decimal_ind -> Basics_Decimal_DecimalExp [] ;
  Decimal_decimal_ind -> Basics_Decimal_Decimal [] ;
  Decimal_decimal_ind -> Basics_Decimal_decimal [] ;
  Trunc_trunctype_type -> Trunc_TruncType [] ;
  Decimal_decimal_rect -> Basics_Decimal_DecimalExp [] ;
  Decimal_decimal_rect -> Basics_Decimal_Decimal [] ;
  Decimal_decimal_rect -> Basics_Decimal_decimal [] ;
  Basics_Decimal_DecimalExp -> Basics_Decimal_int [] ;
  Trunc_TruncType_sind -> Trunc_Build_TruncType [] ;
  Trunc_TruncType_sind -> Trunc_TruncType [] ;
  Basics_Decimal_Decimal -> Basics_Decimal_int [] ;
  Trunc_TruncType_rec -> Trunc_TruncType_rect [] ;
  Basics_Decimal_decimal -> Basics_Decimal_int [] ;
  Trunc_TruncType_ind -> Trunc_Build_TruncType [] ;
  Trunc_TruncType_ind -> Trunc_TruncType [] ;
  Decimal_int_sind -> Basics_Decimal_Neg [] ;
  Decimal_int_sind -> Basics_Decimal_Pos [] ;
  Decimal_int_sind -> Basics_Decimal_int [] ;
  Trunc_TruncType_rect -> Trunc_Build_TruncType [] ;
  Trunc_TruncType_rect -> Trunc_TruncType [] ;
  Trunc_Build_TruncType -> Overture_IsTrunc [] ;
  Decimal_int_rec -> Decimal_int_rect [] ;
  Trunc_TruncType -> Overture_IsTrunc [] ;
  Decimal_int_ind -> Basics_Decimal_Neg [] ;
  Decimal_int_ind -> Basics_Decimal_Pos [] ;
  Decimal_int_ind -> Basics_Decimal_int [] ;
  Trunc_istruncmap_fiber -> Trunc_IsTruncMap [] ;
  Decimal_int_rect -> Basics_Decimal_Neg [] ;
  Decimal_int_rect -> Basics_Decimal_Pos [] ;
  Decimal_int_rect -> Basics_Decimal_int [] ;
  Basics_Decimal_Neg -> Basics_Decimal_uint [] ;
  Trunc_IsTruncMap -> Overture_hfiber [] ;
  Trunc_IsTruncMap -> Overture_IsTrunc [] ;
  Basics_Decimal_Pos -> Basics_Decimal_uint [] ;
  Trunc_istrunc_equiv_istrunc -> Trunc_istrunc_isequiv_istrunc [] ;
  Trunc_istrunc_equiv_istrunc -> Overture_Equiv [] ;
  Basics_Decimal_int -> Basics_Decimal_uint [] ;
  Trunc_istrunc_isequiv_istrunc -> Overture_trunc_S [] ;
  Trunc_istrunc_isequiv_istrunc -> Equivalences_isequiv_inverse [] ;
  Trunc_istrunc_isequiv_istrunc -> Equivalences_contr_equiv [] ;
  Basics_Decimal_uint_sind -> Basics_Decimal_D9 [] ;
  Basics_Decimal_uint_sind -> Basics_Decimal_D8 [] ;
  Basics_Decimal_uint_sind -> Basics_Decimal_D7 [] ;
  Basics_Decimal_uint_sind -> Basics_Decimal_D6 [] ;
  Basics_Decimal_uint_sind -> Basics_Decimal_D5 [] ;
  Basics_Decimal_uint_sind -> Basics_Decimal_D4 [] ;
  Basics_Decimal_uint_sind -> Basics_Decimal_D3 [] ;
  Basics_Decimal_uint_sind -> Basics_Decimal_D2 [] ;
  Basics_Decimal_uint_sind -> Basics_Decimal_D1 [] ;
  Basics_Decimal_uint_sind -> Basics_Decimal_D0 [] ;
  Basics_Decimal_uint_sind -> Basics_Decimal_Nil [] ;
  Basics_Decimal_uint_sind -> Basics_Decimal_uint [] ;
  Trunc_istrunc_hset -> Trunc_istrunc_leq [] ;
  Trunc_istrunc_hset -> Overture_tt [] ;
  Basics_Decimal_uint_rec -> Basics_Decimal_uint_rect [] ;
  Trunc_istrunc_hprop -> Trunc_istrunc_leq [] ;
  Trunc_istrunc_hprop -> Overture_tt [] ;
  Basics_Decimal_uint_ind -> Basics_Decimal_D9 [] ;
  Basics_Decimal_uint_ind -> Basics_Decimal_D8 [] ;
  Basics_Decimal_uint_ind -> Basics_Decimal_D7 [] ;
  Basics_Decimal_uint_ind -> Basics_Decimal_D6 [] ;
  Basics_Decimal_uint_ind -> Basics_Decimal_D5 [] ;
  Basics_Decimal_uint_ind -> Basics_Decimal_D4 [] ;
  Basics_Decimal_uint_ind -> Basics_Decimal_D3 [] ;
  Basics_Decimal_uint_ind -> Basics_Decimal_D2 [] ;
  Basics_Decimal_uint_ind -> Basics_Decimal_D1 [] ;
  Basics_Decimal_uint_ind -> Basics_Decimal_D0 [] ;
  Basics_Decimal_uint_ind -> Basics_Decimal_Nil [] ;
  Basics_Decimal_uint_ind -> Basics_Decimal_uint [] ;
  Trunc_istrunc_contr -> Trunc_istrunc_leq [] ;
  Trunc_istrunc_contr -> Overture_tt [] ;
  Basics_Decimal_uint_rect -> Basics_Decimal_D9 [] ;
  Basics_Decimal_uint_rect -> Basics_Decimal_D8 [] ;
  Basics_Decimal_uint_rect -> Basics_Decimal_D7 [] ;
  Basics_Decimal_uint_rect -> Basics_Decimal_D6 [] ;
  Basics_Decimal_uint_rect -> Basics_Decimal_D5 [] ;
  Basics_Decimal_uint_rect -> Basics_Decimal_D4 [] ;
  Basics_Decimal_uint_rect -> Basics_Decimal_D3 [] ;
  Basics_Decimal_uint_rect -> Basics_Decimal_D2 [] ;
  Basics_Decimal_uint_rect -> Basics_Decimal_D1 [] ;
  Basics_Decimal_uint_rect -> Basics_Decimal_D0 [] ;
  Basics_Decimal_uint_rect -> Basics_Decimal_Nil [] ;
  Basics_Decimal_uint_rect -> Basics_Decimal_uint [] ;
  Trunc_istrunc_leq -> Trunc_istrunc_succ [] ;
  Trunc_istrunc_leq -> Trunc_trunc_index_leq [] ;
  Trunc_istrunc_leq -> Overture_istrunc_paths [] ;
  Trunc_istrunc_succ -> Overture_trunc_S [] ;
  Trunc_istrunc_succ -> Contractible_contr_paths_contr [] ;
  Trunc_contr_istrunc_minus_two -> Overture_IsTrunc [] ;
  Trunc_contr_istrunc_minus_two -> Overture_minus_two [] ;
  Trunc_trunc_index_min_leq_right -> Trunc_trunc_index_min [] ;
  Trunc_trunc_index_min_leq_right -> Trunc_trunc_index_leq [] ;
  Trunc_trunc_index_min_leq_right -> Overture_tt [] ;
  Trunc_trunc_index_min_leq_right -> Overture_trunc_index_ind [] ;
  Trunc_trunc_index_min_leq_left -> Trunc_trunc_index_min [] ;
  Trunc_trunc_index_min_leq_left -> Trunc_trunc_index_leq [] ;
  Trunc_trunc_index_min_leq_left -> Overture_tt [] ;
  Trunc_trunc_index_min_leq_left -> Overture_trunc_index_ind [] ;
  Trunc_trunc_index_min_path -> Trunc_trunc_index_min [] ;
  Trunc_trunc_index_min_path -> Overture_trunc_index_rect [] ;
  Trunc_trunc_index_min_path -> Overture_ap [] ;
  Trunc_trunc_index_min_path -> Basics_Datatypes_inr [] ;
  Trunc_trunc_index_min_path -> Basics_Datatypes_inl [] ;
  Trunc_trunc_index_min_path -> Basics_Datatypes_sum [] ;
  Trunc_trunc_index_min_swap -> Trunc_trunc_index_min_minus_two [] ;
  Trunc_trunc_index_min_swap -> Overture_trunc_index_rect [] ;
  Trunc_trunc_index_min_swap -> Overture_ap [] ;
  Trunc_trunc_index_min_swap -> Overture_inverse [] ;
  Trunc_trunc_index_min_minus_two -> Trunc_trunc_index_min [] ;
  Trunc_trunc_index_min_minus_two -> Overture_idpath [] ;
  Trunc_trunc_index_min_minus_two -> Overture_paths [] ;
  Trunc_trunc_index_min -> Overture_trunc_S [] ;
  Trunc_trunc_index_min -> Overture_minus_two [] ;
  Trunc_trunc_index_min -> Overture_trunc_index [] ;
  Trunc_trunc_index_leq_transitive -> Trunc_trunc_index_leq_minus_two [] ;
  Trunc_trunc_index_leq_transitive -> Overture_tt [] ;
  Trunc_trunc_index_leq_transitive -> Overture_Empty_rec [] ;
  Trunc_trunc_index_leq_transitive -> Overture_trunc_index_ind [] ;
  Trunc_trunc_index_leq_transitive -> Overture_Transitive [] ;
  Trunc_trunc_index_leq_refl -> Trunc_trunc_index_leq [] ;
  Trunc_trunc_index_leq_refl -> Overture_tt [] ;
  Trunc_trunc_index_leq_refl -> Overture_trunc_index_ind [] ;
  Trunc_trunc_index_leq_refl -> Overture_Reflexive [] ;
  Trunc_trunc_index_leq_succ_ -> Trunc_trunc_index_leq_minus_two_n [] ;
  Trunc_trunc_index_leq_succ_ -> Overture_trunc_index_ind [] ;
  Trunc_trunc_index_leq_minus_two -> Trunc_trunc_index_leq [] ;
  Trunc_trunc_index_leq_minus_two -> Overture_Empty_rect [] ;
  Trunc_trunc_index_leq_minus_two -> Overture_trunc_S [] ;
  Trunc_trunc_index_leq_minus_two -> Overture_minus_two [] ;
  Trunc_trunc_index_leq_minus_two -> Overture_idpath [] ;
  Trunc_trunc_index_leq_minus_two -> Overture_paths [] ;
  Trunc_trunc_index_pred -> Overture_minus_two [] ;
  Trunc_trunc_index_pred -> Overture_trunc_index [] ;
  Decidable_ishprop_decpaths -> Trunc_path_ishprop [] ;
  Decidable_ishprop_decpaths -> Trunc_hprop_inhabited_contr [] ;
  Decidable_ishprop_decpaths -> Overture_Empty_rect [] ;
  Decidable_ishprop_decpaths -> Overture_path_forall [] ;
  Decidable_ishprop_decpaths -> Overture_istrunc_paths [] ;
  Decidable_ishprop_decpaths -> Decidable_hset_pathcoll [] ;
  Decidable_ishprop_decpaths -> Decidable_pathcoll_decpaths [] ;
  Decidable_ishprop_decpaths -> Basics_Datatypes_inr [] ;
  Decidable_ishprop_decpaths -> Basics_Datatypes_inl [] ;
  Trunc_trunc_index_leq_succ -> Trunc_trunc_index_leq [] ;
  Trunc_trunc_index_leq_succ -> Overture_tt [] ;
  Trunc_trunc_index_leq_succ -> Overture_trunc_index_ind [] ;
  Decidable_hset_decpaths -> Decidable_hset_pathcoll [] ;
  Decidable_hset_decpaths -> Decidable_pathcoll_decpaths [] ;
  Trunc_trunc_index_leq_minus_two_n -> Trunc_trunc_index_leq [] ;
  Trunc_trunc_index_leq_minus_two_n -> Overture_tt [] ;
  Trunc_trunc_index_leq_minus_two_n -> Overture_minus_two [] ;
  Decidable_pathcoll_hset -> Overture_istrunc_paths [] ;
  Decidable_pathcoll_hset -> Decidable_collapsible_hprop [] ;
  Decidable_pathcoll_hset -> Decidable_PathCollapsible [] ;
  Trunc_trunc_index_leq -> Overture_Unit [] ;
  Trunc_trunc_index_leq -> Overture_Empty [] ;
  Trunc_trunc_index_leq -> Overture_trunc_index [] ;
  Decidable_collapsible_hprop -> Trunc_path_ishprop [] ;
  Decidable_collapsible_hprop -> Decidable_Build_Collapsible [] ;
  Decidable_collapsible_hprop -> Decidable_Collapsible [] ;
  Trunc_trunc_index_add_succ -> Trunc_trunc_index_add [] ;
  Trunc_trunc_index_add_succ -> Overture_trunc_index_rect [] ;
  Trunc_trunc_index_add_succ -> Overture_ap [] ;
  Decidable_hset_pathcoll -> Trunc_hprop_allpath [] ;
  Decidable_hset_pathcoll -> PathGroupoids_whiskerL [] ;
  Decidable_hset_pathcoll -> Decidable_path_coll [] ;
  Decidable_hset_pathcoll -> Decidable_collapse [] ;
  Decidable_hset_pathcoll -> Decidable_wconst [] ;
  Trunc_trunc_index_add_minus_two -> Trunc_trunc_index_add [] ;
  Trunc_trunc_index_add_minus_two -> Overture_trunc_index_rect [] ;
  Trunc_trunc_index_add_minus_two -> Overture_ap [] ;
  Decidable_pathcoll_decpaths -> Decidable_collapsible_decidable [] ;
  Decidable_pathcoll_decpaths -> Decidable_PathCollapsible [] ;
  Decidable_pathcoll_decpaths -> Decidable_dec_paths [] ;
  Trunc_trunc_index_add -> Overture_trunc_S [] ;
  Trunc_trunc_index_add -> Overture_trunc_index [] ;
  Decidable_collapsible_decidable -> Overture_idpath [] ;
  Decidable_collapsible_decidable -> Overture_const [] ;
  Decidable_collapsible_decidable -> Decidable_Build_Collapsible [] ;
  Decidable_collapsible_decidable -> Decidable_Collapsible [] ;
  Decidable_collapsible_decidable -> Decidable_dec [] ;
  Trunc_trunc_index_to_num_int -> Trunc_trunc_index_to_int [] ;
  Trunc_trunc_index_to_num_int -> Numeral_IntDec [] ;
  Trunc_trunc_index_to_num_int -> Numeral_int [] ;
  Decidable_path_coll -> Decidable_PathCollapsible [] ;
  Trunc_trunc_index_to_int -> Trunc_trunc_index_to_little_uint [] ;
  Trunc_trunc_index_to_int -> Overture_S [] ;
  Trunc_trunc_index_to_int -> Overture_O [] ;
  Trunc_trunc_index_to_int -> Basics_Nat_to_uint [] ;
  Trunc_trunc_index_to_int -> Basics_Decimal_Neg [] ;
  Trunc_trunc_index_to_int -> Basics_Decimal_Pos [] ;
  Trunc_trunc_index_to_int -> Basics_Decimal_int [] ;
  Decidable_PathCollapsible -> Decidable_Collapsible [] ;
  Decidable_wconst_collapse -> Decidable_Collapsible [] ;
  Trunc_trunc_index_to_little_uint -> Basics_Decimal_Little_succ [] ;
  Trunc_trunc_index_to_little_uint -> Overture_trunc_index [] ;
  Trunc_num_int_to_trunc_index -> Trunc_int_to_trunc_index [] ;
  Trunc_num_int_to_trunc_index -> Numeral_int [] ;
  Decidable_collapse -> Decidable_Collapsible [] ;
  Trunc_int_to_trunc_index -> Trunc_nat_to_trunc_index [] ;
  Trunc_int_to_trunc_index -> Basics_Nat_of_uint [] ;
  Trunc_int_to_trunc_index -> Basics_Decimal_int [] ;
  Trunc_int_to_trunc_index -> Basics_Datatypes_None [] ;
  Trunc_int_to_trunc_index -> Basics_Datatypes_Some [] ;
  Trunc_int_to_trunc_index -> Basics_Datatypes_option [] ;
  Decidable_Collapsible_sind -> Decidable_Build_Collapsible [] ;
  Decidable_Collapsible_sind -> Decidable_Collapsible [] ;
  Trunc_nat_to_trunc_index -> Trunc_trunc_index_inc [] ;
  Trunc_nat_to_trunc_index -> Overture_minus_two [] ;
  Decidable_Collapsible_rec -> Decidable_Collapsible_rect [] ;
  Trunc_trunc_index_inc_agree -> Trunc_trunc_index_inc__succ [] ;
  Trunc_trunc_index_inc_agree -> Trunc_trunc_index_inc [] ;
  Trunc_trunc_index_inc_agree -> Overture_ap [] ;
  Trunc_trunc_index_inc_agree -> Overture_concat [] ;
  Trunc_trunc_index_inc_agree -> Overture_inverse [] ;
  Decidable_Collapsible_ind -> Decidable_Build_Collapsible [] ;
  Decidable_Collapsible_ind -> Decidable_Collapsible [] ;
  Trunc_trunc_index_inc__succ -> Trunc_trunc_index_inc_ [] ;
  Trunc_trunc_index_inc__succ -> Overture_nat_rect [] ;
  Trunc_trunc_index_inc__succ -> Overture_idpath [] ;
  Trunc_trunc_index_inc__succ -> Overture_paths [] ;
  Decidable_Collapsible_rect -> Decidable_Build_Collapsible [] ;
  Decidable_Collapsible_rect -> Decidable_Collapsible [] ;
  Decidable_Build_Collapsible -> Decidable_WeaklyConstant [] ;
  Trunc_trunc_index_inc_ -> Overture_nat [] ;
  Trunc_trunc_index_inc_ -> Overture_trunc_S [] ;
  Trunc_trunc_index_inc_ -> Overture_trunc_index [] ;
  Decidable_Collapsible -> Decidable_WeaklyConstant [] ;
  Trunc_trunc_index_inc -> Overture_nat [] ;
  Trunc_trunc_index_inc -> Overture_trunc_S [] ;
  Trunc_trunc_index_inc -> Overture_trunc_index [] ;
  Decidable_wconst_through_hprop -> Trunc_path_ishprop [] ;
  Decidable_wconst_through_hprop -> Overture_ap [] ;
  Decidable_wconst_through_hprop -> Decidable_WeaklyConstant [] ;
  Tactics_issig_isequiv -> Overture_Build_Equiv [] ;
  Tactics_issig_isequiv -> Overture_Equiv [] ;
  Tactics_issig_isequiv -> Overture_Build_IsEquiv [] ;
  Tactics_issig_isequiv -> Overture_exist [] ;
  Tactics_issig_isequiv -> Overture_sig [] ;
  Decidable_wconst -> Decidable_WeaklyConstant [] ;
  Tactics_issig_equiv -> Overture_Build_Equiv [] ;
  Tactics_issig_equiv -> Overture_Equiv [] ;
  Tactics_issig_equiv -> Overture_Build_IsEquiv [] ;
  Tactics_issig_equiv -> Overture_exist [] ;
  Tactics_issig_equiv -> Overture_sig [] ;
  Tactics_issig_contr -> Overture_IsTrunc [] ;
  Tactics_issig_contr -> Overture_minus_two [] ;
  Tactics_issig_contr -> Overture_Build_Contr [] ;
  Tactics_issig_contr -> Overture_Build_Equiv [] ;
  Tactics_issig_contr -> Overture_Equiv [] ;
  Tactics_issig_contr -> Overture_Build_IsEquiv [] ;
  Tactics_issig_contr -> Overture_exist [] ;
  Tactics_issig_contr -> Overture_sig [] ;
  Decidable_WeaklyConstant -> Overture_paths [] ;
  Tactics_is_global_axiom_funext -> Tactics_Build_IsGlobalAxiom [] ;
  Tactics_is_global_axiom_funext -> Tactics_IsGlobalAxiom [] ;
  Tactics_is_global_axiom_funext -> Overture_Funext [] ;
  Decidable_decidablepaths_equiv_ -> Overture_Equiv [] ;
  Decidable_decidablepaths_equiv_ -> Decidable_decidablepaths_equiv [] ;
  Decidable_decidablepaths_equiv -> Overture_equiv_inv [] ;
  Decidable_decidablepaths_equiv -> Overture_concat [] ;
  Decidable_decidablepaths_equiv -> Overture_inverse [] ;
  Decidable_decidablepaths_equiv -> Decidable_DecidablePaths [] ;
  Decidable_decidablepaths_equiv -> Basics_Datatypes_inr [] ;
  Decidable_decidablepaths_equiv -> Basics_Datatypes_inl [] ;
  Tactics_IsGlobalAxiom_sind -> Tactics_IsGlobalAxiom [] ;
  Decidable_decidable_equiv_ -> Overture_Equiv [] ;
  Decidable_decidable_equiv_ -> Decidable_decidable_equiv [] ;
  Tactics_IsGlobalAxiom_rec -> Tactics_IsGlobalAxiom_rect [] ;
  Decidable_decidable_equiv -> Overture_IsEquiv [] ;
  Decidable_decidable_equiv -> Decidable_Decidable [] ;
  Decidable_decidable_equiv -> Basics_Datatypes_inr [] ;
  Decidable_decidable_equiv -> Basics_Datatypes_inl [] ;
  Tactics_IsGlobalAxiom_ind -> Tactics_IsGlobalAxiom [] ;
  Decidable_decidable_empty -> Decidable_Decidable [] ;
  Decidable_decidable_empty -> Basics_Datatypes_inr [] ;
  Tactics_IsGlobalAxiom_rect -> Tactics_IsGlobalAxiom [] ;
  Decidable_decidablepaths_hprop -> Overture_istrunc_paths [] ;
  Decidable_decidablepaths_hprop -> Decidable_decidable_contr [] ;
  Decidable_decidablepaths_hprop -> Decidable_DecidablePaths [] ;
  Decidable_decidablepaths_hprop -> Decidable_dec [] ;
  Decidable_decidable_contr -> Overture_IsTrunc [] ;
  Decidable_decidable_contr -> Overture_minus_two [] ;
  Decidable_decidable_contr -> Decidable_Decidable [] ;
  Decidable_decidable_contr -> Basics_Datatypes_inl [] ;
  Decidable_decide_rel -> Decidable_Decidable [] ;
  Decidable_stable_decidable -> Overture_Empty_rect [] ;
  Decidable_stable_decidable -> Decidable_Stable [] ;
  Decidable_stable_decidable -> Decidable_dec [] ;
  Decidable_stable -> Decidable_Stable [] ;
  PathGroupoids_ap_transport_pV_idmap -> PathGroupoids_transport_pV [] ;
  PathGroupoids_ap_transport_pV_idmap -> Overture_paths_rect [] ;
  PathGroupoids_ap_transport_Vp_idmap -> PathGroupoids_inverse2 [] ;
  PathGroupoids_ap_transport_Vp_idmap -> PathGroupoids_transport_Vp [] ;
  PathGroupoids_ap_transport_Vp_idmap -> Overture_paths_rect [] ;
  Decidable_Stable -> Overture_not [] ;
  Decidable_dec_paths -> Decidable_DecidablePaths [] ;
  PathGroupoids_apD02_pp -> PathGroupoids_apD02 [] ;
  PathGroupoids_apD02_pp -> PathGroupoids_whiskerR [] ;
  PathGroupoids_apD02_pp -> PathGroupoids_whiskerL [] ;
  PathGroupoids_apD02_pp -> PathGroupoids_transport2_p2p [] ;
  PathGroupoids_apD02_pp -> PathGroupoids_concat_p_pp [] ;
  PathGroupoids_apD02_const -> PathGroupoids_apD02 [] ;
  PathGroupoids_apD02_const -> PathGroupoids_ap02 [] ;
  PathGroupoids_apD02_const -> PathGroupoids_whiskerL [] ;
  PathGroupoids_apD02_const -> PathGroupoids_apD_const [] ;
  PathGroupoids_apD02_const -> PathGroupoids_transport2_const [] ;
  PathGroupoids_apD02_const -> PathGroupoids_concat_p_pp [] ;
  Decidable_DecidablePaths -> Overture_paths [] ;
  Decidable_DecidablePaths -> Decidable_Decidable [] ;
  Decidable_dec -> Decidable_Decidable [] ;
  PathGroupoids_apD02 -> PathGroupoids_transport2 [] ;
  PathGroupoids_apD02 -> PathGroupoids_concat_1p [] ;
  PathGroupoids_apD02 -> Overture_apD [] ;
  PathGroupoids_apD02 -> Overture_inverse [] ;
  PathGroupoids_ap02_p2p -> PathGroupoids_ap02 [] ;
  PathGroupoids_ap02_p2p -> PathGroupoids_concat2 [] ;
  PathGroupoids_ap02_p2p -> PathGroupoids_ap_pp [] ;
  PathGroupoids_ap02_p2p -> Overture_inverse [] ;
  Decidable_Decidable -> Overture_not [] ;
  Decidable_Decidable -> Basics_Datatypes_sum [] ;
  Basics_Datatypes_app -> Basics_Datatypes_cons [] ;
  Basics_Datatypes_app -> Basics_Datatypes_list [] ;
  PathGroupoids_ap02_pp -> PathGroupoids_ap02 [] ;
  PathGroupoids_ap02_pp -> Overture_concat [] ;
  Basics_Datatypes_list_rect -> Basics_Datatypes_cons [] ;
  Basics_Datatypes_list_rect -> Basics_Datatypes_nil [] ;
  Basics_Datatypes_list_rect -> Basics_Datatypes_list [] ;
  PathGroupoids_ap02 -> Overture_ap [] ;
  PathGroupoids_eckmann_hilton -> PathGroupoids_concat_whisker [] ;
  PathGroupoids_eckmann_hilton -> PathGroupoids_whiskerL_1p [] ;
  PathGroupoids_eckmann_hilton -> PathGroupoids_whiskerR_p1 [] ;
  PathGroupoids_triangulator -> PathGroupoids_whiskerR [] ;
  PathGroupoids_triangulator -> PathGroupoids_whiskerL [] ;
  PathGroupoids_triangulator -> PathGroupoids_concat_p_pp [] ;
  PathGroupoids_triangulator -> PathGroupoids_concat_1p [] ;
  PathGroupoids_triangulator -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_pentagon -> PathGroupoids_whiskerR [] ;
  PathGroupoids_pentagon -> PathGroupoids_whiskerL [] ;
  PathGroupoids_pentagon -> PathGroupoids_concat_p_pp [] ;
  Datatypes_iff -> Basics_Datatypes_prod [] ;
  PathGroupoids_concat_whisker -> PathGroupoids_whiskerR [] ;
  PathGroupoids_concat_whisker -> PathGroupoids_whiskerL [] ;
  PathGroupoids_concat_whisker -> PathGroupoids_concat_1p [] ;
  PathGroupoids_concat_whisker -> Overture_inverse [] ;
  Basics_Datatypes_prod_curry -> Basics_Datatypes_prod [] ;
  PathGroupoids_concat_concat2 -> PathGroupoids_concat2 [] ;
  PathGroupoids_whiskerR_VpR -> PathGroupoids_whiskerR [] ;
  PathGroupoids_whiskerR_VpR -> PathGroupoids_concat_pV_p [] ;
  Basics_Datatypes_prod_rect -> Basics_Datatypes_pair [] ;
  Basics_Datatypes_prod_rect -> Basics_Datatypes_prod [] ;
  PathGroupoids_whiskerR_pVR -> PathGroupoids_whiskerR [] ;
  PathGroupoids_whiskerR_pVR -> PathGroupoids_concat_pp_V [] ;
  Basics_Datatypes_snd -> Basics_Datatypes_prod [] ;
  PathGroupoids_whiskerL_pVL -> PathGroupoids_whiskerL [] ;
  PathGroupoids_whiskerL_pVL -> PathGroupoids_concat_p_Vp [] ;
  Basics_Datatypes_fst -> Basics_Datatypes_prod [] ;
  PathGroupoids_whiskerL_VpL -> PathGroupoids_whiskerL [] ;
  PathGroupoids_whiskerL_VpL -> PathGroupoids_concat_V_pp [] ;
  PathGroupoids_whiskerR_pp -> PathGroupoids_whiskerR [] ;
  PathGroupoids_whiskerL_pp -> PathGroupoids_whiskerL [] ;
  Basics_Datatypes_sum_rect -> Basics_Datatypes_inr [] ;
  Basics_Datatypes_sum_rect -> Basics_Datatypes_inl [] ;
  Basics_Datatypes_sum_rect -> Basics_Datatypes_sum [] ;
  PathGroupoids_cancel2R -> PathGroupoids_whiskerR_p1 [] ;
  PathGroupoids_cancel2R -> PathGroupoids_whiskerL [] ;
  PathGroupoids_cancel2R -> Overture_paths_rect [] ;
  PathGroupoids_cancel2L -> PathGroupoids_whiskerL_1p [] ;
  PathGroupoids_cancel2L -> PathGroupoids_whiskerR [] ;
  PathGroupoids_cancel2L -> Overture_paths_rect [] ;
  PathGroupoids_concat2_1p -> PathGroupoids_whiskerL [] ;
  Basics_Datatypes_option_rect -> Basics_Datatypes_None [] ;
  Basics_Datatypes_option_rect -> Basics_Datatypes_Some [] ;
  Basics_Datatypes_option_rect -> Basics_Datatypes_option [] ;
  PathGroupoids_concat2_p1 -> PathGroupoids_whiskerR [] ;
  PathGroupoids_whiskerL_1p_1 -> PathGroupoids_whiskerL_1p [] ;
  PathGroupoids_whiskerL_1p_1 -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_whiskerR_p1_1 -> PathGroupoids_whiskerR_p1 [] ;
  PathGroupoids_whiskerR_p1_1 -> PathGroupoids_concat_1p [] ;
  PathGroupoids_whiskerL_1p -> PathGroupoids_whiskerL [] ;
  PathGroupoids_whiskerL_1p -> PathGroupoids_concat_1p [] ;
  PathGroupoids_whiskerL_1p -> Overture_inverse [] ;
  PathGroupoids_whiskerL_p1 -> PathGroupoids_whiskerL [] ;
  Contractible_contr_contr -> Overture_path_forall [] ;
  Contractible_contr_contr -> Overture_contr [] ;
  Contractible_contr_contr -> Overture_Build_Contr [] ;
  Contractible_contr_contr -> Contractible_path2_contr [] ;
  PathGroupoids_whiskerR_1p -> PathGroupoids_whiskerR [] ;
  Contractible_contr_change_center -> Overture_Build_Contr [] ;
  Contractible_contr_change_center -> Contractible_path_contr [] ;
  PathGroupoids_whiskerR_p1 -> PathGroupoids_whiskerR [] ;
  PathGroupoids_whiskerR_p1 -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_whiskerR_p1 -> Overture_inverse [] ;
  Contractible_contr_retract -> Overture_IsTrunc [] ;
  Contractible_contr_retract -> Overture_minus_two [] ;
  Contractible_contr_retract -> Overture_Build_Contr [] ;
  Contractible_contr_retract -> Overture_ap [] ;
  Contractible_contr_retract -> Overture_concat [] ;
  Contractible_contr_dom_equiv -> Overture_IsTrunc [] ;
  Contractible_contr_dom_equiv -> Overture_minus_two [] ;
  Contractible_contr_dom_equiv -> Overture_ap [] ;
  Contractible_contr_dom_equiv -> Overture_concat [] ;
  Contractible_contr_dom_equiv -> Overture_inverse [] ;
  PathGroupoids_cancelR -> PathGroupoids_whiskerR [] ;
  PathGroupoids_cancelR -> PathGroupoids_concat_pp_V [] ;
  PathGroupoids_cancelL -> PathGroupoids_whiskerL [] ;
  PathGroupoids_cancelL -> PathGroupoids_concat_V_pp [] ;
  Contractible_ap_pr1_path_basedpaths_ -> Overture_ap [] ;
  Contractible_ap_pr1_path_basedpaths_ -> Overture_inverse [] ;
  Contractible_ap_pr1_path_basedpaths_ -> Overture_proj1 [] ;
  Contractible_ap_pr1_path_basedpaths_ -> Contractible_path_basedpaths_ [] ;
  PathGroupoids_whiskerR -> PathGroupoids_concat2 [] ;
  Contractible_ap_pr1_path_basedpaths -> Overture_ap [] ;
  Contractible_ap_pr1_path_basedpaths -> Overture_proj1 [] ;
  Contractible_ap_pr1_path_basedpaths -> Contractible_path_basedpaths [] ;
  PathGroupoids_whiskerL -> PathGroupoids_concat2 [] ;
  Contractible_ap_pr1_path_contr_basedpaths_ -> Overture_ap [] ;
  Contractible_ap_pr1_path_contr_basedpaths_ -> Overture_proj1 [] ;
  Contractible_ap_pr1_path_contr_basedpaths_ -> Contractible_contr_basedpaths_ [] ;
  Contractible_ap_pr1_path_contr_basedpaths_ -> Contractible_path_contr [] ;
  PathGroupoids_concat_Vp_inverse2 -> PathGroupoids_inverse2 [] ;
  PathGroupoids_concat_Vp_inverse2 -> PathGroupoids_concat2 [] ;
  PathGroupoids_concat_Vp_inverse2 -> PathGroupoids_concat_Vp [] ;
  Contractible_ap_pr1_path_contr_basedpaths -> Overture_ap [] ;
  Contractible_ap_pr1_path_contr_basedpaths -> Overture_proj1 [] ;
  Contractible_ap_pr1_path_contr_basedpaths -> Contractible_contr_basedpaths [] ;
  Contractible_ap_pr1_path_contr_basedpaths -> Contractible_path_contr [] ;
  Contractible_contr_basedpaths_ -> Overture_IsTrunc [] ;
  Contractible_contr_basedpaths_ -> Overture_minus_two [] ;
  Contractible_contr_basedpaths_ -> Overture_Build_Contr [] ;
  Contractible_contr_basedpaths_ -> Contractible_path_basedpaths_ [] ;
  PathGroupoids_concat_pV_inverse2 -> PathGroupoids_inverse2 [] ;
  PathGroupoids_concat_pV_inverse2 -> PathGroupoids_concat2 [] ;
  PathGroupoids_concat_pV_inverse2 -> PathGroupoids_concat_pV [] ;
  Contractible_path_basedpaths_ -> Overture_idpath [] ;
  Contractible_path_basedpaths_ -> Overture_paths [] ;
  Contractible_path_basedpaths_ -> Overture_exist [] ;
  Contractible_path_basedpaths_ -> Overture_sig [] ;
  PathGroupoids_ap_pp_concat_Vp -> PathGroupoids_concat2 [] ;
  PathGroupoids_ap_pp_concat_Vp -> PathGroupoids_ap_V [] ;
  PathGroupoids_ap_pp_concat_Vp -> PathGroupoids_ap_pp [] ;
  PathGroupoids_ap_pp_concat_Vp -> PathGroupoids_concat_Vp [] ;
  Contractible_contr_basedpaths_etashort -> Contractible_contr_basedpaths [] ;
  PathGroupoids_ap_pp_concat_pV -> PathGroupoids_concat2 [] ;
  PathGroupoids_ap_pp_concat_pV -> PathGroupoids_ap_V [] ;
  PathGroupoids_ap_pp_concat_pV -> PathGroupoids_ap_pp [] ;
  PathGroupoids_ap_pp_concat_pV -> PathGroupoids_concat_pV [] ;
  PathGroupoids_inverse2 -> Overture_ap [] ;
  PathGroupoids_inverse2 -> Overture_inverse [] ;
  Contractible_contr_basedpaths -> Overture_IsTrunc [] ;
  Contractible_contr_basedpaths -> Overture_minus_two [] ;
  Contractible_contr_basedpaths -> Overture_Build_Contr [] ;
  Contractible_contr_basedpaths -> Contractible_path_basedpaths [] ;
  Contractible_path_basedpaths -> Overture_idpath [] ;
  Contractible_path_basedpaths -> Overture_paths [] ;
  Contractible_path_basedpaths -> Overture_exist [] ;
  Contractible_path_basedpaths -> Overture_sig [] ;
  PathGroupoids_concat2_ap_ap -> PathGroupoids_concat2 [] ;
  PathGroupoids_concat2_ap_ap -> Overture_ap [] ;
  PathGroupoids_concat2_ap_ap -> Overture_paths_rect [] ;
  Contractible_contr_paths_contr -> Overture_Build_Contr [] ;
  Contractible_contr_paths_contr -> Contractible_path2_contr [] ;
  PathGroupoids_concat2 -> Overture_concat [] ;
  Contractible_path2_contr -> PathGroupoids_concat_Vp [] ;
  Contractible_path2_contr -> Contractible_path_contr [] ;
  PathGroupoids_apD_compose_ -> PathGroupoids_transport_compose [] ;
  PathGroupoids_apD_compose_ -> Overture_apD [] ;
  PathGroupoids_apD_compose_ -> Overture_concat [] ;
  PathGroupoids_apD_compose_ -> Overture_inverse [] ;
  Contractible_path_contr -> Overture_IsTrunc [] ;
  Contractible_path_contr -> Overture_minus_two [] ;
  Contractible_path_contr -> Overture_concat [] ;
  Contractible_path_contr -> Overture_inverse [] ;
  PathGroupoids_apD_compose -> PathGroupoids_transport_compose [] ;
  PathGroupoids_apD_compose -> Overture_apD [] ;
  PathGroupoids_apD_compose -> Overture_concat [] ;
  PathGroupoids_apD_const -> PathGroupoids_transport_const [] ;
  PathGroupoids_apD_const -> Overture_apD [] ;
  PathGroupoids_apD_const -> Overture_ap [] ;
  PathGroupoids_apD_const -> Overture_concat [] ;
  PathGroupoids_transport_transport -> Overture_transport [] ;
  PathGroupoids_transport_transport -> Overture_idpath [] ;
  PathGroupoids_transport_idmap_ap -> Overture_ap [] ;
  PathGroupoids_transport_idmap_ap -> Overture_transport [] ;
  PathGroupoids_transport_precompose -> Overture_ap [] ;
  PathGroupoids_transport_precompose -> Overture_transport [] ;
  PathGroupoids_transport_apD_transportD -> PathGroupoids_transportD [] ;
  PathGroupoids_transport_apD_transportD -> Overture_apD [] ;
  PathGroupoids_transportD_compose -> PathGroupoids_transport_compose [] ;
  PathGroupoids_transportD_compose -> PathGroupoids_transportD [] ;
  PathGroupoids_transportD_compose -> Overture_inverse [] ;
  PathGroupoids_transportD_compose -> Overture_composeD [] ;
  PathGroupoids_transport_compose -> Overture_ap [] ;
  PathGroupoids_transport_compose -> Overture_transport [] ;
  PathGroupoids_transport2_const -> PathGroupoids_transport_const [] ;
  PathGroupoids_transport2_const -> PathGroupoids_transport2 [] ;
  PathGroupoids_transport2_const -> PathGroupoids_concat_1p [] ;
  PathGroupoids_transport2_const -> Overture_inverse [] ;
  PathGroupoids_transport_const -> Overture_transport [] ;
  PathGroupoids_transport_const -> Overture_idpath [] ;
  PathGroupoids_apD_V -> PathGroupoids_moveR_transport_V [] ;
  PathGroupoids_apD_V -> Overture_apD [] ;
  PathGroupoids_apD_pp -> PathGroupoids_transport_pp [] ;
  PathGroupoids_apD_pp -> Overture_apD [] ;
  PathGroupoids_apD_pp -> Overture_ap [] ;
  PathGroupoids_transport_pV_ap -> PathGroupoids_transport_pV [] ;
  PathGroupoids_transport_pV_ap -> Overture_apD [] ;
  PathGroupoids_ap_transport_pV -> PathGroupoids_transport_pV [] ;
  PathGroupoids_ap_transportD2 -> PathGroupoids_transportD2 [] ;
  PathGroupoids_ap_transportD2 -> Overture_paths_rect [] ;
  PathGroupoids_ap_transportD -> PathGroupoids_transportD [] ;
  PathGroupoids_ap_transportD -> Overture_paths_rect [] ;
  PathGroupoids_ap_transport -> Overture_transport [] ;
  PathGroupoids_ap_transport -> Overture_paths_rect [] ;
  PathGroupoids_concat_AT -> PathGroupoids_transport2 [] ;
  PathGroupoids_concat_AT -> PathGroupoids_concat_1p [] ;
  PathGroupoids_concat_AT -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_concat_AT -> Overture_inverse [] ;
  PathGroupoids_transport2_V -> PathGroupoids_transport2 [] ;
  PathGroupoids_transport2_V -> Overture_inverse [] ;
  PathGroupoids_transport2_p2p -> PathGroupoids_transport2 [] ;
  PathGroupoids_transport2_p2p -> Overture_concat [] ;
  PathGroupoids_transport2_is_ap10 -> PathGroupoids_transport2 [] ;
  PathGroupoids_transport2_is_ap10 -> Overture_ap10 [] ;
  PathGroupoids_transport2 -> Overture_ap [] ;
  PathGroupoids_transport2 -> Overture_transport [] ;
  PathGroupoids_apD011 -> PathGroupoids_transportD [] ;
  PathGroupoids_apD011 -> Overture_idpath [] ;
  PathGroupoids_ap01D1 -> Overture_transport [] ;
  PathGroupoids_ap01D1 -> Overture_idpath [] ;
  PathGroupoids_ap011D -> Overture_transport [] ;
  PathGroupoids_ap011D -> Overture_idpath [] ;
  PathGroupoids_ap011 -> Overture_idpath [] ;
  PathGroupoids_ap011 -> Overture_paths [] ;
  PathGroupoids_transportD2 -> Overture_transport [] ;
  PathGroupoids_transportD -> Overture_transport [] ;
  PathGroupoids_ap11_is_ap10_ap01 -> Overture_ap11 [] ;
  PathGroupoids_ap11_is_ap10_ap01 -> Overture_ap10 [] ;
  PathGroupoids_ap11_is_ap10_ap01 -> Overture_ap [] ;
  PathGroupoids_ap11_is_ap10_ap01 -> Overture_concat [] ;
  PathGroupoids_ap11_is_ap10_ap01 -> Overture_paths_rect [] ;
  PathGroupoids_paths_ind_r_transport -> Overture_transport [] ;
  PathGroupoids_paths_ind_r_transport -> Overture_inverse [] ;
  PathGroupoids_paths_ind_r_transport -> Overture_paths_ind_r [] ;
  PathGroupoids_paths_ind_transport -> Overture_transport [] ;
  PathGroupoids_paths_ind_transport -> Overture_paths_ind [] ;
  PathGroupoids_paths_rect_transport -> Overture_transport [] ;
  PathGroupoids_paths_rect_transport -> Overture_paths_rect [] ;
  PathGroupoids_moveL_transport_V_1 -> PathGroupoids_transport_Vp [] ;
  PathGroupoids_moveL_transport_V_1 -> PathGroupoids_moveL_transport_V [] ;
  PathGroupoids_ap_transport_transport_pV -> PathGroupoids_transport_pV [] ;
  PathGroupoids_ap_transport_transport_pV -> PathGroupoids_moveL_transport_V [] ;
  PathGroupoids_transport_VpV -> PathGroupoids_transport_Vp [] ;
  PathGroupoids_transport_VpV -> PathGroupoids_transport_pV [] ;
  PathGroupoids_transport_pVp -> PathGroupoids_transport_Vp [] ;
  PathGroupoids_transport_pVp -> PathGroupoids_transport_pV [] ;
  PathGroupoids_transport_p_pp -> PathGroupoids_transport_pp [] ;
  PathGroupoids_transport_p_pp -> PathGroupoids_concat_p_pp [] ;
  PathGroupoids_transport_p_pp -> Overture_ap [] ;
  PathGroupoids_transport_Vp -> PathGroupoids_transport_pp [] ;
  PathGroupoids_transport_Vp -> PathGroupoids_concat_pV [] ;
  PathGroupoids_transport_Vp -> Overture_ap [] ;
  PathGroupoids_transport_pV -> PathGroupoids_transport_pp [] ;
  PathGroupoids_transport_pV -> PathGroupoids_concat_Vp [] ;
  PathGroupoids_transport_pV -> Overture_ap [] ;
  PathGroupoids_transport_pp -> Overture_transport [] ;
  PathGroupoids_transport_pp -> Overture_concat [] ;
  PathGroupoids_transport_1 -> Overture_transport [] ;
  PathGroupoids_transport_1 -> Overture_idpath [] ;
  PathGroupoids_ap10_ap_postcompose -> PathGroupoids_apD10_ap_postcompose [] ;
  PathGroupoids_ap10_ap_postcompose -> Overture_ap10 [] ;
  PathGroupoids_apD10_ap_postcompose -> Overture_apD10 [] ;
  PathGroupoids_apD10_ap_postcompose -> Overture_ap [] ;
  PathGroupoids_ap10_ap_precompose -> PathGroupoids_apD10_ap_precompose [] ;
  PathGroupoids_ap10_ap_precompose -> Overture_ap10 [] ;
  PathGroupoids_apD10_ap_precompose -> Overture_apD10 [] ;
  PathGroupoids_apD10_ap_precompose -> Overture_ap [] ;
  PathGroupoids_apD10_ap_precompose -> Overture_composeD [] ;
  PathGroupoids_ap10_V -> PathGroupoids_apD10_V [] ;
  PathGroupoids_ap10_V -> Overture_ap10 [] ;
  PathGroupoids_ap10_pp -> PathGroupoids_apD10_pp [] ;
  PathGroupoids_ap10_pp -> Overture_ap10 [] ;
  PathGroupoids_ap10_1 -> Overture_ap10 [] ;
  PathGroupoids_apD10_V -> Overture_apD10 [] ;
  PathGroupoids_apD10_V -> Overture_inverse [] ;
  PathGroupoids_apD10_pp -> Overture_apD10 [] ;
  PathGroupoids_apD10_pp -> Overture_concat [] ;
  PathGroupoids_apD10_1 -> Overture_apD10 [] ;
  PathGroupoids_concat_p1_1 -> PathGroupoids_inv_V [] ;
  PathGroupoids_concat_p1_1 -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_concat_p1_1 -> Overture_ap [] ;
  PathGroupoids_concat_p1_1 -> Overture_internal_paths_rew [] ;
  PathGroupoids_concat_1p_1 -> PathGroupoids_inv_V [] ;
  PathGroupoids_concat_1p_1 -> PathGroupoids_concat_1p [] ;
  PathGroupoids_concat_1p_1 -> Overture_ap [] ;
  PathGroupoids_concat_1p_1 -> Overture_internal_paths_rew [] ;
  PathGroupoids_concat_p_A1p -> PathGroupoids_concat_1p [] ;
  PathGroupoids_concat_p_A1p -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_concat_p_A1p -> Overture_ap [] ;
  PathGroupoids_concat_p_A1p -> Overture_internal_paths_rew_r [] ;
  PathGroupoids_concat_pp_A1 -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_concat_pp_A1 -> Overture_ap [] ;
  PathGroupoids_concat_pp_A1 -> Overture_internal_paths_rew_r [] ;
  PathGroupoids_concat_A1_pp -> PathGroupoids_concat_1p [] ;
  PathGroupoids_concat_A1_pp -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_concat_A1_pp -> Overture_ap [] ;
  PathGroupoids_concat_A1_pp -> Overture_internal_paths_rew_r [] ;
  PathGroupoids_concat_pA1_p -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_concat_pA1_p -> Overture_ap [] ;
  PathGroupoids_concat_pA1_p -> Overture_internal_paths_rew_r [] ;
  PathGroupoids_concat_pp_A1p -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_concat_pp_A1p -> Overture_ap [] ;
  PathGroupoids_concat_pp_A1p -> Overture_internal_paths_rew_r [] ;
  PathGroupoids_concat_pA1_pp -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_concat_pA1_pp -> Overture_ap [] ;
  PathGroupoids_concat_pA1_pp -> Overture_internal_paths_rew_r [] ;
  PathGroupoids_concat_A_pp -> PathGroupoids_concat_1p [] ;
  PathGroupoids_concat_A_pp -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_concat_A_pp -> Overture_ap [] ;
  PathGroupoids_concat_A_pp -> Overture_internal_paths_rew_r [] ;
  PathGroupoids_concat_pA_p -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_concat_pA_p -> Overture_ap [] ;
  PathGroupoids_concat_pA_p -> Overture_internal_paths_rew_r [] ;
  PathGroupoids_concat_pA_pp -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_concat_pA_pp -> Overture_ap [] ;
  PathGroupoids_concat_pA_pp -> Overture_internal_paths_rew_r [] ;
  PathGroupoids_concat_pA1 -> PathGroupoids_concat_1p [] ;
  PathGroupoids_concat_pA1 -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_concat_pA1 -> Overture_ap [] ;
  PathGroupoids_concat_pA1 -> Overture_inverse [] ;
  PathGroupoids_ap_homotopic_id -> PathGroupoids_concat_A1p [] ;
  PathGroupoids_ap_homotopic_id -> PathGroupoids_moveL_pV [] ;
  PathGroupoids_concat_A1p -> PathGroupoids_concat_1p [] ;
  PathGroupoids_concat_A1p -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_concat_A1p -> Overture_ap [] ;
  PathGroupoids_concat_A1p -> Overture_inverse [] ;
  PathGroupoids_ap_homotopic -> PathGroupoids_concat_Ap [] ;
  PathGroupoids_ap_homotopic -> PathGroupoids_moveL_pV [] ;
  PathGroupoids_concat_Ap -> PathGroupoids_concat_1p [] ;
  PathGroupoids_concat_Ap -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_concat_Ap -> Overture_ap [] ;
  PathGroupoids_concat_Ap -> Overture_inverse [] ;
  PathGroupoids_ap_const -> Overture_ap [] ;
  PathGroupoids_ap_compose_ -> Overture_ap [] ;
  PathGroupoids_ap_compose -> Overture_ap [] ;
  PathGroupoids_ap_idmap -> Overture_ap [] ;
  PathGroupoids_ap_V -> Overture_ap [] ;
  PathGroupoids_ap_V -> Overture_inverse [] ;
  PathGroupoids_inverse_ap -> Overture_ap [] ;
  PathGroupoids_inverse_ap -> Overture_inverse [] ;
  PathGroupoids_ap_pp_p -> PathGroupoids_concat_pp_p [] ;
  PathGroupoids_ap_pp_p -> Overture_ap [] ;
  PathGroupoids_ap_p_pp -> PathGroupoids_concat_p_pp [] ;
  PathGroupoids_ap_p_pp -> Overture_ap [] ;
  PathGroupoids_ap_pp -> Overture_ap [] ;
  PathGroupoids_ap_pp -> Overture_concat [] ;
  PathGroupoids_apD_1 -> Overture_apD [] ;
  PathGroupoids_ap_1 -> Overture_ap [] ;
  PathGroupoids_moveL_transport_p_V -> PathGroupoids_moveL_transport_p [] ;
  PathGroupoids_moveL_transport_p_V -> PathGroupoids_moveR_transport_p [] ;
  PathGroupoids_moveL_transport_V_V -> PathGroupoids_moveL_transport_V [] ;
  PathGroupoids_moveL_transport_V_V -> PathGroupoids_moveR_transport_V [] ;
  PathGroupoids_moveR_transport_V_V -> PathGroupoids_moveL_transport_V [] ;
  PathGroupoids_moveR_transport_V_V -> PathGroupoids_moveR_transport_V [] ;
  PathGroupoids_moveR_transport_p_V -> PathGroupoids_moveL_transport_p [] ;
  PathGroupoids_moveR_transport_p_V -> PathGroupoids_moveR_transport_p [] ;
  PathGroupoids_moveL_transport_p -> Overture_transport [] ;
  PathGroupoids_moveL_transport_p -> Overture_inverse [] ;
  PathGroupoids_moveL_transport_V -> Overture_transport [] ;
  PathGroupoids_moveL_transport_V -> Overture_inverse [] ;
  PathGroupoids_moveR_transport_V -> Overture_transport [] ;
  PathGroupoids_moveR_transport_V -> Overture_inverse [] ;
  PathGroupoids_moveR_transport_p -> Overture_transport [] ;
  PathGroupoids_moveR_transport_p -> Overture_inverse [] ;
  PathGroupoids_moveR_V1 -> PathGroupoids_concat_1p [] ;
  PathGroupoids_moveR_V1 -> Overture_inverse [] ;
  PathGroupoids_moveR_1V -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_moveR_1V -> Overture_inverse [] ;
  PathGroupoids_moveR_1M -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_moveR_1M -> Overture_inverse [] ;
  PathGroupoids_moveR_M1 -> PathGroupoids_concat_1p [] ;
  PathGroupoids_moveR_M1 -> Overture_inverse [] ;
  PathGroupoids_moveL_V1 -> PathGroupoids_concat_1p [] ;
  PathGroupoids_moveL_V1 -> Overture_inverse [] ;
  PathGroupoids_moveL_1V -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_moveL_1V -> Overture_inverse [] ;
  PathGroupoids_moveL_M1 -> PathGroupoids_concat_1p [] ;
  PathGroupoids_moveL_M1 -> Overture_inverse [] ;
  PathGroupoids_moveL_1M -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_moveL_1M -> Overture_inverse [] ;
  PathGroupoids_moveL_pV -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_moveL_pV -> Overture_inverse [] ;
  PathGroupoids_moveL_Vp -> PathGroupoids_concat_1p [] ;
  PathGroupoids_moveL_Vp -> Overture_inverse [] ;
  PathGroupoids_moveL_pM -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_moveL_pM -> Overture_inverse [] ;
  PathGroupoids_moveL_Mp -> PathGroupoids_concat_1p [] ;
  PathGroupoids_moveL_Mp -> Overture_inverse [] ;
  PathGroupoids_moveR_pV -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_moveR_pV -> Overture_inverse [] ;
  PathGroupoids_moveR_Vp -> PathGroupoids_concat_1p [] ;
  PathGroupoids_moveR_Vp -> Overture_inverse [] ;
  PathGroupoids_moveR_pM -> PathGroupoids_concat_p1 [] ;
  PathGroupoids_moveR_pM -> Overture_inverse [] ;
  PathGroupoids_moveR_Mp -> PathGroupoids_concat_1p [] ;
  PathGroupoids_moveR_Mp -> Overture_inverse [] ;
  PathGroupoids_inv_V -> Overture_inverse [] ;
  PathGroupoids_inv_VV -> Overture_concat [] ;
  PathGroupoids_inv_VV -> Overture_inverse [] ;
  PathGroupoids_inv_pV -> Overture_concat [] ;
  PathGroupoids_inv_pV -> Overture_inverse [] ;
  PathGroupoids_inv_Vp -> Overture_concat [] ;
  PathGroupoids_inv_Vp -> Overture_inverse [] ;
  PathGroupoids_inv_pp -> Overture_concat [] ;
  PathGroupoids_inv_pp -> Overture_inverse [] ;
  PathGroupoids_concat_pV_p -> Overture_concat [] ;
  PathGroupoids_concat_pV_p -> Overture_inverse [] ;
  PathGroupoids_concat_pp_V -> Overture_concat [] ;
  PathGroupoids_concat_pp_V -> Overture_inverse [] ;
  PathGroupoids_concat_p_Vp -> Overture_concat [] ;
  PathGroupoids_concat_p_Vp -> Overture_inverse [] ;
  PathGroupoids_concat_V_pp -> Overture_concat [] ;
  PathGroupoids_concat_V_pp -> Overture_inverse [] ;
  PathGroupoids_concat_Vp -> Overture_concat [] ;
  PathGroupoids_concat_Vp -> Overture_inverse [] ;
  PathGroupoids_concat_pV -> Overture_concat [] ;
  PathGroupoids_concat_pV -> Overture_inverse [] ;
  PathGroupoids_concat_pp_p -> Overture_concat [] ;
  PathGroupoids_concat_p_pp -> Overture_concat [] ;
  PathGroupoids_concat_1p -> Overture_concat [] ;
  PathGroupoids_concat_p1 -> Overture_concat [] ;
  Overture_hfiber -> Overture_paths [] ;
  Overture_hfiber -> Overture_sig [] ;
  Overture_ispointed_type -> Overture_pType [] ;
  Overture_pointed_type -> Overture_pType [] ;
  Overture_Build_pType -> Overture_IsPointed [] ;
  Overture_pType -> Overture_IsPointed [] ;
  Overture_point -> Overture_IsPointed [] ;
  Overture_Unit_rect -> Overture_Unit_ind [] ;
  Overture_Unit_rec -> Overture_Unit [] ;
  Overture_Unit_ind -> Overture_tt [] ;
  Overture_Unit_ind -> Overture_Unit [] ;
  Overture_asymmetry -> Overture_Asymmetric [] ;
  Overture_Asymmetric -> Overture_complement [] ;
  Overture_irreflexivity -> Overture_Irreflexive [] ;
  Overture_Irreflexive -> Overture_complement [] ;
  Overture_Irreflexive -> Overture_Reflexive [] ;
  Overture_complement -> Overture_not [] ;
  Overture_complement -> Overture_Relation [] ;
  Overture_symmetric_neq -> Overture_not [] ;
  Overture_symmetric_neq -> Overture_inverse [] ;
  Overture_not -> Overture_Empty [] ;
  Overture_Empty_rect -> Overture_Empty_ind [] ;
  Overture_Empty_rec -> Overture_Empty [] ;
  Overture_Empty_ind -> Overture_Empty [] ;
  Overture_nat_sind -> Overture_S [] ;
  Overture_nat_sind -> Overture_O [] ;
  Overture_nat_sind -> Overture_nat [] ;
  Overture_nat_rec -> Overture_nat_rect [] ;
  Overture_nat_ind -> Overture_S [] ;
  Overture_nat_ind -> Overture_O [] ;
  Overture_nat_ind -> Overture_nat [] ;
  Overture_nat_rect -> Overture_S [] ;
  Overture_nat_rect -> Overture_O [] ;
  Overture_nat_rect -> Overture_nat [] ;
  Overture_path_forall -> Overture_isequiv_apD10 [] ;
  Overture_isequiv_apD10 -> Overture_Funext [] ;
  Overture_isequiv_apD10 -> Overture_IsEquiv [] ;
  Overture_isequiv_apD10 -> Overture_apD10 [] ;
  Overture_istrunc_paths -> Overture_IsTrunc [] ;
  Overture_istrunc_paths -> Overture_trunc_S [] ;
  Overture_Trunc_is_trunc -> Overture_IsTrunc [] ;
  Overture_IsTrunc -> Overture_IsTrunc_internal [] ;
  Overture_IsTrunc_internal -> Overture_trunc_index [] ;
  Overture_IsTrunc_internal -> Overture_Contr_internal [] ;
  Overture_trunc_index_rect -> Overture_trunc_index_ind [] ;
  Overture_trunc_index_rec -> Overture_trunc_index [] ;
  Overture_trunc_index_ind -> Overture_trunc_S [] ;
  Overture_trunc_index_ind -> Overture_minus_two [] ;
  Overture_trunc_index_ind -> Overture_trunc_index [] ;
  Overture_contr -> Overture_Contr_internal [] ;
  Overture_center -> Overture_Contr_internal [] ;
  Overture_Build_Contr -> Overture_paths [] ;
  Overture_Contr_internal -> Overture_paths [] ;
  Overture_ap10_equiv -> Overture_equiv_fun [] ;
  Overture_ap10_equiv -> Overture_ap10 [] ;
  Overture_equiv_isequiv -> Overture_Equiv [] ;
  Overture_equiv_fun -> Overture_Equiv [] ;
  Overture_Build_Equiv -> Overture_IsEquiv [] ;
  Overture_Equiv -> Overture_IsEquiv [] ;
  Overture_eisadj -> Overture_IsEquiv [] ;
  Overture_eissect -> Overture_IsEquiv [] ;
  Overture_eisretr -> Overture_IsEquiv [] ;
  Overture_equiv_inv -> Overture_IsEquiv [] ;
  Overture_Build_IsEquiv -> Overture_pointwise_paths [] ;
  Overture_Build_IsEquiv -> Overture_ap [] ;
  Overture_IsEquiv -> Overture_pointwise_paths [] ;
  Overture_IsEquiv -> Overture_ap [] ;
  Overture_apD -> Overture_transport [] ;
  Overture_apD -> Overture_idpath [] ;
  Overture_ap11 -> Overture_idpath [] ;
  Overture_ap11 -> Overture_paths [] ;
  Overture_ap10 -> Overture_apD10 [] ;
  Overture_apD10 -> Overture_pointwise_paths [] ;
  Overture_apD10 -> Overture_idpath [] ;
  Overture_symmetric_pointwise_paths -> Overture_pointwise_paths [] ;
  Overture_symmetric_pointwise_paths -> Overture_inverse [] ;
  Overture_symmetric_pointwise_paths -> Overture_Symmetric [] ;
  Overture_transitive_pointwise_paths -> Overture_pointwise_paths_concat [] ;
  Overture_transitive_pointwise_paths -> Overture_Transitive [] ;
  Overture_reflexive_pointwise_paths -> Overture_pointwise_paths [] ;
  Overture_reflexive_pointwise_paths -> Overture_idpath [] ;
  Overture_reflexive_pointwise_paths -> Overture_Reflexive [] ;
  Overture_pointwise_paths_concat -> Overture_pointwise_paths [] ;
  Overture_pointwise_paths_concat -> Overture_concat [] ;
  Overture_pointwise_paths -> Overture_paths [] ;
  Overture_ap -> Overture_idpath [] ;
  Overture_ap -> Overture_paths [] ;
  Overture_transport -> Overture_paths [] ;
  Overture_transitive_paths -> Overture_concat [] ;
  Overture_transitive_paths -> Overture_Transitive [] ;
  Overture_concat -> Overture_idpath [] ;
  Overture_concat -> Overture_paths [] ;
  Overture_paths_rect_r -> Overture_inverse [] ;
  Overture_paths_rect_r -> Overture_paths_rect [] ;
  Overture_symmetric_paths -> Overture_inverse [] ;
  Overture_symmetric_paths -> Overture_Symmetric [] ;
  Overture_inverse -> Overture_idpath [] ;
  Overture_inverse -> Overture_paths [] ;
  Overture_paths_ind_r -> Overture_idpath [] ;
  Overture_paths_ind_r -> Overture_paths [] ;
  Overture_paths_ind_ -> Overture_idpath [] ;
  Overture_paths_ind_ -> Overture_paths [] ;
  Overture_reflexive_paths -> Overture_idpath [] ;
  Overture_reflexive_paths -> Overture_paths [] ;
  Overture_reflexive_paths -> Overture_Reflexive [] ;
  Overture_paths_rew_r -> Overture_internal_paths_rew_r [] ;
  Overture_internal_paths_rew_r -> Overture_paths [] ;
  Overture_paths_rew -> Overture_internal_paths_rew [] ;
  Overture_internal_paths_rew -> Overture_paths [] ;
  Overture_paths_rect -> Overture_paths_ind [] ;
  Overture_paths_rec -> Overture_paths [] ;
  Overture_paths_ind -> Overture_idpath [] ;
  Overture_paths_ind -> Overture_paths [] ;
  Overture_iff_reflexive -> Overture_Reflexive [] ;
  Overture_iff_reflexive -> Datatypes_iff [] ;
  Overture_iff_reflexive -> Basics_Datatypes_pair [] ;
  Overture_iff_inverse -> Overture_Symmetric [] ;
  Overture_iff_inverse -> Datatypes_iff [] ;
  Overture_iff_inverse -> Basics_Datatypes_pair [] ;
  Overture_iff_compose -> Overture_Transitive [] ;
  Overture_iff_compose -> Datatypes_iff [] ;
  Overture_iff_compose -> Basics_Datatypes_pair [] ;
  Overture_uncurry -> Basics_Datatypes_prod [] ;
  Overture_sig_rec -> Overture_sig [] ;
  Overture_sig_ind -> Overture_exist [] ;
  Overture_sig_ind -> Overture_sig [] ;
  Overture_sig_rect -> Overture_exist [] ;
  Overture_sig_rect -> Overture_sig [] ;
  Overture_proj2 -> Overture_sig [] ;
  Overture_proj1 -> Overture_sig [] ;
  Overture_unfold_Type3le -> Overture_Type3le [] ;
  Overture_unfold_Type2le -> Overture_Type2le [] ;
  Overture_unfold_Type3 -> Overture_Type3 [] ;
  Overture_unfold_Type2 -> Overture_Type2 [] ;
  Overture_unfold_Type1 -> Overture_Type1 [] ;
  Overture_PreOrder_Transitive -> Overture_PreOrder [] ;
  Overture_PreOrder_Reflexive -> Overture_PreOrder [] ;
  Overture_Build_PreOrder -> Overture_Transitive [] ;
  Overture_Build_PreOrder -> Overture_Reflexive [] ;
  Overture_PreOrder -> Overture_Transitive [] ;
  Overture_PreOrder -> Overture_Reflexive [] ;
  Overture_transitivity -> Overture_Transitive [] ;
  Overture_Transitive -> Overture_Relation [] ;
  Overture_symmetry -> Overture_Symmetric [] ;
  Overture_Symmetric -> Overture_Relation [] ;
  Overture_reflexivity -> Overture_Reflexive [] ;
  Overture_Reflexive -> Overture_Relation [] ;
  Numeral_int_of_int -> Numeral_int [] ;
  Numeral_uint_of_uint -> Numeral_uint [] ;
  Numeral_numeral_sind -> Numeral_Hex [] ;
  Numeral_numeral_sind -> Numeral_Dec [] ;
  Numeral_numeral_sind -> Numeral_numeral [] ;
  Numeral_numeral_rec -> Numeral_numeral_rect [] ;
  Numeral_numeral_ind -> Numeral_Hex [] ;
  Numeral_numeral_ind -> Numeral_Dec [] ;
  Numeral_numeral_ind -> Numeral_numeral [] ;
  Numeral_numeral_rect -> Numeral_Hex [] ;
  Numeral_numeral_rect -> Numeral_Dec [] ;
  Numeral_numeral_rect -> Numeral_numeral [] ;
  Numeral_Hex -> Basics_Hexadecimal_hexadecimal [] ;
  Numeral_Hex -> Basics_Decimal_decimal [] ;
  Numeral_Dec -> Basics_Hexadecimal_hexadecimal [] ;
  Numeral_Dec -> Basics_Decimal_decimal [] ;
  Numeral_numeral -> Basics_Hexadecimal_hexadecimal [] ;
  Numeral_numeral -> Basics_Decimal_decimal [] ;
  Numeral_int_sind -> Numeral_IntHex [] ;
  Numeral_int_sind -> Numeral_IntDec [] ;
  Numeral_int_sind -> Numeral_int [] ;
  Numeral_int_rec -> Numeral_int_rect [] ;
  Numeral_int_ind -> Numeral_IntHex [] ;
  Numeral_int_ind -> Numeral_IntDec [] ;
  Numeral_int_ind -> Numeral_int [] ;
  Numeral_int_rect -> Numeral_IntHex [] ;
  Numeral_int_rect -> Numeral_IntDec [] ;
  Numeral_int_rect -> Numeral_int [] ;
  Numeral_IntHex -> Basics_Hexadecimal_int [] ;
  Numeral_IntHex -> Basics_Decimal_int [] ;
  Numeral_IntDec -> Basics_Hexadecimal_int [] ;
  Numeral_IntDec -> Basics_Decimal_int [] ;
  Numeral_int -> Basics_Hexadecimal_int [] ;
  Numeral_int -> Basics_Decimal_int [] ;
  Numeral_uint_sind -> Numeral_UIntHex [] ;
  Numeral_uint_sind -> Numeral_UIntDec [] ;
  Numeral_uint_sind -> Numeral_uint [] ;
  Numeral_uint_rec -> Numeral_uint_rect [] ;
  Numeral_uint_ind -> Numeral_UIntHex [] ;
  Numeral_uint_ind -> Numeral_UIntDec [] ;
  Numeral_uint_ind -> Numeral_uint [] ;
  Numeral_uint_rect -> Numeral_UIntHex [] ;
  Numeral_uint_rect -> Numeral_UIntDec [] ;
  Numeral_uint_rect -> Numeral_uint [] ;
  Numeral_UIntHex -> Basics_Hexadecimal_uint [] ;
  Numeral_UIntHex -> Basics_Decimal_uint [] ;
  Numeral_UIntDec -> Basics_Hexadecimal_uint [] ;
  Numeral_UIntDec -> Basics_Decimal_uint [] ;
  Numeral_uint -> Basics_Hexadecimal_uint [] ;
  Numeral_uint -> Basics_Decimal_uint [] ;
  Basics_Nat_to_num_int -> Numeral_IntDec [] ;
  Basics_Nat_to_num_int -> Numeral_int [] ;
  Basics_Nat_to_num_int -> Basics_Nat_to_int [] ;
  Basics_Nat_to_int -> Basics_Nat_to_uint [] ;
  Basics_Nat_to_int -> Basics_Decimal_Pos [] ;
  Basics_Nat_to_int -> Basics_Decimal_int [] ;
  Basics_Nat_of_num_int -> Numeral_int [] ;
  Basics_Nat_of_num_int -> Basics_Nat_of_hex_int [] ;
  Basics_Nat_of_num_int -> Basics_Nat_of_int [] ;
  Basics_Nat_of_hex_int -> Basics_Nat_of_hex_uint [] ;
  Basics_Nat_of_hex_int -> Basics_Hexadecimal_norm [] ;
  Basics_Nat_of_hex_int -> Basics_Datatypes_None [] ;
  Basics_Nat_of_hex_int -> Basics_Datatypes_Some [] ;
  Basics_Nat_of_hex_int -> Basics_Datatypes_option [] ;
  Basics_Nat_of_int -> Basics_Nat_of_uint [] ;
  Basics_Nat_of_int -> Basics_Decimal_norm [] ;
  Basics_Nat_of_int -> Basics_Datatypes_None [] ;
  Basics_Nat_of_int -> Basics_Datatypes_Some [] ;
  Basics_Nat_of_int -> Basics_Datatypes_option [] ;
  Basics_Nat_to_num_uint -> Numeral_UIntDec [] ;
  Basics_Nat_to_num_uint -> Numeral_uint [] ;
  Basics_Nat_to_num_uint -> Basics_Nat_to_uint [] ;
  Basics_Nat_to_uint -> Basics_Nat_to_little_uint [] ;
  Basics_Nat_to_uint -> Basics_Decimal_rev [] ;
  Basics_Nat_to_little_uint -> Basics_Decimal_Little_succ [] ;
  Basics_Nat_to_little_uint -> Overture_nat [] ;
  Basics_Nat_of_num_uint -> Numeral_uint [] ;
  Basics_Nat_of_num_uint -> Basics_Nat_of_hex_uint [] ;
  Basics_Nat_of_num_uint -> Basics_Nat_of_uint [] ;
  Basics_Nat_of_hex_uint -> Basics_Nat_of_hex_uint_acc [] ;
  Basics_Nat_of_hex_uint_acc -> Basics_Nat_tail_mul [] ;
  Basics_Nat_of_hex_uint_acc -> Basics_Hexadecimal_uint [] ;
  Basics_Nat_of_uint -> Basics_Nat_of_uint_acc [] ;
  Basics_Nat_of_uint_acc -> Basics_Nat_tail_mul [] ;
  Basics_Nat_of_uint_acc -> Basics_Decimal_uint [] ;
  Basics_Nat_tail_mul -> Overture_O [] ;
  Basics_Nat_tail_mul -> Basics_Nat_tail_addmul [] ;
  Basics_Nat_tail_addmul -> Basics_Nat_tail_add [] ;
  Basics_Nat_tail_add -> Overture_S [] ;
  Basics_Nat_tail_add -> Overture_nat [] ;
  Basics_Logic_not -> Basics_Logic_False [] ;
  Basics_Logic_False_sind -> Basics_Logic_False [] ;
  Basics_Logic_False_rec -> Basics_Logic_False_rect [] ;
  Basics_Logic_False_ind -> Basics_Logic_False [] ;
  Basics_Logic_False_rect -> Basics_Logic_False [] ;
  Basics_Logic_True_sind -> Basics_Logic_I [] ;
  Basics_Logic_True_sind -> Basics_Logic_True [] ;
  Basics_Logic_True_rec -> Basics_Logic_True_rect [] ;
  Basics_Logic_True_ind -> Basics_Logic_I [] ;
  Basics_Logic_True_ind -> Basics_Logic_True [] ;
  Basics_Logic_True_rect -> Basics_Logic_I [] ;
  Basics_Logic_True_rect -> Basics_Logic_True [] ;
  Basics_Hexadecimal_nztail_int -> Basics_Hexadecimal_nztail [] ;
  Basics_Hexadecimal_nztail_int -> Basics_Hexadecimal_Neg [] ;
  Basics_Hexadecimal_nztail_int -> Basics_Hexadecimal_Pos [] ;
  Basics_Hexadecimal_nztail_int -> Basics_Hexadecimal_int [] ;
  Basics_Hexadecimal_nztail -> Overture_S [] ;
  Basics_Hexadecimal_nztail -> Overture_O [] ;
  Basics_Hexadecimal_nztail -> Overture_nat [] ;
  Basics_Hexadecimal_nztail -> Basics_Hexadecimal_rev [] ;
  Basics_Hexadecimal_nztail -> Basics_Datatypes_pair [] ;
  Basics_Hexadecimal_nztail -> Basics_Datatypes_prod [] ;
  Basics_Hexadecimal_app_int -> Basics_Hexadecimal_app [] ;
  Basics_Hexadecimal_app_int -> Basics_Hexadecimal_Neg [] ;
  Basics_Hexadecimal_app_int -> Basics_Hexadecimal_Pos [] ;
  Basics_Hexadecimal_app_int -> Basics_Hexadecimal_int [] ;
  Basics_Hexadecimal_app -> Basics_Hexadecimal_rev [] ;
  Basics_Hexadecimal_rev -> Basics_Hexadecimal_revapp [] ;
  Basics_Hexadecimal_rev -> Basics_Hexadecimal_Nil [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_Df [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_De [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_Dd [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_Dc [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_Db [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_Da [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_D9 [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_D8 [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_D7 [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_D6 [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_D5 [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_D4 [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_D3 [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_D2 [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_D1 [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_D0 [] ;
  Basics_Hexadecimal_revapp -> Basics_Hexadecimal_uint [] ;
  Basics_Hexadecimal_opp -> Basics_Hexadecimal_Neg [] ;
  Basics_Hexadecimal_opp -> Basics_Hexadecimal_Pos [] ;
  Basics_Hexadecimal_opp -> Basics_Hexadecimal_int [] ;
  Basics_Hexadecimal_norm -> Basics_Hexadecimal_unorm [] ;
  Basics_Hexadecimal_norm -> Basics_Hexadecimal_Neg [] ;
  Basics_Hexadecimal_norm -> Basics_Hexadecimal_Pos [] ;
  Basics_Hexadecimal_norm -> Basics_Hexadecimal_int [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_nzhead [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_Df [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_De [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_Dd [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_Dc [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_Db [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_Da [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_D9 [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_D8 [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_D7 [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_D6 [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_D5 [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_D4 [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_D3 [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_D2 [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_D1 [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_D0 [] ;
  Basics_Hexadecimal_unorm -> Basics_Hexadecimal_Nil [] ;
  Basics_Hexadecimal_nzhead -> Basics_Hexadecimal_uint [] ;
  Basics_Hexadecimal_nb_digits -> Overture_S [] ;
  Basics_Hexadecimal_nb_digits -> Overture_O [] ;
  Basics_Hexadecimal_nb_digits -> Overture_nat [] ;
  Basics_Hexadecimal_nb_digits -> Basics_Hexadecimal_uint [] ;
  Hexadecimal_hexadecimal_sind -> Basics_Hexadecimal_HexadecimalExp [] ;
  Hexadecimal_hexadecimal_sind -> Basics_Hexadecimal_Hexadecimal [] ;
  Hexadecimal_hexadecimal_sind -> Basics_Hexadecimal_hexadecimal [] ;
  Hexadecimal_hexadecimal_rec -> Hexadecimal_hexadecimal_rect [] ;
  Hexadecimal_hexadecimal_ind -> Basics_Hexadecimal_HexadecimalExp [] ;
  Hexadecimal_hexadecimal_ind -> Basics_Hexadecimal_Hexadecimal [] ;
  Hexadecimal_hexadecimal_ind -> Basics_Hexadecimal_hexadecimal [] ;
  Hexadecimal_hexadecimal_rect -> Basics_Hexadecimal_HexadecimalExp [] ;
  Hexadecimal_hexadecimal_rect -> Basics_Hexadecimal_Hexadecimal [] ;
  Hexadecimal_hexadecimal_rect -> Basics_Hexadecimal_hexadecimal [] ;
  Basics_Hexadecimal_HexadecimalExp -> Basics_Hexadecimal_int [] ;
  Basics_Hexadecimal_HexadecimalExp -> Basics_Decimal_int [] ;
  Basics_Hexadecimal_Hexadecimal -> Basics_Hexadecimal_int [] ;
  Basics_Hexadecimal_Hexadecimal -> Basics_Decimal_int [] ;
  Basics_Hexadecimal_hexadecimal -> Basics_Hexadecimal_int [] ;
  Basics_Hexadecimal_hexadecimal -> Basics_Decimal_int [] ;
  Hexadecimal_int_sind -> Basics_Hexadecimal_Neg [] ;
  Hexadecimal_int_sind -> Basics_Hexadecimal_Pos [] ;
  Hexadecimal_int_sind -> Basics_Hexadecimal_int [] ;
  Hexadecimal_int_rec -> Hexadecimal_int_rect [] ;
  Hexadecimal_int_ind -> Basics_Hexadecimal_Neg [] ;
  Hexadecimal_int_ind -> Basics_Hexadecimal_Pos [] ;
  Hexadecimal_int_ind -> Basics_Hexadecimal_int [] ;
  Hexadecimal_int_rect -> Basics_Hexadecimal_Neg [] ;
  Hexadecimal_int_rect -> Basics_Hexadecimal_Pos [] ;
  Hexadecimal_int_rect -> Basics_Hexadecimal_int [] ;
  Basics_Hexadecimal_Neg -> Basics_Hexadecimal_uint [] ;
  Basics_Hexadecimal_Pos -> Basics_Hexadecimal_uint [] ;
  Basics_Hexadecimal_int -> Basics_Hexadecimal_uint [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_Df [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_De [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_Dd [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_Dc [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_Db [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_Da [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_D9 [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_D8 [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_D7 [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_D6 [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_D5 [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_D4 [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_D3 [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_D2 [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_D1 [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_D0 [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_Nil [] ;
  Basics_Hexadecimal_uint_sind -> Basics_Hexadecimal_uint [] ;
  Basics_Hexadecimal_uint_rec -> Basics_Hexadecimal_uint_rect [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_Df [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_De [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_Dd [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_Dc [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_Db [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_Da [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_D9 [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_D8 [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_D7 [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_D6 [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_D5 [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_D4 [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_D3 [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_D2 [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_D1 [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_D0 [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_Nil [] ;
  Basics_Hexadecimal_uint_ind -> Basics_Hexadecimal_uint [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_Df [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_De [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_Dd [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_Dc [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_Db [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_Da [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_D9 [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_D8 [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_D7 [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_D6 [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_D5 [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_D4 [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_D3 [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_D2 [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_D1 [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_D0 [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_Nil [] ;
  Basics_Hexadecimal_uint_rect -> Basics_Hexadecimal_uint [] ;
  Equivalences_equiv_composeR_ -> Equivalences_equiv_compose_ [] ;
  Equivalences_equiv_path_ind -> Overture_Equiv [] ;
  Equivalences_equiv_path_ind -> Equivalences_equiv_ind [] ;
  Equivalences_equiv_ind_comp -> PathGroupoids_transport_compose [] ;
  Equivalences_equiv_ind_comp -> Overture_eisadj [] ;
  Equivalences_equiv_ind_comp -> Overture_apD [] ;
  Equivalences_equiv_ind_comp -> Overture_internal_paths_rew_r [] ;
  Equivalences_equiv_ind_comp -> Overture_internal_paths_rew [] ;
  Equivalences_equiv_ind_comp -> Equivalences_equiv_ind [] ;
  Equivalences_equiv_ind -> Overture_IsEquiv [] ;
  Equivalences_equiv_ind -> Overture_transport [] ;
  Equivalences_contr_basedhomotopy_ -> Overture_path_forall [] ;
  Equivalences_contr_basedhomotopy_ -> Overture_eissect [] ;
  Equivalences_contr_basedhomotopy_ -> Overture_eisretr [] ;
  Equivalences_contr_basedhomotopy_ -> Equivalences_contr_equiv_ [] ;
  Equivalences_contr_basedhomotopy_ -> Equivalences_equiv_adjointify [] ;
  Equivalences_contr_basedhomotopy_ -> Contractible_contr_basedpaths_ [] ;
  Equivalences_contr_basedhomotopy -> Overture_path_forall [] ;
  Equivalences_contr_basedhomotopy -> Overture_eissect [] ;
  Equivalences_contr_basedhomotopy -> Overture_eisretr [] ;
  Equivalences_contr_basedhomotopy -> Equivalences_contr_equiv_ [] ;
  Equivalences_contr_basedhomotopy -> Equivalences_equiv_adjointify [] ;
  Equivalences_contr_basedhomotopy -> Contractible_contr_basedpaths [] ;
  Equivalences_isequiv_commsq_ -> Equivalences_cancelL_isequiv [] ;
  Equivalences_isequiv_commsq -> Equivalences_cancelR_isequiv [] ;
  Equivalences_cancelL_equiv -> Overture_Build_Equiv [] ;
  Equivalences_cancelL_equiv -> Overture_Equiv [] ;
  Equivalences_cancelL_equiv -> Equivalences_cancelL_isequiv [] ;
  Equivalences_cancelL_isequiv -> Overture_equiv_inv [] ;
  Equivalences_cancelL_isequiv -> Equivalences_isequiv_inverse [] ;
  Equivalences_cancelL_isequiv -> Equivalences_isequiv_homotopic [] ;
  Equivalences_cancelL_isequiv -> Equivalences_isequiv_compose [] ;
  Equivalences_cancelR_equiv -> Overture_Build_Equiv [] ;
  Equivalences_cancelR_equiv -> Overture_Equiv [] ;
  Equivalences_cancelR_equiv -> Equivalences_cancelR_isequiv [] ;
  Equivalences_cancelR_isequiv -> Equivalences_isequiv_inverse [] ;
  Equivalences_cancelR_isequiv -> Equivalences_isequiv_homotopic [] ;
  Equivalences_cancelR_isequiv -> Equivalences_isequiv_compose [] ;
  Equivalences_equiv_ap_inv_ -> Equivalences_equiv_inverse [] ;
  Equivalences_equiv_ap_inv_ -> Equivalences_equiv_ap_ [] ;
  Equivalences_equiv_ap_inv -> Equivalences_equiv_inverse [] ;
  Equivalences_equiv_ap_inv -> Equivalences_equiv_ap [] ;
  Equivalences_equiv_inverse_homotopy -> Overture_Equiv [] ;
  Equivalences_equiv_inverse_homotopy -> Overture_eisretr [] ;
  Equivalences_equiv_inverse_homotopy -> Overture_equiv_inv [] ;
  Equivalences_equiv_inverse_homotopy -> Overture_concat [] ;
  Equivalences_equiv_inverse_homotopy -> Overture_inverse [] ;
  Equivalences_equiv_inverse_compose -> Equivalences_equiv_inverse [] ;
  Equivalences_equiv_inverse_compose -> Equivalences_equiv_compose_ [] ;
  Equivalences_symmetric_equiv -> Overture_Symmetric [] ;
  Equivalences_symmetric_equiv -> Equivalences_equiv_inverse [] ;
  Equivalences_equiv_inverse -> Overture_Build_Equiv [] ;
  Equivalences_equiv_inverse -> Overture_Equiv [] ;
  Equivalences_equiv_inverse -> Equivalences_isequiv_inverse [] ;
  Equivalences_isequiv_inverse -> PathGroupoids_ap_homotopic_id [] ;
  Equivalences_isequiv_inverse -> PathGroupoids_concat_pp_V [] ;
  Equivalences_isequiv_inverse -> Overture_eisadj [] ;
  Equivalences_isequiv_inverse -> Equivalences_equiv_inj [] ;
  Equivalences_equiv_inj -> Equivalences_isequiv_ap [] ;
  Equivalences_equiv_ap_ -> Equivalences_equiv_ap [] ;
  Equivalences_equiv_ap -> Overture_Build_Equiv [] ;
  Equivalences_equiv_ap -> Overture_Equiv [] ;
  Equivalences_equiv_ap -> Equivalences_isequiv_ap [] ;
  Equivalences_isequiv_ap -> PathGroupoids_whiskerR [] ;
  Equivalences_isequiv_ap -> PathGroupoids_whiskerL [] ;
  Equivalences_isequiv_ap -> PathGroupoids_inverse2 [] ;
  Equivalences_isequiv_ap -> PathGroupoids_concat_pA1_p [] ;
  Equivalences_isequiv_ap -> PathGroupoids_concat_Vp [] ;
  Equivalences_isequiv_ap -> Equivalences_isequiv_adjointify [] ;
  Equivalences_isequiv_isequiv_precompose -> Overture_eissect [] ;
  Equivalences_isequiv_isequiv_precompose -> Overture_eisretr [] ;
  Equivalences_isequiv_isequiv_precompose -> Overture_ap10 [] ;
  Equivalences_isequiv_isequiv_precompose -> Equivalences_isequiv_adjointify [] ;
  Equivalences_equiv_postcompose_ -> Overture_equiv_fun [] ;
  Equivalences_equiv_postcompose_ -> Overture_Build_Equiv [] ;
  Equivalences_equiv_postcompose_ -> Equivalences_isequiv_postcompose [] ;
  Equivalences_equiv_postcompose -> Overture_Build_Equiv [] ;
  Equivalences_equiv_postcompose -> Overture_Equiv [] ;
  Equivalences_equiv_postcompose -> Equivalences_isequiv_postcompose [] ;
  Equivalences_isequiv_postcompose -> Overture_path_forall [] ;
  Equivalences_isequiv_postcompose -> Equivalences_isequiv_adjointify [] ;
  Equivalences_equiv_precompose_ -> Overture_Build_Equiv [] ;
  Equivalences_equiv_precompose_ -> Overture_Equiv [] ;
  Equivalences_equiv_precompose_ -> Equivalences_isequiv_precompose [] ;
  Equivalences_equiv_precompose -> Overture_Build_Equiv [] ;
  Equivalences_equiv_precompose -> Overture_Equiv [] ;
  Equivalences_equiv_precompose -> Equivalences_isequiv_precompose [] ;
  Equivalences_isequiv_precompose -> Overture_path_forall [] ;
  Equivalences_isequiv_precompose -> Equivalences_isequiv_adjointify [] ;
  Equivalences_equiv_pr1 -> Overture_Build_Equiv [] ;
  Equivalences_equiv_pr1 -> Overture_Equiv [] ;
  Equivalences_equiv_pr1 -> Equivalences_isequiv_pr1 [] ;
  Equivalences_isequiv_pr1 -> PathGroupoids_ap_const [] ;
  Equivalences_isequiv_pr1 -> PathGroupoids_ap_compose [] ;
  Equivalences_isequiv_pr1 -> Overture_IsTrunc [] ;
  Equivalences_isequiv_pr1 -> Overture_minus_two [] ;
  Equivalences_isequiv_pr1 -> Overture_Build_IsEquiv [] ;
  Equivalences_isequiv_pr1 -> Overture_IsEquiv [] ;
  Equivalences_isequiv_pr1 -> Overture_inverse [] ;
  Equivalences_isequiv_pr1 -> Overture_internal_paths_rew [] ;
  Equivalences_isequiv_pr1 -> Overture_proj1 [] ;
  Equivalences_isequiv_pr1 -> Overture_exist [] ;
  Equivalences_equiv_contr_contr -> Overture_IsTrunc [] ;
  Equivalences_equiv_contr_contr -> Overture_minus_two [] ;
  Equivalences_equiv_contr_contr -> Equivalences_equiv_adjointify [] ;
  Equivalences_isequiv_contr_contr -> Overture_Build_IsEquiv [] ;
  Equivalences_isequiv_contr_contr -> Overture_IsEquiv [] ;
  Equivalences_isequiv_contr_contr -> Contractible_contr_paths_contr [] ;
  Equivalences_contr_equiv_ -> Overture_Equiv [] ;
  Equivalences_contr_equiv_ -> Equivalences_contr_equiv [] ;
  Equivalences_contr_equiv -> Overture_IsTrunc [] ;
  Equivalences_contr_equiv -> Overture_minus_two [] ;
  Equivalences_contr_equiv -> Overture_Build_Contr [] ;
  Equivalences_contr_equiv -> Equivalences_moveR_equiv_M [] ;
  Equivalences_moveL_equiv_V_ -> Overture_Equiv [] ;
  Equivalences_moveL_equiv_V_ -> Equivalences_moveL_equiv_V [] ;
  Equivalences_moveL_equiv_V -> Overture_IsEquiv [] ;
  Equivalences_moveL_equiv_V -> Overture_concat [] ;
  Equivalences_moveL_equiv_V -> Overture_inverse [] ;
  Equivalences_moveR_equiv_V_ -> Overture_Equiv [] ;
  Equivalences_moveR_equiv_V_ -> Equivalences_moveR_equiv_V [] ;
subgraph cluster_PathGroupoids { label="PathGroupoids"; fillcolor="#FFFFC3"; labeljust=l; style=filled 
PathGroupoids_concat_p1; PathGroupoids_concat_1p; PathGroupoids_concat_p_pp; PathGroupoids_concat_pp_p; PathGroupoids_concat_pV; PathGroupoids_concat_Vp; PathGroupoids_concat_V_pp; PathGroupoids_concat_p_Vp; PathGroupoids_concat_pp_V; PathGroupoids_concat_pV_p; PathGroupoids_inv_pp; PathGroupoids_inv_Vp; PathGroupoids_inv_pV; PathGroupoids_inv_VV; PathGroupoids_inv_V; PathGroupoids_moveR_Mp; PathGroupoids_moveR_pM; PathGroupoids_moveR_Vp; PathGroupoids_moveR_pV; PathGroupoids_moveL_Mp; PathGroupoids_moveL_pM; PathGroupoids_moveL_Vp; PathGroupoids_moveL_pV; PathGroupoids_moveL_1M; PathGroupoids_moveL_M1; PathGroupoids_moveL_1V; PathGroupoids_moveL_V1; PathGroupoids_moveR_M1; PathGroupoids_moveR_1M; PathGroupoids_moveR_1V; PathGroupoids_moveR_V1; PathGroupoids_moveR_transport_p; PathGroupoids_moveR_transport_V; PathGroupoids_moveL_transport_V; PathGroupoids_moveL_transport_p; PathGroupoids_moveR_transport_p_V; PathGroupoids_moveR_transport_V_V; PathGroupoids_moveL_transport_V_V; PathGroupoids_moveL_transport_p_V; PathGroupoids_ap_1; PathGroupoids_apD_1; PathGroupoids_ap_pp; PathGroupoids_ap_p_pp; PathGroupoids_ap_pp_p; PathGroupoids_inverse_ap; PathGroupoids_ap_V; PathGroupoids_ap_idmap; PathGroupoids_ap_compose; PathGroupoids_ap_compose_; PathGroupoids_ap_const; PathGroupoids_concat_Ap; PathGroupoids_ap_homotopic; PathGroupoids_concat_A1p; PathGroupoids_ap_homotopic_id; PathGroupoids_concat_pA1; PathGroupoids_concat_pA_pp; PathGroupoids_concat_pA_p; PathGroupoids_concat_A_pp; PathGroupoids_concat_pA1_pp; PathGroupoids_concat_pp_A1p; PathGroupoids_concat_pA1_p; PathGroupoids_concat_A1_pp; PathGroupoids_concat_pp_A1; PathGroupoids_concat_p_A1p; PathGroupoids_concat_1p_1; PathGroupoids_concat_p1_1; PathGroupoids_apD10_1; PathGroupoids_apD10_pp; PathGroupoids_apD10_V; PathGroupoids_ap10_1; PathGroupoids_ap10_pp; PathGroupoids_ap10_V; PathGroupoids_apD10_ap_precompose; PathGroupoids_ap10_ap_precompose; PathGroupoids_apD10_ap_postcompose; PathGroupoids_ap10_ap_postcompose; PathGroupoids_transport_1; PathGroupoids_transport_pp; PathGroupoids_transport_pV; PathGroupoids_transport_Vp; PathGroupoids_transport_p_pp; PathGroupoids_transport_pVp; PathGroupoids_transport_VpV; PathGroupoids_ap_transport_transport_pV; PathGroupoids_moveL_transport_V_1; PathGroupoids_paths_rect_transport; PathGroupoids_paths_ind_transport; PathGroupoids_paths_ind_r_transport; PathGroupoids_ap11_is_ap10_ap01; PathGroupoids_transportD; PathGroupoids_transportD2; PathGroupoids_ap011; PathGroupoids_ap011D; PathGroupoids_ap01D1; PathGroupoids_apD011; PathGroupoids_transport2; PathGroupoids_transport2_is_ap10; PathGroupoids_transport2_p2p; PathGroupoids_transport2_V; PathGroupoids_concat_AT; PathGroupoids_ap_transport; PathGroupoids_ap_transportD; PathGroupoids_ap_transportD2; PathGroupoids_ap_transport_pV; PathGroupoids_transport_pV_ap; PathGroupoids_apD_pp; PathGroupoids_apD_V; PathGroupoids_transport_const; PathGroupoids_transport2_const; PathGroupoids_transport_compose; PathGroupoids_transportD_compose; PathGroupoids_transport_apD_transportD; PathGroupoids_transport_precompose; PathGroupoids_transport_idmap_ap; PathGroupoids_transport_transport; PathGroupoids_apD_const; PathGroupoids_apD_compose; PathGroupoids_apD_compose_; PathGroupoids_concat2; PathGroupoids_concat2_ap_ap; PathGroupoids_inverse2; PathGroupoids_ap_pp_concat_pV; PathGroupoids_ap_pp_concat_Vp; PathGroupoids_concat_pV_inverse2; PathGroupoids_concat_Vp_inverse2; PathGroupoids_whiskerL; PathGroupoids_whiskerR; PathGroupoids_cancelL; PathGroupoids_cancelR; PathGroupoids_whiskerR_p1; PathGroupoids_whiskerR_1p; PathGroupoids_whiskerL_p1; PathGroupoids_whiskerL_1p; PathGroupoids_whiskerR_p1_1; PathGroupoids_whiskerL_1p_1; PathGroupoids_concat2_p1; PathGroupoids_concat2_1p; PathGroupoids_cancel2L; PathGroupoids_cancel2R; PathGroupoids_whiskerL_pp; PathGroupoids_whiskerR_pp; PathGroupoids_whiskerL_VpL; PathGroupoids_whiskerL_pVL; PathGroupoids_whiskerR_pVR; PathGroupoids_whiskerR_VpR; PathGroupoids_concat_concat2; PathGroupoids_concat_whisker; PathGroupoids_pentagon; PathGroupoids_triangulator; PathGroupoids_eckmann_hilton; PathGroupoids_ap02; PathGroupoids_ap02_pp; PathGroupoids_ap02_p2p; PathGroupoids_apD02; PathGroupoids_apD02_const; PathGroupoids_apD02_pp; PathGroupoids_ap_transport_Vp_idmap; PathGroupoids_ap_transport_pV_idmap; };
subgraph cluster_Basics { label="Basics"; fillcolor="#FFFFC3"; labeljust=l; style=filled 
subgraph cluster_Basics_Logic { label="Logic"; fillcolor="#FFFFA3"; labeljust=l; style=filled 
Basics_Logic_True; Basics_Logic_I; Basics_Logic_True_rect; Basics_Logic_True_ind; Basics_Logic_True_rec; Basics_Logic_True_sind; Basics_Logic_False; Basics_Logic_False_rect; Basics_Logic_False_ind; Basics_Logic_False_rec; Basics_Logic_False_sind; Basics_Logic_not; };
subgraph cluster_Basics_Nat { label="Nat"; fillcolor="#FFFFA3"; labeljust=l; style=filled 
Basics_Nat_tail_add; Basics_Nat_tail_addmul; Basics_Nat_tail_mul; Basics_Nat_of_uint_acc; Basics_Nat_of_uint; Basics_Nat_of_hex_uint_acc; Basics_Nat_of_hex_uint; Basics_Nat_of_num_uint; Basics_Nat_to_little_uint; Basics_Nat_to_uint; Basics_Nat_to_num_uint; Basics_Nat_of_int; Basics_Nat_of_hex_int; Basics_Nat_of_num_int; Basics_Nat_to_int; Basics_Nat_to_num_int; };
subgraph cluster_Basics_Datatypes { label="Datatypes"; fillcolor="#FFFFA3"; labeljust=l; style=filled 
Basics_Datatypes_option; Basics_Datatypes_Some; Basics_Datatypes_None; Basics_Datatypes_option_rect; Basics_Datatypes_sum; Basics_Datatypes_inl; Basics_Datatypes_inr; Basics_Datatypes_sum_rect; Basics_Datatypes_prod; Basics_Datatypes_pair; Basics_Datatypes_fst; Basics_Datatypes_snd; Basics_Datatypes_prod_rect; Basics_Datatypes_prod_curry; Basics_Datatypes_list; Basics_Datatypes_nil; Basics_Datatypes_cons; Basics_Datatypes_list_rect; Basics_Datatypes_app; };
subgraph cluster_Basics_Decimal { label="Decimal"; fillcolor="#FFFFA3"; labeljust=l; style=filled 
subgraph cluster_Basics_Decimal_Little { label="Little"; fillcolor="#FFFF83"; labeljust=l; style=filled 
Basics_Decimal_Little_succ; Basics_Decimal_Little_double; Basics_Decimal_Little_succ_double; };
Basics_Decimal_uint; Basics_Decimal_Nil; Basics_Decimal_D0; Basics_Decimal_D1; Basics_Decimal_D2; Basics_Decimal_D3; Basics_Decimal_D4; Basics_Decimal_D5; Basics_Decimal_D6; Basics_Decimal_D7; Basics_Decimal_D8; Basics_Decimal_D9; Basics_Decimal_uint_rect; Basics_Decimal_uint_ind; Basics_Decimal_uint_rec; Basics_Decimal_uint_sind; Basics_Decimal_int; Basics_Decimal_Pos; Basics_Decimal_Neg; Basics_Decimal_decimal; Basics_Decimal_Decimal; Basics_Decimal_DecimalExp; Basics_Decimal_nb_digits; Basics_Decimal_nzhead; Basics_Decimal_unorm; Basics_Decimal_norm; Basics_Decimal_opp; Basics_Decimal_revapp; Basics_Decimal_rev; Basics_Decimal_app; Basics_Decimal_app_int; Basics_Decimal_nztail; Basics_Decimal_nztail_int; Basics_Decimal_uint_of_uint; Basics_Decimal_int_of_int; };
subgraph cluster_Basics_Hexadecimal { label="Hexadecimal"; fillcolor="#FFFFA3"; labeljust=l; style=filled 
subgraph cluster_Basics_Hexadecimal_Little { label="Little"; fillcolor="#FFFF83"; labeljust=l; style=filled 
Basics_Hexadecimal_Little_succ; Basics_Hexadecimal_Little_double; Basics_Hexadecimal_Little_succ_double; };
Basics_Hexadecimal_uint; Basics_Hexadecimal_Nil; Basics_Hexadecimal_D0; Basics_Hexadecimal_D1; Basics_Hexadecimal_D2; Basics_Hexadecimal_D3; Basics_Hexadecimal_D4; Basics_Hexadecimal_D5; Basics_Hexadecimal_D6; Basics_Hexadecimal_D7; Basics_Hexadecimal_D8; Basics_Hexadecimal_D9; Basics_Hexadecimal_Da; Basics_Hexadecimal_Db; Basics_Hexadecimal_Dc; Basics_Hexadecimal_Dd; Basics_Hexadecimal_De; Basics_Hexadecimal_Df; Basics_Hexadecimal_uint_rect; Basics_Hexadecimal_uint_ind; Basics_Hexadecimal_uint_rec; Basics_Hexadecimal_uint_sind; Basics_Hexadecimal_int; Basics_Hexadecimal_Pos; Basics_Hexadecimal_Neg; Basics_Hexadecimal_hexadecimal; Basics_Hexadecimal_Hexadecimal; Basics_Hexadecimal_HexadecimalExp; Basics_Hexadecimal_nb_digits; Basics_Hexadecimal_nzhead; Basics_Hexadecimal_unorm; Basics_Hexadecimal_norm; Basics_Hexadecimal_opp; Basics_Hexadecimal_revapp; Basics_Hexadecimal_rev; Basics_Hexadecimal_app; Basics_Hexadecimal_app_int; Basics_Hexadecimal_nztail; Basics_Hexadecimal_nztail_int; };
};
subgraph cluster_Hexadecimal { label="Hexadecimal"; fillcolor="#FFFFC3"; labeljust=l; style=filled 
Hexadecimal_int_rect; Hexadecimal_int_ind; Hexadecimal_int_rec; Hexadecimal_int_sind; Hexadecimal_hexadecimal_rect; Hexadecimal_hexadecimal_ind; Hexadecimal_hexadecimal_rec; Hexadecimal_hexadecimal_sind; };
subgraph cluster_Equivalences { label="Equivalences"; fillcolor="#FFFFC3"; labeljust=l; style=filled 
Equivalences_moveR_equiv_V_; Equivalences_moveL_equiv_V; Equivalences_moveL_equiv_V_; Equivalences_contr_equiv; Equivalences_contr_equiv_; Equivalences_isequiv_contr_contr; Equivalences_equiv_contr_contr; Equivalences_isequiv_pr1; Equivalences_equiv_pr1; Equivalences_isequiv_precompose; Equivalences_equiv_precompose; Equivalences_equiv_precompose_; Equivalences_isequiv_postcompose; Equivalences_equiv_postcompose; Equivalences_equiv_postcompose_; Equivalences_isequiv_isequiv_precompose; Equivalences_isequiv_ap; Equivalences_equiv_ap; Equivalences_equiv_ap_; Equivalences_equiv_inj; Equivalences_isequiv_inverse; Equivalences_equiv_inverse; Equivalences_symmetric_equiv; Equivalences_equiv_inverse_compose; Equivalences_equiv_inverse_homotopy; Equivalences_equiv_ap_inv; Equivalences_equiv_ap_inv_; Equivalences_cancelR_isequiv; Equivalences_cancelR_equiv; Equivalences_cancelL_isequiv; Equivalences_cancelL_equiv; Equivalences_isequiv_commsq; Equivalences_isequiv_commsq_; Equivalences_contr_basedhomotopy; Equivalences_contr_basedhomotopy_; Equivalences_equiv_ind; Equivalences_equiv_ind_comp; Equivalences_equiv_path_ind; Equivalences_equiv_composeR_; Equivalences_isequiv_idmap; Equivalences_equiv_idmap; Equivalences_reflexive_equiv; Equivalences_isequiv_compose; Equivalences_isequiv_compose_; Equivalences_equiv_compose; Equivalences_equiv_compose_; Equivalences_iff_equiv; Equivalences_transitive_equiv; Equivalences_isequiv_homotopic; Equivalences_equiv_homotopic; Equivalences_isequiv_homotopic_; Equivalences_isequiv_transport; Equivalences_equiv_transport; Equivalences_is_adjoint_; Equivalences_isequiv_adjointify; Equivalences_equiv_adjointify; Equivalences_isequiv_involution; Equivalences_equiv_involution; Equivalences_moveR_equiv_M; Equivalences_moveR_equiv_M_; Equivalences_moveL_equiv_M; Equivalences_moveL_equiv_M_; Equivalences_moveR_equiv_V; };
subgraph cluster_Decidable { label="Decidable"; fillcolor="#FFFFC3"; labeljust=l; style=filled 
Decidable_Decidable; Decidable_dec; Decidable_DecidablePaths; Decidable_dec_paths; Decidable_Stable; Decidable_stable; Decidable_stable_decidable; Decidable_decide_rel; Decidable_decidable_contr; Decidable_decidablepaths_hprop; Decidable_decidable_empty; Decidable_decidable_equiv; Decidable_decidable_equiv_; Decidable_decidablepaths_equiv; Decidable_decidablepaths_equiv_; Decidable_WeaklyConstant; Decidable_wconst; Decidable_wconst_through_hprop; Decidable_Collapsible; Decidable_Build_Collapsible; Decidable_Collapsible_rect; Decidable_Collapsible_ind; Decidable_Collapsible_rec; Decidable_Collapsible_sind; Decidable_collapse; Decidable_wconst_collapse; Decidable_PathCollapsible; Decidable_path_coll; Decidable_collapsible_decidable; Decidable_pathcoll_decpaths; Decidable_hset_pathcoll; Decidable_collapsible_hprop; Decidable_pathcoll_hset; Decidable_hset_decpaths; Decidable_ishprop_decpaths; };
subgraph cluster_Contractible { label="Contractible"; fillcolor="#FFFFC3"; labeljust=l; style=filled 
Contractible_path_contr; Contractible_path2_contr; Contractible_contr_paths_contr; Contractible_path_basedpaths; Contractible_contr_basedpaths; Contractible_contr_basedpaths_etashort; Contractible_path_basedpaths_; Contractible_contr_basedpaths_; Contractible_ap_pr1_path_contr_basedpaths; Contractible_ap_pr1_path_contr_basedpaths_; Contractible_ap_pr1_path_basedpaths; Contractible_ap_pr1_path_basedpaths_; Contractible_contr_dom_equiv; Contractible_contr_retract; Contractible_contr_change_center; Contractible_contr_contr; };
subgraph cluster_Decimal { label="Decimal"; fillcolor="#FFFFC3"; labeljust=l; style=filled 
Decimal_int_rect; Decimal_int_ind; Decimal_int_rec; Decimal_int_sind; Decimal_decimal_rect; Decimal_decimal_ind; Decimal_decimal_rec; Decimal_decimal_sind; };
subgraph cluster_Numeral { label="Numeral"; fillcolor="#FFFFC3"; labeljust=l; style=filled 
Numeral_uint; Numeral_UIntDec; Numeral_UIntHex; Numeral_uint_rect; Numeral_uint_ind; Numeral_uint_rec; Numeral_uint_sind; Numeral_int; Numeral_IntDec; Numeral_IntHex; Numeral_int_rect; Numeral_int_ind; Numeral_int_rec; Numeral_int_sind; Numeral_numeral; Numeral_Dec; Numeral_Hex; Numeral_numeral_rect; Numeral_numeral_ind; Numeral_numeral_rec; Numeral_numeral_sind; Numeral_uint_of_uint; Numeral_int_of_int; };
subgraph cluster_Overture { label="Overture"; fillcolor="#FFFFC3"; labeljust=l; style=filled 
Overture_Relation; Overture_Reflexive; Overture_reflexivity; Overture_Symmetric; Overture_symmetry; Overture_Transitive; Overture_transitivity; Overture_PreOrder; Overture_Build_PreOrder; Overture_PreOrder_Reflexive; Overture_PreOrder_Transitive; Overture_Type1; Overture_unfold_Type1; Overture_Type2; Overture_unfold_Type2; Overture_Type3; Overture_unfold_Type3; Overture_Type2le; Overture_unfold_Type2le; Overture_Type3le; Overture_unfold_Type3le; Overture_const; Overture_sig; Overture_exist; Overture_proj1; Overture_proj2; Overture_sig_rect; Overture_sig_ind; Overture_sig_rec; Overture_uncurry; Overture_Compose; Overture_iff_compose; Overture_iff_inverse; Overture_iff_reflexive; Overture_composeD; Overture_paths; Overture_idpath; Overture_paths_ind; Overture_paths_rec; Overture_paths_rect; Overture_internal_paths_rew; Overture_paths_rew; Overture_internal_paths_rew_r; Overture_paths_rew_r; Overture_reflexive_paths; Overture_paths_ind_; Overture_paths_ind_r; Overture_inverse; Overture_symmetric_paths; Overture_paths_rect_r; Overture_concat; Overture_transitive_paths; Overture_transport; Overture_ap; Overture_pointwise_paths; Overture_pointwise_paths_concat; Overture_reflexive_pointwise_paths; Overture_transitive_pointwise_paths; Overture_symmetric_pointwise_paths; Overture_apD10; Overture_ap10; Overture_ap11; Overture_apD; Overture_IsEquiv; Overture_Build_IsEquiv; Overture_equiv_inv; Overture_eisretr; Overture_eissect; Overture_eisadj; Overture_Equiv; Overture_Build_Equiv; Overture_equiv_fun; Overture_equiv_isequiv; Overture_ap10_equiv; Overture_Contr_internal; Overture_Build_Contr; Overture_center; Overture_contr; Overture_trunc_index; Overture_minus_two; Overture_trunc_S; Overture_trunc_index_ind; Overture_trunc_index_rec; Overture_trunc_index_rect; Overture_IsTrunc_internal; Overture_IsTrunc; Overture_Trunc_is_trunc; Overture_istrunc_paths; Overture_Funext; Overture_isequiv_apD10; Overture_path_forall; Overture_nat; Overture_O; Overture_S; Overture_nat_rect; Overture_nat_ind; Overture_nat_rec; Overture_nat_sind; Overture_Empty; Overture_Empty_ind; Overture_Empty_rec; Overture_Empty_rect; Overture_not; Overture_symmetric_neq; Overture_complement; Overture_Irreflexive; Overture_irreflexivity; Overture_Asymmetric; Overture_asymmetry; Overture_Unit; Overture_tt; Overture_Unit_ind; Overture_Unit_rec; Overture_Unit_rect; Overture_IsPointed; Overture_point; Overture_pType; Overture_Build_pType; Overture_pointed_type; Overture_ispointed_type; Overture_hfiber; };
subgraph cluster_Datatypes { label="Datatypes"; fillcolor="#FFFFC3"; labeljust=l; style=filled 
Datatypes_iff; };
subgraph cluster_Tactics { label="Tactics"; fillcolor="#FFFFC3"; labeljust=l; style=filled 
Tactics_fix_proto; Tactics_obligation; Tactics_IsGlobalAxiom; Tactics_Build_IsGlobalAxiom; Tactics_IsGlobalAxiom_rect; Tactics_IsGlobalAxiom_ind; Tactics_IsGlobalAxiom_rec; Tactics_IsGlobalAxiom_sind; Tactics_is_global_axiom_funext; Tactics_issig_contr; Tactics_issig_equiv; Tactics_issig_isequiv; };
subgraph cluster_Trunc { label="Trunc"; fillcolor="#FFFFC3"; labeljust=l; style=filled 
Trunc_trunc_index_inc; Trunc_trunc_index_inc_; Trunc_trunc_index_inc__succ; Trunc_trunc_index_inc_agree; Trunc_nat_to_trunc_index; Trunc_int_to_trunc_index; Trunc_num_int_to_trunc_index; Trunc_trunc_index_to_little_uint; Trunc_trunc_index_to_int; Trunc_trunc_index_to_num_int; Trunc_trunc_index_add; Trunc_trunc_index_add_minus_two; Trunc_trunc_index_add_succ; Trunc_trunc_index_leq; Trunc_trunc_index_leq_minus_two_n; Trunc_trunc_index_leq_succ; Trunc_trunc_index_pred; Trunc_trunc_index_leq_minus_two; Trunc_trunc_index_leq_succ_; Trunc_trunc_index_leq_refl; Trunc_trunc_index_leq_transitive; Trunc_trunc_index_min; Trunc_trunc_index_min_minus_two; Trunc_trunc_index_min_swap; Trunc_trunc_index_min_path; Trunc_trunc_index_min_leq_left; Trunc_trunc_index_min_leq_right; Trunc_contr_istrunc_minus_two; Trunc_istrunc_succ; Trunc_istrunc_leq; Trunc_istrunc_contr; Trunc_istrunc_hprop; Trunc_istrunc_hset; Trunc_istrunc_isequiv_istrunc; Trunc_istrunc_equiv_istrunc; Trunc_IsTruncMap; Trunc_istruncmap_fiber; Trunc_TruncType; Trunc_Build_TruncType; Trunc_TruncType_rect; Trunc_TruncType_ind; Trunc_TruncType_rec; Trunc_TruncType_sind; Trunc_trunctype_type; Trunc_trunctype_istrunc; Trunc_default_TruncType; Trunc_contr_inhabited_hprop; Trunc_hprop_inhabited_contr; Trunc_path_ishprop; Trunc_hprop_allpath; Trunc_isequiv_iff_hprop; Trunc_equiv_iff_hprop_uncurried; Trunc_equiv_iff_hprop; Trunc_iff_contr_hprop; Trunc_equiv_contr_hprop; Trunc_ishprop_istrunc; Trunc_ishprop_istruncmap; };
subgraph cluster_UniverseLevel { label="UniverseLevel"; fillcolor="#FFFFC3"; labeljust=l; style=filled 
UniverseLevel_Lift; UniverseLevel_lift; UniverseLevel_lower; UniverseLevel_lift2; UniverseLevel_lower2; UniverseLevel_isequiv_lift; UniverseLevel_isequiv_lift2; UniverseLevel_lift_isequiv; UniverseLevel_lower_isequiv; UniverseLevel_lower_equiv; UniverseLevel_Lift_; UniverseLevel_lift_; UniverseLevel_lower_; UniverseLevel_lift_2; UniverseLevel_lower_2; UniverseLevel_isequiv_lift_; UniverseLevel_isequiv_lift_2; UniverseLevel_lift__isequiv; UniverseLevel_lower__isequiv; UniverseLevel_lower__equiv; };
} /* END */
