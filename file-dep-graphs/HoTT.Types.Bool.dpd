N: 25 "Bool_ind" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 24 "Bool_rec" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 23 "Bool_rect" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 1 "abelian_aut_bool" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 22 "andb" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 5 "aut_bool_canonical" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 3 "aut_bool_idmap_or_negb" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 13 "decidable_paths_bool" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 4 "equiv_bool_aut_bool" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 9 "equiv_bool_forall_prod" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 7 "equiv_negb" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 6 "eval_bool_isequiv" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 15 "false_ne_true" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 12 "hset_bool" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 2 "idmap_bool_ne_negb" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 19 "implb" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 17 "implb_impl" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 18 "implb_true" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 8 "isequiv_negb" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 20 "negb" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 10 "negb_ne" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 11 "not_fixed_negb" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 21 "orb" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 14 "true_ne_false" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 16 "trunc_if" [body=yes, kind=cnst, prop=no, path="Bool", ];
N: 28 "Bool" [kind=inductive, prop=no, path="Bool", ];
N: 27 "true" [kind=construct, prop=no, path="Bool", ];
N: 26 "false" [kind=construct, prop=no, path="Bool", ];
E: 1 5 [weight=4, ];
E: 1 7 [weight=27, ];
E: 1 26 [weight=4, ];
E: 1 27 [weight=10, ];
E: 1 28 [weight=134, ];
E: 2 7 [weight=4, ];
E: 2 14 [weight=1, ];
E: 2 27 [weight=1, ];
E: 2 28 [weight=12, ];
E: 3 4 [weight=8, ];
E: 3 7 [weight=11, ];
E: 3 26 [weight=2, ];
E: 3 27 [weight=3, ];
E: 3 28 [weight=66, ];
E: 4 5 [weight=1, ];
E: 4 7 [weight=1, ];
E: 4 26 [weight=1, ];
E: 4 27 [weight=2, ];
E: 4 28 [weight=51, ];
E: 5 6 [weight=1, ];
E: 5 7 [weight=11, ];
E: 5 20 [weight=2, ];
E: 5 26 [weight=7, ];
E: 5 27 [weight=15, ];
E: 5 28 [weight=79, ];
E: 6 20 [weight=9, ];
E: 6 26 [weight=27, ];
E: 6 27 [weight=22, ];
E: 6 28 [weight=52, ];
E: 7 8 [weight=1, ];
E: 7 20 [weight=1, ];
E: 7 28 [weight=4, ];
E: 8 20 [weight=67, ];
E: 8 26 [weight=15, ];
E: 8 27 [weight=15, ];
E: 8 28 [weight=47, ];
E: 9 26 [weight=11, ];
E: 9 27 [weight=11, ];
E: 9 28 [weight=19, ];
E: 10 20 [weight=8, ];
E: 10 26 [weight=10, ];
E: 10 27 [weight=10, ];
E: 10 28 [weight=25, ];
E: 11 14 [weight=1, ];
E: 11 15 [weight=1, ];
E: 11 20 [weight=2, ];
E: 11 28 [weight=5, ];
E: 12 13 [weight=1, ];
E: 12 28 [weight=3, ];
E: 13 14 [weight=1, ];
E: 13 15 [weight=1, ];
E: 13 26 [weight=11, ];
E: 13 27 [weight=11, ];
E: 13 28 [weight=22, ];
E: 14 15 [weight=1, ];
E: 14 26 [weight=3, ];
E: 14 27 [weight=3, ];
E: 14 28 [weight=5, ];
E: 15 26 [weight=3, ];
E: 15 27 [weight=3, ];
E: 15 28 [weight=5, ];
E: 16 28 [weight=5, ];
E: 17 19 [weight=4, ];
E: 17 26 [weight=14, ];
E: 17 27 [weight=78, ];
E: 17 28 [weight=64, ];
E: 18 19 [weight=4, ];
E: 18 26 [weight=1, ];
E: 18 27 [weight=7, ];
E: 18 28 [weight=7, ];
E: 19 27 [weight=1, ];
E: 19 28 [weight=7, ];
E: 20 26 [weight=1, ];
E: 20 27 [weight=1, ];
E: 20 28 [weight=5, ];
E: 21 27 [weight=1, ];
E: 21 28 [weight=7, ];
E: 22 26 [weight=1, ];
E: 22 28 [weight=7, ];
E: 23 25 [weight=1, ];
E: 23 26 [weight=1, ];
E: 23 27 [weight=1, ];
E: 23 28 [weight=2, ];
E: 24 28 [weight=3, ];
E: 25 26 [weight=2, ];
E: 25 27 [weight=2, ];
E: 25 28 [weight=5, ];
